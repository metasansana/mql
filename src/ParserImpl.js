/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ParserImpl = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,20],$V2=[1,21],$V3=[12,19,20,23,26,50,75,79,88,94,104,127,142],$V4=[1,24],$V5=[1,29],$V6=[1,30],$V7=[1,34],$V8=[1,39],$V9=[1,45],$Va=[1,46],$Vb=[1,47],$Vc=[5,140],$Vd=[1,52],$Ve=[42,47,48,49,127],$Vf=[5,19,20,50,127,140],$Vg=[1,62],$Vh=[1,63],$Vi=[5,19,20,39,40,46,50,54,55,56,58,75,79,88,90,94,96,101,107,112,127,128,132,140],$Vj=[1,82],$Vk=[1,87],$Vl=[1,92],$Vm=[5,14,19,20,39,40,46,48,50,54,55,56,58,61,63,64,65,66,67,68,69,70,71,75,79,88,90,94,96,101,107,112,126,127,128,131,132,138,139,140],$Vn=[5,14,19,20,39,40,46,50,54,55,56,58,75,79,88,90,94,96,101,107,112,127,128,132,140],$Vo=[46,128],$Vp=[46,132],$Vq=[5,39,40,75,79,88,90,94,96,101,107,112,127,140],$Vr=[5,39,40,46,75,79,88,90,94,96,101,107,112,127,140],$Vs=[1,102],$Vt=[1,103],$Vu=[1,104],$Vv=[1,105],$Vw=[1,106],$Vx=[1,107],$Vy=[5,75,79,88,90,96,101,107,112,127],$Vz=[1,122],$VA=[5,14,46,50,75,79,88,90,96,101,107,112,127],$VB=[5,39,40,46,54,55,56,58,75,79,88,90,94,96,101,107,112,127,140],$VC=[48,126,127,131,138,139],$VD=[5,39,40,46,54,56,58,75,79,88,90,94,96,101,107,112,127,140],$VE=[5,39,40,46,56,58,75,79,88,90,94,96,101,107,112,127,140],$VF=[5,90,96,101,107,112],$VG=[1,159],$VH=[1,160],$VI=[1,162],$VJ=[19,48,126,127,131,138,139],$VK=[5,75,79,88,90,94,96,101,107,112,127],$VL=[1,185],$VM=[1,186],$VN=[5,46,75,79,88,90,94,96,101,107,112,127],$VO=[50,75,79,88,94,127],$VP=[1,209],$VQ=[75,79,88,94,127];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"statement":3,"insert_statement":4,"EOF":5,"update_statement":6,"remove_statement":7,"find_statement":8,"find_and_modify_statement":9,"INTO":10,"collection":11,"INSERT":12,"value_expression":13,"FROM":14,"update_clauses":15,"update_statement_option0":16,"update_statement_option1":17,"update_clause":18,"SET":19,"PUSH":20,"field_name":21,"update_clause_group0":22,"REMOVE":23,"remove_statement_option0":24,"remove_statement_option1":25,"FIND":26,"find_statement_option0":27,"field_selection":28,"find_statement_option1":29,"find_statement_repetition0":30,"find_statement_repetition1":31,"version":32,"where_expression":33,"update_or_upsert":34,"find_and_modify_statement_option0":35,"find_and_modify_statement_option1":36,"NEW":37,"ORIGINAL":38,"UPDATE":39,"UPSERT":40,"field_references":41,"*":42,"context_reference":43,"object_literal":44,"field_reference":45,",":46,"!":47,"STRING_LITERAL":48,"IDENTIFIER":49,"WHERE":50,"filters":51,"filter":52,"logical_filter":53,"AND":54,"OR":55,"NOR":56,"(":57,")":58,"logical_operator":59,"filter_operator":60,"IN":61,"array_literal":62,"NOT":63,"EXISTS":64,">":65,">=":66,"<":67,"<=":68,"==":69,"!=":70,"ELEM":71,"modifiers":72,"modifiers_group0":73,"limit_clause":74,"LIMIT":75,"BY":76,"number_literal":77,"sort_clause":78,"SORT":79,"field_sorts":80,"sort_clause_group0":81,"field_sort":82,"-":83,"field_sort_group0":84,"+":85,"field_sort_group1":86,"skip_clause":87,"SKIP":88,"joins":89,"POPULATE":90,"joins_option0":91,"joins_option1":92,"joins_repetition0":93,"ON":94,"join_condition":95,"INFLATE":96,"joins_option2":97,"joins_option3":98,"joins_repetition1":99,"join_in_condition":100,"JOIN":101,"joins_option4":102,"joins_repetition2":103,"AS":104,"joins_option5":105,"joins_repetition3":106,"LEFT":107,"joins_option6":108,"joins_repetition4":109,"joins_option7":110,"joins_repetition5":111,"OUTER":112,"joins_option8":113,"joins_repetition6":114,"joins_option9":115,"joins_repetition7":116,"join_condition_group0":117,"join_condition_group1":118,"join_in_condition_group0":119,"join_in_condition_group1":120,"alias":121,"collection_group0":122,"identifier":123,"current_reference":124,"literal":125,"@":126,"{":127,"}":128,"string_literal":129,"boolean_literal":130,"[":131,"]":132,"value_list":133,"key_value_pairs":134,"key_value_pair":135,"key_value_pair_group0":136,":":137,"NUMBER_LITERAL":138,"BOOLEAN":139,"ONCE":140,"ONE":141,"where_experession":142,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"INTO",12:"INSERT",14:"FROM",19:"SET",20:"PUSH",23:"REMOVE",26:"FIND",37:"NEW",38:"ORIGINAL",39:"UPDATE",40:"UPSERT",42:"*",46:",",47:"!",48:"STRING_LITERAL",49:"IDENTIFIER",50:"WHERE",54:"AND",55:"OR",56:"NOR",57:"(",58:")",61:"IN",63:"NOT",64:"EXISTS",65:">",66:">=",67:"<",68:"<=",69:"==",70:"!=",71:"ELEM",75:"LIMIT",76:"BY",79:"SORT",83:"-",85:"+",88:"SKIP",90:"POPULATE",94:"ON",96:"INFLATE",101:"JOIN",104:"AS",107:"LEFT",112:"OUTER",126:"@",127:"{",128:"}",131:"[",132:"]",137:":",138:"NUMBER_LITERAL",139:"BOOLEAN",140:"ONCE",141:"ONE",142:"where_experession"},
productions_: [0,[3,2],[3,2],[3,2],[3,2],[3,2],[4,4],[6,5],[15,1],[15,2],[18,2],[18,3],[18,1],[7,5],[8,8],[9,10],[32,1],[32,1],[34,1],[34,1],[28,1],[28,1],[28,1],[28,1],[41,1],[41,3],[45,1],[45,2],[21,1],[21,1],[33,2],[33,2],[51,1],[51,3],[51,1],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[59,1],[59,1],[59,1],[52,3],[52,3],[52,4],[52,2],[52,3],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[72,1],[74,3],[78,3],[78,1],[80,1],[80,3],[82,2],[82,2],[87,2],[89,9],[89,9],[89,8],[89,10],[89,9],[89,11],[89,9],[89,11],[95,3],[100,3],[121,2],[11,1],[123,1],[13,1],[13,1],[13,1],[124,2],[43,5],[125,1],[125,1],[125,1],[125,1],[125,1],[62,2],[62,3],[133,1],[133,3],[44,2],[44,3],[134,1],[134,3],[135,3],[129,1],[77,1],[130,1],[16,0],[16,1],[17,0],[17,1],[22,1],[22,1],[24,0],[24,1],[25,0],[25,1],[27,0],[27,1],[29,0],[29,1],[30,0],[30,2],[31,0],[31,2],[35,0],[35,1],[36,0],[36,1],[73,1],[73,1],[73,1],[81,1],[81,1],[84,1],[84,1],[86,1],[86,1],[91,0],[91,1],[92,0],[92,1],[93,0],[93,2],[97,0],[97,1],[98,0],[98,1],[99,0],[99,2],[102,0],[102,1],[103,0],[103,2],[105,0],[105,1],[106,0],[106,2],[108,0],[108,1],[109,0],[109,2],[110,0],[110,1],[111,0],[111,2],[113,0],[113,1],[114,0],[114,2],[115,0],[115,1],[116,0],[116,2],[117,1],[117,1],[118,1],[118,1],[119,1],[119,1],[120,1],[120,1],[122,1],[122,1],[122,1],[136,1],[136,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 2: case 3: case 4: case 5:
this.$ = $$[$0-1]; return this.$;
break;
case 6:
this.$ = new yy.ast.InsertStatement($$[$0-2], $$[$0], this._$);           
break;
case 7:
this.$ = new yy.ast.UpdateStatement($$[$0-3], $$[$0-2], $$[$0-1]||[], $$[$0]||false,  this._$);
break;
case 8: case 34: case 97:
this.$ = [$$[$0]];
break;
case 9:
this.$ = $$[$0-1].concat($$[$0]); 
break;
case 10:
this.$ = new yy.ast.SetClause($$[$0], this._$); 
break;
case 11:
this.$ = new yy.ast.PushClause($$[$0-1], $$[$0],  _$[$0-1]);
break;
case 12: case 29: case 82:
this.$ = $$[$0];
break;
case 13:
this.$ = new yy.ast.RemoveStatement($$[$0-3], $$[$0-1]||[], $$[$0]||false, this._$);
break;
case 14:
this.$ = new yy.ast.FindStatement($$[$0-6], $$[$0-3], $$[$0-2] || [], $$[$0-1] || [], $$[$0]||[], $$[$0-4], this._$);
break;
case 15:
this.$ =
                      new yy.ast.FindAndModifyStatement
                      ($$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0], this._$); 
                      
break;
case 16: case 18:
this.$ = false;  
break;
case 17:
this.$ = true; 
break;
case 19:
this.$ = true;   
break;
case 20:
this.$ = $$[$0];                                   
break;
case 21:
this.$ = [new yy.ast.AllFieldsReference(this._$)]   
break;
case 22: case 23:
this.$ = [$$[$0]];                                 
break;
case 24: case 32: case 101:
this.$ = [$$[$0]]; 
break;
case 25: case 102:
this.$ = $$[$0-2].concat($$[$0]); 
break;
case 26:
this.$ = new yy.ast.FieldReference($$[$0], true, this._$);  
break;
case 27:
this.$ = new yy.ast.FieldReference($$[$0], false,  this._$);
break;
case 28:
this.$ = $$[$0].substring(1, $$[$0].length -1);
break;
case 30:
this.$ = $$[$0];                 
break;
case 31:
this.$ = [$$[$0]];               
break;
case 33:
this.$ = $$[$0-2];
                       this.$.push($$[$0]);
                      
break;
case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43:
this.$ = new yy.ast.LogicFilter($$[$0-2], $$[$0-1], $$[$0], this._$);
break;
case 44: case 45: case 46:
this.$ = new yy.ast.LogicFilter($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 47:
this.$ = $$[$0-1];
break;
case 48:
this.$ = '$or'; 
break;
case 49:
this.$ = '$and';
break;
case 50:
this.$ = '$nor';
break;
case 51:
this.$ = new yy.ast.Filter($$[$0-2], $$[$0-1], $$[$0], this._$);           
break;
case 52:
this.$ = new yy.ast.Filter($$[$0-2], '$in', $$[$0], this._$);        
break;
case 53:
this.$ = new yy.ast.Filter($$[$0-3], '$nin', $$[$0], this._$);       
break;
case 54:
this.$ = new yy.ast.Filter($$[$0-1], '$exists',
                      new yy.ast.BooleanLiteral(true, this._$));  
break;
case 55:
this.$ =
                      new yy.ast.Filter($$[$0-2], '$exists',
                      new yy.ast.BooleanLiteral(false, this._$)); 
break;
case 56:
this.$ = '$gt';        
break;
case 57:
this.$ = '$gte';       
break;
case 58:
this.$ = '$lt';        
break;
case 59:
this.$ = '$lte';       
break;
case 60:
this.$ = '$eq';        
break;
case 61:
this.$ = '$ne';        
break;
case 62:
this.$ = '$elemMatch'  
break;
case 64:
this.$ = new yy.ast.LimitClause($$[$0-1], this._$);     
break;
case 65:
this.$ = new yy.ast.SortClause(
                      new yy.ast.ObjectLiteral($$[$0], this._$), this._$);    
break;
case 66:
this.$ = new yy.ast.SortClause($$[$0], this._$);      
break;
case 67:
this.$ = [$$[$0]];                               
break;
case 68:
this.$ = $$[$0-2].concat($$[$0]);                      
break;
case 69:
this.$ = {key: $$[$0], value: new yy.ast.NumberLiteral(-1, this._$)}; 
break;
case 70:
this.$ = {key: $$[$0], value: new yy.ast.NumberLiteral(1, this._$)}; 
break;
case 71:
this.$ = new yy.SkipClause($$[$0], this._$);          
break;
case 72:
this.$ =
                      new yy.ast.PopulateStatement
                      ($$[$0-7], $$[$0-5], $$[$0-4], $$[$0-3] || [], $$[$0-2] || [], $$[$0],  this._$);
                      
break;
case 73:
this.$ =
                      new yy.ast.InflateStatement
                      ($$[$0-7], $$[$0-5], $$[$0-4], $$[$0-3] || [], $$[$0-2] || [], $$[$0],  this._$);
                      
break;
case 74:
this.$ =
                      new yy.ast.InnerJoinStatement
                      ($$[$0-6], $$[$0-4], $$[$0-4], $$[$0-3]||[], $$[$0-2]||[], $$[$0], this._$);
                      
break;
case 75:
this.$ =
                      new yy.ast.InnerJoinStatement
                      ($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-3]||[], $$[$0-2]||[], $$[$0], this._$);
                      
break;
case 76:
this.$ =
                      new yy.ast.LeftJoinStatement
                      ($$[$0-6], $$[$0-4], $$[$0-4], $$[$0-3] || [], $$[$0-2] || [], $$[$0],  this._$);
                      
break;
case 77:
this.$ =
                      new yy.ast.LeftJoinStatement
                      ($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-3] || [], $$[$0-2] || [], $$[$0],  this._$);
                      
break;
case 78:
this.$ =
                      new yy.ast.OuterJoinStatement
                      ($$[$0-6], $$[$0-4], $$[$0-4], $$[$0-3] || [], $$[$0-2] || [], $$[$0], this._$);
                      
break;
case 79:
this.$ =
                      new yy.ast.OuterJoinStatement
                      ($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-3] || [], $$[$0-2] || [], $$[$0],  this._$);
                      
break;
case 80:
this.$ = new yy.ast.JoinCondition($$[$0-2], $$[$0], this._$);
break;
case 81:
this.$ = new yy.ast.JoinInCondition($$[$0-2], $$[$0], this._$);
break;
case 84:
this.$ = new yy.ast.Identifier($$[$0], this._$);
break;
case 88:
this.$ = new yy.ast.ContextReference($$[$0], this._$); 
break;
case 89:
this.$ = new yy.ast.ContextReference($$[$0-2],  this._$);
break;
case 95:
this.$ = new yy.ast.ArrayLiteral([], this._$); 
break;
case 96:
this.$ = new yy.ast.ArrayLiteral($$[$0-1], this._$); 
break;
case 98:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 99:
this.$ = new yy.ast.ObjectLiteral([], this._$); 
break;
case 100:
this.$ = new yy.ast.ObjectLiteral($$[$0-1], this._$); 
break;
case 103:
this.$ = {key:$$[$0-2], value:$$[$0]}; 
break;
case 104:
this.$ = new yy.ast.StringLiteral($$[$0], this._$); 
break;
case 105:
this.$ = new yy.ast.NumberLiteral(yy.help.parseNumber($$[$0]), this._$); 
break;
case 106:
this.$ = new yy.ast.BooleanLiteral(yy.help.parseBoolean($$[$0]), this._$);
break;
case 121: case 123: case 142: case 148: case 152: case 156: case 160: case 164: case 168: case 172:
this.$ = [];
break;
case 122: case 124: case 143: case 149: case 153: case 157: case 161: case 165: case 169: case 173:
$$[$0-1].push($$[$0]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:[1,7],14:[1,8]},{1:[3]},{5:[1,9]},{5:[1,10]},{5:[1,11]},{5:[1,12]},{5:[1,13]},{11:14,43:18,48:$V0,49:$V1,122:15,123:17,127:$V2,129:16},{11:22,43:18,48:$V0,49:$V1,122:15,123:17,127:$V2,129:16},{1:[2,1]},{1:[2,2]},{1:[2,3]},{1:[2,4]},{1:[2,5]},{12:[1,23]},o($V3,[2,83]),o($V3,[2,182]),o($V3,[2,183]),o($V3,[2,184]),o([5,12,19,20,23,26,39,40,46,50,54,55,56,58,61,69,75,79,88,90,94,96,101,104,107,112,127,128,132,137,140,142],[2,104]),o([5,12,19,20,23,26,46,50,61,69,75,79,88,90,94,96,101,104,107,112,127,137,142],[2,84]),{127:$V4},{15:25,18:28,19:$V5,20:$V6,22:31,23:[1,26],26:[1,27],43:33,44:32,127:$V7},{13:35,43:36,44:41,48:$V0,62:40,77:43,124:37,125:38,126:$V8,127:$V7,129:42,130:44,131:$V9,138:$Va,139:$Vb},{49:[1,48]},o($Vc,[2,107],{22:31,44:32,43:33,16:49,18:50,33:51,19:$V5,20:$V6,50:$Vd,127:$V7}),o($Vc,[2,113],{24:53,33:54,50:$Vd}),o($Ve,[2,117],{27:55,32:56,37:[1,58],38:[1,59],141:[1,57]}),o($Vf,[2,8]),{13:60,43:36,44:41,48:$V0,62:40,77:43,124:37,125:38,126:$V8,127:$V7,129:42,130:44,131:$V9,138:$Va,139:$Vb},{21:61,48:$Vg,49:$Vh},o($Vf,[2,12]),o($Vf,[2,111]),o($Vf,[2,112]),{48:$V0,49:$V1,123:68,127:$V4,128:[1,64],129:69,134:65,135:66,136:67},{5:[2,6]},o($Vi,[2,85]),o($Vi,[2,86]),o($Vi,[2,87]),{21:70,48:$Vg,49:$Vh},o($Vi,[2,90]),o($Vi,[2,91]),o($Vi,[2,92]),o($Vi,[2,93]),o($Vi,[2,94]),{13:73,43:36,44:41,48:$V0,62:40,77:43,124:37,125:38,126:$V8,127:$V7,129:42,130:44,131:$V9,132:[1,71],133:72,138:$Va,139:$Vb},o($Vi,[2,105]),o($Vi,[2,106]),{128:[1,74]},{5:[2,109],17:75,140:[1,76]},o($Vf,[2,9]),o($Vc,[2,108]),{21:81,43:78,48:$Vg,49:$Vh,51:77,52:79,53:80,57:$Vj,127:$V2},{5:[2,115],25:83,140:[1,84]},o($Vc,[2,114]),{21:91,28:85,41:86,42:$Vk,43:88,44:89,45:90,47:$Vl,48:$Vg,49:$Vh,127:$V7},{21:91,28:93,41:86,42:$Vk,43:88,44:89,45:90,47:$Vl,48:$Vg,49:$Vh,127:$V7},o($Ve,[2,118]),o($Ve,[2,16]),o($Ve,[2,17]),o($Vf,[2,10]),{13:94,43:36,44:41,48:$V0,62:40,77:43,124:37,125:38,126:$V8,127:$V7,129:42,130:44,131:$V9,138:$Va,139:$Vb},o($Vm,[2,28]),o($Vm,[2,29]),o($Vn,[2,99]),{46:[1,96],128:[1,95]},o($Vo,[2,101]),{137:[1,97]},{137:[2,185]},{137:[2,186]},o($Vi,[2,88]),o($Vi,[2,95]),{46:[1,99],132:[1,98]},o($Vp,[2,97]),{128:[1,100]},{5:[2,7]},{5:[2,110]},o($Vq,[2,30],{46:[1,101]}),o($Vq,[2,31]),o($Vr,[2,32],{54:$Vs,55:$Vt,56:$Vu}),o($Vr,[2,34],{54:$Vv,55:$Vw,56:$Vx}),{60:108,61:[1,109],63:[1,110],64:[1,111],65:[1,112],66:[1,113],67:[1,114],68:[1,115],69:[1,116],70:[1,117],71:[1,118]},{21:81,48:$Vg,49:$Vh,52:120,53:119,57:$Vj},{5:[2,13]},{5:[2,116]},o($Vy,[2,119],{29:121,33:123,46:$Vz,50:$Vd}),o($VA,[2,20]),o($VA,[2,21]),o($VA,[2,22]),o($VA,[2,23]),o($VA,[2,24]),o($VA,[2,26]),{21:124,48:$Vg,49:$Vh},{33:125,46:$Vz,50:$Vd},o($Vf,[2,11]),o($Vn,[2,100]),{48:$V0,49:$V1,123:68,129:69,135:126,136:67},{13:127,43:36,44:41,48:$V0,62:40,77:43,124:37,125:38,126:$V8,127:$V7,129:42,130:44,131:$V9,138:$Va,139:$Vb},o($Vi,[2,96]),{13:128,43:36,44:41,48:$V0,62:40,77:43,124:37,125:38,126:$V8,127:$V7,129:42,130:44,131:$V9,138:$Va,139:$Vb},o([5,12,14,19,20,23,26,39,40,46,50,54,55,56,58,75,79,88,90,94,96,101,104,107,112,127,128,132,140,142],[2,89]),{21:81,48:$Vg,49:$Vh,52:129},{21:81,48:$Vg,49:$Vh,52:130,53:131,57:$Vj},{21:81,48:$Vg,49:$Vh,52:132,53:133,57:$Vj},{21:81,48:$Vg,49:$Vh,52:134,53:135,57:$Vj},{21:81,48:$Vg,49:$Vh,52:136,53:137,57:$Vj},{21:81,48:$Vg,49:$Vh,52:138,53:139,57:$Vj},{21:81,48:$Vg,49:$Vh,52:140,53:141,57:$Vj},{13:142,43:36,44:41,48:$V0,62:40,77:43,124:37,125:38,126:$V8,127:$V7,129:42,130:44,131:$V9,138:$Va,139:$Vb},{62:143,131:$V9},{61:[1,144],64:[1,145]},o($VB,[2,54]),o($VC,[2,56]),o($VC,[2,57]),o($VC,[2,58]),o($VC,[2,59]),o($VC,[2,60]),o($VC,[2,61]),o($VC,[2,62]),{54:$Vv,55:$Vw,56:$Vx,58:[1,146]},{54:$Vs,55:$Vt,56:$Vu},o($Vy,[2,121],{30:147}),{21:91,45:148,47:$Vl,48:$Vg,49:$Vh},o($Vy,[2,120]),o($VA,[2,27]),{34:149,39:[1,150],40:[1,151]},o($Vo,[2,102]),o($Vo,[2,103]),o($Vp,[2,98]),o($Vr,[2,33]),o($VD,[2,35],{55:$Vt}),o($VD,[2,38],{55:$Vw}),o($VB,[2,36]),o($VB,[2,39]),o($VE,[2,37],{54:$Vs,55:$Vt}),o($VE,[2,40],{54:$Vv,55:$Vw}),o($VD,[2,41],{55:$Vt}),o($VD,[2,44],{55:$Vw}),o($VB,[2,42]),o($VB,[2,45]),o($VE,[2,43],{54:$Vs,55:$Vt}),o($VE,[2,46],{54:$Vv,55:$Vw}),o($VB,[2,51]),o($VB,[2,52]),{62:152,131:$V9},o($VB,[2,55]),o($VB,[2,47]),o($VF,[2,123],{31:153,72:154,73:155,74:156,78:157,87:158,81:161,43:163,44:164,75:$VG,79:$VH,88:$VI,127:$V7}),o($VA,[2,25]),o($VC,[2,125],{35:165,19:[1,166]}),o($VJ,[2,18]),o($VJ,[2,19]),o($VB,[2,53]),{5:[2,14],89:167,90:[1,168],96:[1,169],101:[1,170],107:[1,171],112:[1,172]},o($Vy,[2,122]),o($VK,[2,63]),o($VK,[2,129]),o($VK,[2,130]),o($VK,[2,131]),{76:[1,173]},{76:[1,174]},o($VK,[2,66]),{77:175,138:$Va},o($VK,[2,132]),o($VK,[2,133]),{13:176,43:36,44:41,48:$V0,62:40,77:43,124:37,125:38,126:$V8,127:$V7,129:42,130:44,131:$V9,138:$Va,139:$Vb},o($VC,[2,126]),o($VF,[2,124]),{21:91,28:177,41:86,42:$Vk,43:88,44:89,45:90,47:$Vl,48:$Vg,49:$Vh,127:$V7},{21:91,28:178,41:86,42:$Vk,43:88,44:89,45:90,47:$Vl,48:$Vg,49:$Vh,127:$V7},{21:91,28:179,41:86,42:$Vk,43:88,44:89,45:90,47:$Vl,48:$Vg,49:$Vh,127:$V7},{101:[1,180]},{101:[1,181]},{77:182,138:$Va},{80:183,82:184,83:$VL,85:$VM},o($VK,[2,71]),{5:[2,127],36:187,43:163,44:164,78:188,79:$VH,81:161,127:$V7},{14:[1,189],46:$Vz},{14:[1,190],46:$Vz},{14:[1,191],46:$Vz},{21:91,28:192,41:86,42:$Vk,43:88,44:89,45:90,47:$Vl,48:$Vg,49:$Vh,127:$V7},{21:91,28:193,41:86,42:$Vk,43:88,44:89,45:90,47:$Vl,48:$Vg,49:$Vh,127:$V7},o($VK,[2,64]),o($VK,[2,65],{46:[1,194]}),o($VN,[2,67]),{48:$V0,49:$V1,84:195,123:196,129:197},{48:$V0,49:$V1,86:198,123:199,129:200},{5:[2,15]},{5:[2,128]},{11:201,43:18,48:$V0,49:$V1,122:15,123:17,127:$V2,129:16},{11:202,43:18,48:$V0,49:$V1,122:15,123:17,127:$V2,129:16},{11:203,43:18,48:$V0,49:$V1,122:15,123:17,127:$V2,129:16},{14:[1,204],46:$Vz},{14:[1,205],46:$Vz},{82:206,83:$VL,85:$VM},o($VN,[2,69]),o($VN,[2,134]),o($VN,[2,135]),o($VN,[2,70]),o($VN,[2,136]),o($VN,[2,137]),o($VO,[2,138],{91:207,121:208,104:$VP}),o($VO,[2,144],{97:210,121:211,104:$VP}),o($VQ,[2,150],{102:212,33:214,50:$Vd,104:[1,213]}),{11:215,43:18,48:$V0,49:$V1,122:15,123:17,127:$V2,129:16},{11:216,43:18,48:$V0,49:$V1,122:15,123:17,127:$V2,129:16},o($VN,[2,68]),o($VQ,[2,140],{92:217,33:218,50:$Vd}),o($VO,[2,139]),{11:219,43:18,48:$V0,49:$V1,122:15,123:17,127:$V2,129:16},o($VQ,[2,146],{98:220,33:221,50:$Vd}),o($VO,[2,145]),o($VQ,[2,152],{103:222}),{11:223,43:18,48:$V0,49:$V1,122:15,123:17,127:$V2,129:16},o($VQ,[2,151]),o($VQ,[2,158],{108:224,33:226,50:$Vd,104:[1,225]}),o($VQ,[2,166],{113:227,104:[1,228],142:[1,229]}),o($VQ,[2,142],{93:230}),o($VQ,[2,141]),o($VO,[2,82]),o($VQ,[2,148],{99:231}),o($VQ,[2,147]),{43:163,44:164,72:233,73:155,74:156,75:$VG,78:157,79:$VH,81:161,87:158,88:$VI,94:[1,232],127:$V7},o($VQ,[2,154],{105:234,33:235,50:$Vd}),o($VQ,[2,160],{109:236}),{11:237,43:18,48:$V0,49:$V1,122:15,123:17,127:$V2,129:16},o($VQ,[2,159]),o($VQ,[2,168],{114:238}),{11:239,43:18,48:$V0,49:$V1,122:15,123:17,127:$V2,129:16},o($VQ,[2,167]),{43:163,44:164,72:241,73:155,74:156,75:$VG,78:157,79:$VH,81:161,87:158,88:$VI,94:[1,240],127:$V7},{43:163,44:164,72:243,73:155,74:156,75:$VG,78:157,79:$VH,81:161,87:158,88:$VI,94:[1,242],127:$V7},{48:$V0,49:$V1,95:244,117:245,123:247,129:246},o($VQ,[2,153]),o($VQ,[2,156],{106:248}),o($VQ,[2,155]),{43:163,44:164,72:250,73:155,74:156,75:$VG,78:157,79:$VH,81:161,87:158,88:$VI,94:[1,249],127:$V7},o($VQ,[2,162],{110:251,33:252,50:$Vd}),{43:163,44:164,72:254,73:155,74:156,75:$VG,78:157,79:$VH,81:161,87:158,88:$VI,94:[1,253],127:$V7},o($VQ,[2,170],{115:255,142:[1,256]}),{48:$V0,49:$V1,95:257,117:245,123:247,129:246},o($VQ,[2,143]),{48:$V0,49:$V1,100:258,119:259,123:261,129:260},o($VQ,[2,149]),o($VF,[2,74]),{69:[1,262]},{69:[2,174]},{69:[2,175]},{43:163,44:164,72:264,73:155,74:156,75:$VG,78:157,79:$VH,81:161,87:158,88:$VI,94:[1,263],127:$V7},{48:$V0,49:$V1,95:265,117:245,123:247,129:246},o($VQ,[2,161]),o($VQ,[2,164],{111:266}),o($VQ,[2,163]),{48:$V0,49:$V1,95:267,117:245,123:247,129:246},o($VQ,[2,169]),o($VQ,[2,172],{116:268}),o($VQ,[2,171]),o($VF,[2,72]),o($VF,[2,73]),{61:[1,269]},{61:[2,178]},{61:[2,179]},{48:$V0,49:$V1,118:270,123:272,129:271},{48:$V0,49:$V1,95:273,117:245,123:247,129:246},o($VQ,[2,157]),o($VF,[2,76]),{43:163,44:164,72:275,73:155,74:156,75:$VG,78:157,79:$VH,81:161,87:158,88:$VI,94:[1,274],127:$V7},o($VF,[2,78]),{43:163,44:164,72:277,73:155,74:156,75:$VG,78:157,79:$VH,81:161,87:158,88:$VI,94:[1,276],127:$V7},{48:$V0,49:$V1,120:278,123:280,129:279},o($VF,[2,80]),o($VF,[2,176]),o($VF,[2,177]),o($VF,[2,75]),{48:$V0,49:$V1,95:281,117:245,123:247,129:246},o($VQ,[2,165]),{48:$V0,49:$V1,95:282,117:245,123:247,129:246},o($VQ,[2,173]),o($VF,[2,81]),o($VF,[2,180]),o($VF,[2,181]),o($VF,[2,77]),o($VF,[2,79])],
defaultActions: {9:[2,1],10:[2,2],11:[2,3],12:[2,4],13:[2,5],35:[2,6],68:[2,185],69:[2,186],75:[2,7],76:[2,110],83:[2,13],84:[2,116],187:[2,15],188:[2,128],246:[2,174],247:[2,175],260:[2,178],261:[2,179]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return;
break;
case 1:return 14;
break;
case 2:return 26;
break;
case 3:return 104;
break;
case 4:return 50;
break;
case 5:return 94;
break;
case 6:return 101;
break;
case 7:return 'FULL';
break;
case 8:return 112;
break;
case 9:return 107;
break;
case 10:return 141;
break;
case 11:return 61;
break;
case 12:return 'NIN';
break;
case 13:return 139;
break;
case 14:return 55;
break;
case 15:return 54;
break;
case 16:return 63;
break;
case 17:return 56;
break;
case 18:return 64;
break;
case 19:return 75;
break;
case 20:return 79;
break;
case 21:return 76;
break;
case 22:return 10;
break;
case 23:return 88;
break;
case 24:return 12;
break;
case 25:return 23;
break;
case 26:return 39;
break;
case 27:return 40;
break;
case 28:return 'WITH';
break;
case 29:return 19;
break;
case 30:return 20;
break;
case 31:return 140;
break;
case 32:return 38;
break;
case 33:return 37;
break;
case 34:return 90;
break;
case 35:return 96;
break;
case 36:return 138;
break;
case 37:return 48;
break;
case 38:return 71;
break;
case 39:return 42;
break;
case 40:return 65;
break;
case 41:return 67;
break;
case 42:return 57;
break;
case 43:return 58;
break;
case 44:return 131;
break;
case 45:return 132;
break;
case 46:return ';';
break;
case 47:return 137;
break;
case 48:return '=';
break;
case 49:return 69;
break;
case 50:return 70;
break;
case 51:return 66;
break;
case 52:return 68;
break;
case 53:return 85;
break;
case 54:return 83;
break;
case 55:return 42;
break;
case 56:return '/';
break;
case 57:return 47;
break;
case 58:return 46;
break;
case 59:return '?';
break;
case 60:return 126;
break;
case 61:return 127;
break;
case 62:return 128;
break;
case 63:return 49;
break;
case 64:return 5;
break;
case 65:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:from|FROM)/,/^(?:find|FIND)/,/^(?:as|AS)/,/^(?:where|WHERE)/,/^(?:on|ON)/,/^(?:join|JOIN)/,/^(?:full|FULL)/,/^(?:outer|OUTER)/,/^(?:left|LEFT)/,/^(?:one|ONE)/,/^(?:in|IN)/,/^(?:nin|NIN)/,/^(?:true|false)/,/^(?:or|OR)/,/^(?:and|AND)/,/^(?:not|NOT)/,/^(?:nor|NOR)/,/^(?:exists|EXISTS)/,/^(?:limit|LIMIT)/,/^(?:sort|SORT)/,/^(?:by|BY)/,/^(?:into|INTO)/,/^(?:skip|SKIP)/,/^(?:insert|INSERT)/,/^(?:remove|REMOVE)/,/^(?:update|UPDATE)/,/^(?:upsert|UPSERT)/,/^(?:with|WITH)/,/^(?:set|SET)/,/^(?:push|PUSH)/,/^(?:once|ONCE)/,/^(?:original|ORIGINAL)/,/^(?:new|NEW)/,/^(?:populate|POPULATE)/,/^(?:inflate|INFLATE)/,/^(?:((([-]?([-]?([0]|(([1-9])([0-9]+)*)))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([-]?([0]|(([1-9])([0-9]+)*)))(([eE])([+-]?[0-9]+))?))|([0][xX]([0-9a-fA-F])+)|([0]([0-7])+)))/,/^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')|(`(([^\`\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*`)))/,/^(?:\$elemMatch)/,/^(?:\*)/,/^(?:>)/,/^(?:<)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:!)/,/^(?:,)/,/^(?:\?)/,/^(?:@)/,/^(?:\{)/,/^(?:\})/,/^(?:([a-zA-Z$0-9_][a-zA-Z$_0-9.-]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ParserImpl;
exports.Parser = ParserImpl.Parser;
exports.parse = function () { return ParserImpl.parse.apply(ParserImpl, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}