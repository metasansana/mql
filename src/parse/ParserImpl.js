/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ParserImpl = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,17],$V2=[11,14,17,20,32,57,61,70,72,109],$V3=[1,24],$V4=[5,108],$V5=[1,28],$V6=[1,31],$V7=[1,32],$V8=[1,33],$V9=[1,34],$Va=[1,49],$Vb=[5,57,61,67,75,80],$Vc=[1,51],$Vd=[5,13,27,32,57,61,67,75,80],$Ve=[5,13,27,32,36,37,38,40,44,46,47,48,49,50,51,52,53,57,61,67,70,75,80,98,101,108],$Vf=[5,27,32,36,37,38,40,57,61,67,70,75,80,98,101,108],$Vg=[27,101],$Vh=[5,27,57,61,67,70,75,80,108],$Vi=[1,60],$Vj=[1,61],$Vk=[1,62],$Vl=[1,63],$Vm=[1,64],$Vn=[1,65],$Vo=[1,87],$Vp=[1,86],$Vq=[1,93],$Vr=[1,94],$Vs=[1,95],$Vt=[5,27,36,37,38,40,57,61,67,70,75,80,108],$Vu=[29,92,93,97,100,106,107],$Vv=[5,67,75,80],$Vw=[1,119],$Vx=[1,120],$Vy=[5,27,36,37,38,40,57,61,67,70,75,80,98,101,108],$Vz=[5,27,36,38,40,57,61,67,70,75,80,108],$VA=[5,27,38,40,57,61,67,70,75,80,108],$VB=[5,57,61,67,70,75,80],$VC=[27,98],$VD=[1,143],$VE=[1,144],$VF=[5,27,57,61,67,70,75,80],$VG=[57,61,70];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"statement":3,"insert_statement":4,"EOF":5,"update_statement":6,"remove_statement":7,"find_statement":8,"INTO":9,"collection":10,"INSERT":11,"object_literal":12,"FROM":13,"SET":14,"update_statement_option0":15,"update_statement_option1":16,"REMOVE":17,"remove_statement_option0":18,"remove_statement_option1":19,"FIND":20,"field_select_expression":21,"find_statement_option0":22,"find_statement_repetition0":23,"find_statement_repetition1":24,"field_name":25,"!":26,",":27,"*":28,"STRING_LITERAL":29,"IDENTIFIER":30,"where_expression":31,"WHERE":32,"filters":33,"filter":34,"logical_filter":35,"AND":36,"OR":37,"NOR":38,"(":39,")":40,"logical_operator":41,"filter_operator":42,"value_expression":43,"IN":44,"array_literal":45,"NOT":46,"EXISTS":47,">":48,">=":49,"<":50,"<=":51,"==":52,"!=":53,"modifiers":54,"modifiers_group0":55,"limit_clause":56,"LIMIT":57,"BY":58,"number_literal":59,"sort_clause":60,"SORT":61,"field_sorts":62,"field_sort":63,"-":64,"+":65,"joins":66,"JOIN":67,"joins_option0":68,"joins_repetition0":69,"ON":70,"join_condition":71,"AS":72,"joins_option1":73,"joins_repetition1":74,"LEFT":75,"joins_option2":76,"joins_repetition2":77,"joins_option3":78,"joins_repetition3":79,"OUTER":80,"joins_option4":81,"joins_repetition4":82,"joins_option5":83,"joins_repetition5":84,"join_condition_group0":85,"join_condition_group1":86,"collection_group0":87,"identifier":88,"context_reference":89,"current_reference":90,"literal":91,"@":92,"{{":93,"}}":94,"string_literal":95,"boolean_literal":96,"[":97,"]":98,"value_list":99,"{":100,"}":101,"key_value_pairs":102,"key_value_pair":103,"key_value_pair_group0":104,":":105,"NUMBER_LITERAL":106,"BOOLEAN":107,"ONCE":108,"where_experession":109,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"INTO",11:"INSERT",13:"FROM",14:"SET",17:"REMOVE",20:"FIND",26:"!",27:",",28:"*",29:"STRING_LITERAL",30:"IDENTIFIER",32:"WHERE",36:"AND",37:"OR",38:"NOR",39:"(",40:")",44:"IN",46:"NOT",47:"EXISTS",48:">",49:">=",50:"<",51:"<=",52:"==",53:"!=",57:"LIMIT",58:"BY",61:"SORT",64:"-",65:"+",67:"JOIN",70:"ON",72:"AS",75:"LEFT",80:"OUTER",92:"@",93:"{{",94:"}}",97:"[",98:"]",100:"{",101:"}",105:":",106:"NUMBER_LITERAL",107:"BOOLEAN",108:"ONCE",109:"where_experession"},
productions_: [0,[3,2],[3,2],[3,2],[3,2],[4,4],[6,6],[7,5],[8,7],[21,1],[21,2],[21,3],[21,4],[21,1],[25,1],[25,1],[31,2],[33,1],[33,3],[33,1],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[41,1],[41,1],[41,1],[34,3],[34,3],[34,4],[34,2],[34,3],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[54,1],[56,3],[60,3],[62,1],[62,3],[63,2],[63,2],[66,8],[66,10],[66,9],[66,11],[66,9],[66,11],[71,3],[10,1],[88,1],[43,1],[43,1],[43,1],[90,2],[89,3],[91,1],[91,1],[91,1],[91,1],[91,1],[45,2],[45,3],[99,1],[99,3],[12,2],[12,3],[102,1],[102,3],[103,3],[95,1],[59,1],[96,1],[15,0],[15,1],[16,0],[16,1],[18,0],[18,1],[19,0],[19,1],[22,0],[22,1],[23,0],[23,2],[24,0],[24,2],[55,1],[55,1],[68,0],[68,1],[69,0],[69,2],[73,0],[73,1],[74,0],[74,2],[76,0],[76,1],[77,0],[77,2],[78,0],[78,1],[79,0],[79,2],[81,0],[81,1],[82,0],[82,2],[83,0],[83,1],[84,0],[84,2],[85,1],[85,1],[86,1],[86,1],[87,1],[87,1],[104,1],[104,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 2: case 3: case 4:
this.$ = $$[$0-1]; return this.$;
break;
case 5:
this.$ = new yy.ast.InsertStatement($$[$0-2], $$[$0], this._$);           
break;
case 6:
this.$ = new yy.ast.UpdateStatement($$[$0-4], $$[$0-2], $$[$0-1]||[], $$[$0]||false,  this._$);
break;
case 7:
this.$ = new yy.ast.RemoveStatement($$[$0-3], $$[$0-1]||[], $$[$0]||false, this._$);
break;
case 8:
this.$ = new yy.ast.FindStatement($$[$0-5], $$[$0-3], $$[$0-2] || [], $$[$0-1] || [], $$[$0]||[],  this._$);
break;
case 9:
this.$ = {_id:false};
                       this.$[$$[$0]] = true;
                      
break;
case 10:
this.$ = {_id:false};
                       this.$[$$[$0]] = false;
                      
break;
case 11:
this.$ = $$[$0-2];
                       this.$[$$[$0]] = true;
                      
break;
case 12:
this.$ = $$[$0-3];
                       this.$[$$[$0]] = false;
                      
break;
case 13:
this.$ = {};
break;
case 14:
this.$ = $$[$0].substring(1, $$[$0].length -1);
break;
case 15: case 16:
this.$ = $$[$0];
break;
case 17: case 79:
this.$ = [$$[$0]]; 
break;
case 18:
this.$ = $$[$0-2];
                       this.$.push($$[$0]);
                      
break;
case 19: case 75:
this.$ = [$$[$0]];
break;
case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28:
this.$ = new yy.ast.LogicFilter($$[$0-2], $$[$0-1], $$[$0], this._$);
break;
case 29: case 30: case 31:
this.$ = new yy.ast.LogicFilter($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 32:
this.$ = $$[$0-1];
break;
case 33:
this.$ = '$or'; 
break;
case 34:
this.$ = '$and';
break;
case 35:
this.$ = '$nor';
break;
case 36:
this.$ = new yy.ast.Filter($$[$0-2], $$[$0-1], $$[$0], this._$);           
break;
case 37:
this.$ = new yy.ast.Filter($$[$0-2], '$in', $$[$0], this._$);        
break;
case 38:
this.$ = new yy.ast.Filter($$[$0-3], '$nin', $$[$0], this._$);       
break;
case 39:
this.$ = new yy.ast.Filter($$[$0-1], '$exists',
                      new yy.ast.BooleanLiteral(true, this._$));  
break;
case 40:
this.$ = 
                      new yy.ast.Filter($$[$0-2], '$exists',
                      new yy.ast.BooleanLiteral(false, this._$)); 
break;
case 41:
this.$ = '$gt';    
break;
case 42:
this.$ = '$gte';   
break;
case 43:
this.$ = '$lt';    
break;
case 44:
this.$ = '$lte';   
break;
case 45:
this.$ = '$eq';    
break;
case 46:
this.$ = '$ne';    
break;
case 48:
this.$ = new yy.ast.LimitClause($$[$0-1], this._$);     
break;
case 49:
this.$ = new yy.ast.SortClause($$[$0],  this._$);     
break;
case 50:
this.$ = [$$[$0]];                               
break;
case 51:
this.$ = $$[$0-2].concat($$[$0]);                      
break;
case 52:
this.$ = new yy.ast.FieldSort($$[$0], -1, this._$);   
break;
case 53:
this.$ = new yy.ast.FieldSort($$[$0], 1, this._$);    
break;
case 54:
this.$ = 
                      new yy.ast.InnerJoinStatement
                      ($$[$0-6], $$[$0-4], $$[$0-4], $$[$0-3]||[], $$[$0-2]||[], $$[$0], this._$);
                      
break;
case 55:
this.$ = 
                      new yy.ast.InnerJoinStatement
                      ($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-3]||[], $$[$0-2]||[], $$[$0], this._$);
                      
break;
case 56:
this.$ = 
                      new yy.ast.LeftJoinStatement
                      ($$[$0-6], $$[$0-4], $$[$0-4], $$[$0-3] || [], $$[$0-2] || [], $$[$0],  this._$);        
                      
break;
case 57:
this.$ = 
                      new yy.ast.LeftJoinStatement
                      ($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-3] || [], $$[$0-2] || [], $$[$0],  this._$);        
                      
break;
case 58:
this.$ = 
                      new yy.ast.OuterJoinStatement
                      ($$[$0-6], $$[$0-4], $$[$0-4], $$[$0-3] || [], $$[$0-2] || [], $$[$0], this._$);      
                      
break;
case 59:
this.$ = 
                      new yy.ast.OuterJoinStatement
                      ($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-3] || [], $$[$0-2] || [], $$[$0],  this._$);      
                      
break;
case 60:
this.$ = new yy.ast.JoinCondition($$[$0-2], $$[$0], this._$);
break;
case 62:
this.$ = new yy.ast.Identifier($$[$0], this._$);
break;
case 66:
this.$ = new yy.ast.ContextReference($$[$0], this._$); 
break;
case 67:
this.$ = new yy.ast.ContextReference($$[$0-1],  this._$);
break;
case 73:
this.$ = new yy.ast.ArrayLiteral([], this._$); 
break;
case 74:
this.$ = new yy.ast.ArrayLiteral($$[$0-1], this._$); 
break;
case 76:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 77:
this.$ = new yy.ast.ObjectLiteral([], this._$); 
break;
case 78:
this.$ = new yy.ast.ObjectLiteral($$[$0-1], this._$); 
break;
case 80:
this.$ = $$[$0-2].concat($$[$0]); 
break;
case 81:
this.$ = {key:$$[$0-2], value:$$[$0]}; 
break;
case 82:
this.$ = new yy.ast.StringLiteral($$[$0], this._$); 
break;
case 83:
this.$ = new yy.ast.NumberLiteral(yy.help.parseNumber($$[$0]), this._$); 
break;
case 84:
this.$ = new yy.ast.BooleanLiteral(yy.help.parseBoolean($$[$0]), this._$);
break;
case 95: case 97: case 103: case 107: case 111: case 115: case 119: case 123:
this.$ = [];
break;
case 96: case 98: case 104: case 108: case 112: case 116: case 120: case 124:
$$[$0-1].push($$[$0]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:[1,6],13:[1,7]},{1:[3]},{5:[1,8]},{5:[1,9]},{5:[1,10]},{5:[1,11]},{10:12,29:$V0,30:$V1,87:13,88:15,95:14},{10:18,29:$V0,30:$V1,87:13,88:15,95:14},{1:[2,1]},{1:[2,2]},{1:[2,3]},{1:[2,4]},{11:[1,19]},o($V2,[2,61]),o($V2,[2,129]),o($V2,[2,130]),o([5,11,14,17,20,27,32,36,37,38,40,52,57,61,67,70,72,75,80,98,101,105,108,109],[2,82]),o([5,11,14,17,20,32,52,57,61,67,70,72,75,80,105,109],[2,62]),{14:[1,20],17:[1,21],20:[1,22]},{12:23,100:$V3},{12:25,100:$V3},o($V4,[2,89],{18:26,31:27,32:$V5}),{21:29,25:30,26:$V6,28:$V7,29:$V8,30:$V9},{5:[2,5]},{29:$V0,30:$V1,88:39,95:40,101:[1,35],102:36,103:37,104:38},o($V4,[2,85],{15:41,31:42,32:$V5}),{5:[2,91],19:43,108:[1,44]},o($V4,[2,90]),{25:48,29:$V8,30:$V9,33:45,34:46,35:47,39:$Va},o($Vb,[2,93],{22:50,31:52,27:$Vc,32:$V5}),o($Vd,[2,9]),{25:53,29:$V8,30:$V9},o($Vd,[2,13]),o($Ve,[2,14]),o($Ve,[2,15]),o($Vf,[2,77]),{27:[1,55],101:[1,54]},o($Vg,[2,79]),{105:[1,56]},{105:[2,131]},{105:[2,132]},{5:[2,87],16:57,108:[1,58]},o($V4,[2,86]),{5:[2,7]},{5:[2,92]},o([5,57,61,67,70,75,80,108],[2,16],{27:[1,59]}),o($Vh,[2,17],{36:$Vi,37:$Vj,38:$Vk}),o($Vh,[2,19],{36:$Vl,37:$Vm,38:$Vn}),{42:66,44:[1,67],46:[1,68],47:[1,69],48:[1,70],49:[1,71],50:[1,72],51:[1,73],52:[1,74],53:[1,75]},{25:48,29:$V8,30:$V9,34:77,35:76,39:$Va},o($Vb,[2,95],{23:78}),{25:79,26:[1,80],29:$V8,30:$V9},o($Vb,[2,94]),o($Vd,[2,10]),o($Vf,[2,78]),{29:$V0,30:$V1,88:39,95:40,103:81,104:38},{12:89,29:$V0,43:82,45:88,59:91,89:83,90:84,91:85,92:$Vo,93:$Vp,95:90,96:92,97:$Vq,100:$V3,106:$Vr,107:$Vs},{5:[2,6]},{5:[2,88]},{25:48,29:$V8,30:$V9,34:96},{25:48,29:$V8,30:$V9,34:97,35:98,39:$Va},{25:48,29:$V8,30:$V9,34:99,35:100,39:$Va},{25:48,29:$V8,30:$V9,34:101,35:102,39:$Va},{25:48,29:$V8,30:$V9,34:103,35:104,39:$Va},{25:48,29:$V8,30:$V9,34:105,35:106,39:$Va},{25:48,29:$V8,30:$V9,34:107,35:108,39:$Va},{12:89,29:$V0,43:109,45:88,59:91,89:83,90:84,91:85,92:$Vo,93:$Vp,95:90,96:92,97:$Vq,100:$V3,106:$Vr,107:$Vs},{45:110,97:$Vq},{44:[1,111],47:[1,112]},o($Vt,[2,39]),o($Vu,[2,41]),o($Vu,[2,42]),o($Vu,[2,43]),o($Vu,[2,44]),o($Vu,[2,45]),o($Vu,[2,46]),{36:$Vl,37:$Vm,38:$Vn,40:[1,113]},{36:$Vi,37:$Vj,38:$Vk},o($Vv,[2,97],{24:114,54:115,55:116,56:117,60:118,57:$Vw,61:$Vx}),o($Vd,[2,11]),{25:121,29:$V8,30:$V9},o($Vg,[2,80]),o($Vg,[2,81]),o($Vy,[2,63]),o($Vy,[2,64]),o($Vy,[2,65]),{30:[1,122]},{25:123,29:$V8,30:$V9},o($Vy,[2,68]),o($Vy,[2,69]),o($Vy,[2,70]),o($Vy,[2,71]),o($Vy,[2,72]),{12:89,29:$V0,43:126,45:88,59:91,89:83,90:84,91:85,92:$Vo,93:$Vp,95:90,96:92,97:$Vq,98:[1,124],99:125,100:$V3,106:$Vr,107:$Vs},o($Vy,[2,83]),o($Vy,[2,84]),o($Vh,[2,18]),o($Vz,[2,20],{37:$Vj}),o($Vz,[2,23],{37:$Vm}),o($Vt,[2,21]),o($Vt,[2,24]),o($VA,[2,22],{36:$Vi,37:$Vj}),o($VA,[2,25],{36:$Vl,37:$Vm}),o($Vz,[2,26],{37:$Vj}),o($Vz,[2,29],{37:$Vm}),o($Vt,[2,27]),o($Vt,[2,30]),o($VA,[2,28],{36:$Vi,37:$Vj}),o($VA,[2,31],{36:$Vl,37:$Vm}),o($Vt,[2,36]),o($Vt,[2,37]),{45:127,97:$Vq},o($Vt,[2,40]),o($Vt,[2,32]),{5:[2,8],66:128,67:[1,129],75:[1,130],80:[1,131]},o($Vb,[2,96]),o($VB,[2,47]),o($VB,[2,99]),o($VB,[2,100]),{58:[1,132]},{58:[1,133]},o($Vd,[2,12]),{94:[1,134]},o($Vy,[2,66]),o($Vy,[2,73]),{27:[1,136],98:[1,135]},o($VC,[2,75]),o($Vt,[2,38]),o($Vv,[2,98]),{21:137,25:30,26:$V6,28:$V7,29:$V8,30:$V9},{67:[1,138]},{67:[1,139]},{59:140,106:$Vr},{62:141,63:142,64:$VD,65:$VE},o($Vy,[2,67]),o($Vy,[2,74]),{12:89,29:$V0,43:145,45:88,59:91,89:83,90:84,91:85,92:$Vo,93:$Vp,95:90,96:92,97:$Vq,100:$V3,106:$Vr,107:$Vs},{13:[1,146],27:$Vc},{21:147,25:30,26:$V6,28:$V7,29:$V8,30:$V9},{21:148,25:30,26:$V6,28:$V7,29:$V8,30:$V9},o($VB,[2,48]),o($VB,[2,49],{27:[1,149]}),o($VF,[2,50]),{25:150,29:$V8,30:$V9},{25:151,29:$V8,30:$V9},o($VC,[2,76]),{10:152,29:$V0,30:$V1,87:13,88:15,95:14},{13:[1,153],27:$Vc},{13:[1,154],27:$Vc},{63:155,64:$VD,65:$VE},o($VF,[2,52]),o($VF,[2,53]),o($VG,[2,101],{68:156,31:158,32:$V5,72:[1,157]}),{10:159,29:$V0,30:$V1,87:13,88:15,95:14},{10:160,29:$V0,30:$V1,87:13,88:15,95:14},o($VF,[2,51]),o($VG,[2,103],{69:161}),{10:162,29:$V0,30:$V1,87:13,88:15,95:14},o($VG,[2,102]),o($VG,[2,109],{76:163,31:165,32:$V5,72:[1,164]}),o($VG,[2,117],{81:166,72:[1,167],109:[1,168]}),{54:170,55:116,56:117,57:$Vw,60:118,61:$Vx,70:[1,169]},o($VG,[2,105],{73:171,31:172,32:$V5}),o($VG,[2,111],{77:173}),{10:174,29:$V0,30:$V1,87:13,88:15,95:14},o($VG,[2,110]),o($VG,[2,119],{82:175}),{10:176,29:$V0,30:$V1,87:13,88:15,95:14},o($VG,[2,118]),{29:$V0,30:$V1,71:177,85:178,88:180,95:179},o($VG,[2,104]),o($VG,[2,107],{74:181}),o($VG,[2,106]),{54:183,55:116,56:117,57:$Vw,60:118,61:$Vx,70:[1,182]},o($VG,[2,113],{78:184,31:185,32:$V5}),{54:187,55:116,56:117,57:$Vw,60:118,61:$Vx,70:[1,186]},o($VG,[2,121],{83:188,109:[1,189]}),o($Vv,[2,54]),{52:[1,190]},{52:[2,125]},{52:[2,126]},{54:192,55:116,56:117,57:$Vw,60:118,61:$Vx,70:[1,191]},{29:$V0,30:$V1,71:193,85:178,88:180,95:179},o($VG,[2,112]),o($VG,[2,115],{79:194}),o($VG,[2,114]),{29:$V0,30:$V1,71:195,85:178,88:180,95:179},o($VG,[2,120]),o($VG,[2,123],{84:196}),o($VG,[2,122]),{29:$V0,30:$V1,86:197,88:199,95:198},{29:$V0,30:$V1,71:200,85:178,88:180,95:179},o($VG,[2,108]),o($Vv,[2,56]),{54:202,55:116,56:117,57:$Vw,60:118,61:$Vx,70:[1,201]},o($Vv,[2,58]),{54:204,55:116,56:117,57:$Vw,60:118,61:$Vx,70:[1,203]},o($Vv,[2,60]),o($Vv,[2,127]),o($Vv,[2,128]),o($Vv,[2,55]),{29:$V0,30:$V1,71:205,85:178,88:180,95:179},o($VG,[2,116]),{29:$V0,30:$V1,71:206,85:178,88:180,95:179},o($VG,[2,124]),o($Vv,[2,57]),o($Vv,[2,59])],
defaultActions: {8:[2,1],9:[2,2],10:[2,3],11:[2,4],23:[2,5],39:[2,131],40:[2,132],43:[2,7],44:[2,92],57:[2,6],58:[2,88],179:[2,125],180:[2,126]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return;
break;
case 1:return 13;
break;
case 2:return 20;
break;
case 3:return 72;
break;
case 4:return 32;
break;
case 5:return 70;
break;
case 6:return 67;
break;
case 7:return 'FULL';
break;
case 8:return 80;
break;
case 9:return 75;
break;
case 10:return 'ONE';
break;
case 11:return 44;
break;
case 12:return 'NIN';
break;
case 13:return 107;
break;
case 14:return 37;
break;
case 15:return 36;
break;
case 16:return 46;
break;
case 17:return 38;
break;
case 18:return 47;
break;
case 19:return 57;
break;
case 20:return 61;
break;
case 21:return 58;
break;
case 22:return 9;
break;
case 23:return 11;
break;
case 24:return 17;
break;
case 25:return 'WITH';
break;
case 26:return 14;
break;
case 27:return 108;
break;
case 28:return 106;
break;
case 29:return 29;
break;
case 30:return 93;
break;
case 31:return 94;
break;
case 32:return 28;
break;
case 33:return 48;
break;
case 34:return 50;
break;
case 35:return 39;
break;
case 36:return 40;
break;
case 37:return 97;
break;
case 38:return 98;
break;
case 39:return ';';
break;
case 40:return 105;
break;
case 41:return '=';
break;
case 42:return 52;
break;
case 43:return 53;
break;
case 44:return 49;
break;
case 45:return 51;
break;
case 46:return 65;
break;
case 47:return 64;
break;
case 48:return 28;
break;
case 49:return '/';
break;
case 50:return 26;
break;
case 51:return 27;
break;
case 52:return '?';
break;
case 53:return 92;
break;
case 54:return 100;
break;
case 55:return 101;
break;
case 56:return 30;
break;
case 57:return 5;
break;
case 58:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:from|FROM)/,/^(?:find|FIND)/,/^(?:as|AS)/,/^(?:where|WHERE)/,/^(?:on|ON)/,/^(?:join|JOIN)/,/^(?:full|FULL)/,/^(?:outer|OUTER)/,/^(?:left|LEFT)/,/^(?:one|ONE)/,/^(?:in|IN)/,/^(?:nin|NIN)/,/^(?:true|false)/,/^(?:or|OR)/,/^(?:and|AND)/,/^(?:not|NOT)/,/^(?:nor|NOR)/,/^(?:exists|EXISTS)/,/^(?:limit|LIMIT)/,/^(?:sort|SORT)/,/^(?:by|BY)/,/^(?:into|INTO)/,/^(?:insert|INSERT)/,/^(?:remove|REMOVE)/,/^(?:with|WITH)/,/^(?:set|SET)/,/^(?:once|ONCE)/,/^(?:((([-]?([-]?([0]|(([1-9])([0-9]+)*)))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([-]?([0]|(([1-9])([0-9]+)*)))(([eE])([+-]?[0-9]+))?))|([0][xX]([0-9a-fA-F])+)|([0]([0-7])+)))/,/^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')|(`(([^\`\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*`)))/,/^(?:\{\{)/,/^(?:\}\})/,/^(?:\*)/,/^(?:>)/,/^(?:<)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:!)/,/^(?:,)/,/^(?:\?)/,/^(?:@)/,/^(?:\{)/,/^(?:\})/,/^(?:([a-zA-Z$0-9_][a-zA-Z$_0-9.-]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ParserImpl;
exports.Parser = ParserImpl.Parser;
exports.parse = function () { return ParserImpl.parse.apply(ParserImpl, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}