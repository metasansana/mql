"use strict";

/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ParserImpl = function () {
    var o = function o(k, v, _o, l) {
        for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {}return _o;
    },
        $V0 = [1, 17],
        $V1 = [1, 18],
        $V2 = [1, 19],
        $V3 = [11, 14, 18, 21, 36, 60, 64, 74, 76, 112],
        $V4 = [1, 30],
        $V5 = [1, 36],
        $V6 = [1, 37],
        $V7 = [1, 38],
        $V8 = [1, 39],
        $V9 = [5, 111],
        $Va = [1, 44],
        $Vb = [1, 52],
        $Vc = [1, 53],
        $Vd = [1, 54],
        $Ve = [5, 30, 40, 41, 42, 44, 60, 64, 70, 74, 79, 84, 101, 104, 111],
        $Vf = [1, 74],
        $Vg = [5, 60, 64, 70, 79, 84],
        $Vh = [5, 30, 36, 60, 64, 70, 79, 84],
        $Vi = [5, 30, 36, 40, 41, 42, 44, 47, 49, 50, 51, 52, 53, 54, 55, 56, 60, 64, 70, 74, 79, 84, 101, 104, 111],
        $Vj = [30, 101],
        $Vk = [5, 30, 36, 40, 41, 42, 44, 60, 64, 70, 74, 79, 84, 101, 104, 111],
        $Vl = [30, 104],
        $Vm = [5, 60, 64, 70, 74, 79, 84, 111],
        $Vn = [5, 30, 60, 64, 70, 74, 79, 84, 111],
        $Vo = [1, 87],
        $Vp = [1, 88],
        $Vq = [1, 89],
        $Vr = [1, 90],
        $Vs = [1, 91],
        $Vt = [1, 92],
        $Vu = [5, 30, 40, 41, 42, 44, 60, 64, 70, 74, 79, 84, 111],
        $Vv = [33, 95, 96, 100, 103, 109, 110],
        $Vw = [5, 70, 79, 84],
        $Vx = [1, 133],
        $Vy = [1, 134],
        $Vz = [5, 30, 40, 42, 44, 60, 64, 70, 74, 79, 84, 111],
        $VA = [5, 30, 42, 44, 60, 64, 70, 74, 79, 84, 111],
        $VB = [5, 60, 64, 70, 74, 79, 84],
        $VC = [1, 148],
        $VD = [1, 149],
        $VE = [5, 30, 60, 64, 70, 74, 79, 84],
        $VF = [60, 64, 74];
    var parser = { trace: function trace() {},
        yy: {},
        symbols_: { "error": 2, "statement": 3, "insert_statement": 4, "EOF": 5, "update_statement": 6, "remove_statement": 7, "find_statement": 8, "INTO": 9, "collection": 10, "INSERT": 11, "value_expression": 12, "FROM": 13, "SET": 14, "object_literal": 15, "update_statement_option0": 16, "update_statement_option1": 17, "REMOVE": 18, "remove_statement_option0": 19, "remove_statement_option1": 20, "FIND": 21, "field_selection": 22, "find_statement_option0": 23, "find_statement_repetition0": 24, "find_statement_repetition1": 25, "field_references": 26, "*": 27, "context_reference": 28, "field_reference": 29, ",": 30, "field_name": 31, "!": 32, "STRING_LITERAL": 33, "IDENTIFIER": 34, "where_expression": 35, "WHERE": 36, "filters": 37, "filter": 38, "logical_filter": 39, "AND": 40, "OR": 41, "NOR": 42, "(": 43, ")": 44, "logical_operator": 45, "filter_operator": 46, "IN": 47, "array_literal": 48, "NOT": 49, "EXISTS": 50, ">": 51, ">=": 52, "<": 53, "<=": 54, "==": 55, "!=": 56, "modifiers": 57, "modifiers_group0": 58, "limit_clause": 59, "LIMIT": 60, "BY": 61, "number_literal": 62, "sort_clause": 63, "SORT": 64, "field_sorts": 65, "field_sort": 66, "-": 67, "+": 68, "joins": 69, "JOIN": 70, "field_select_expression": 71, "joins_option0": 72, "joins_repetition0": 73, "ON": 74, "join_condition": 75, "AS": 76, "joins_option1": 77, "joins_repetition1": 78, "LEFT": 79, "joins_option2": 80, "joins_repetition2": 81, "joins_option3": 82, "joins_repetition3": 83, "OUTER": 84, "joins_option4": 85, "joins_repetition4": 86, "joins_option5": 87, "joins_repetition5": 88, "join_condition_group0": 89, "join_condition_group1": 90, "collection_group0": 91, "identifier": 92, "current_reference": 93, "literal": 94, "@": 95, "{{": 96, "}}": 97, "string_literal": 98, "boolean_literal": 99, "[": 100, "]": 101, "value_list": 102, "{": 103, "}": 104, "key_value_pairs": 105, "key_value_pair": 106, "key_value_pair_group0": 107, ":": 108, "NUMBER_LITERAL": 109, "BOOLEAN": 110, "ONCE": 111, "where_experession": 112, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 5: "EOF", 9: "INTO", 11: "INSERT", 13: "FROM", 14: "SET", 18: "REMOVE", 21: "FIND", 27: "*", 30: ",", 32: "!", 33: "STRING_LITERAL", 34: "IDENTIFIER", 36: "WHERE", 40: "AND", 41: "OR", 42: "NOR", 43: "(", 44: ")", 47: "IN", 49: "NOT", 50: "EXISTS", 51: ">", 52: ">=", 53: "<", 54: "<=", 55: "==", 56: "!=", 60: "LIMIT", 61: "BY", 64: "SORT", 67: "-", 68: "+", 70: "JOIN", 71: "field_select_expression", 74: "ON", 76: "AS", 79: "LEFT", 84: "OUTER", 95: "@", 96: "{{", 97: "}}", 100: "[", 101: "]", 103: "{", 104: "}", 108: ":", 109: "NUMBER_LITERAL", 110: "BOOLEAN", 111: "ONCE", 112: "where_experession" },
        productions_: [0, [3, 2], [3, 2], [3, 2], [3, 2], [4, 4], [6, 6], [7, 5], [8, 7], [22, 1], [22, 1], [22, 1], [22, 1], [26, 1], [26, 3], [29, 1], [29, 2], [31, 1], [31, 1], [35, 2], [35, 2], [37, 1], [37, 3], [37, 1], [39, 3], [39, 3], [39, 3], [39, 3], [39, 3], [39, 3], [39, 3], [39, 3], [39, 3], [39, 3], [39, 3], [39, 3], [39, 3], [45, 1], [45, 1], [45, 1], [38, 3], [38, 3], [38, 4], [38, 2], [38, 3], [46, 1], [46, 1], [46, 1], [46, 1], [46, 1], [46, 1], [57, 1], [59, 3], [63, 3], [65, 1], [65, 3], [66, 2], [66, 2], [69, 8], [69, 10], [69, 9], [69, 11], [69, 9], [69, 11], [75, 3], [10, 1], [92, 1], [12, 1], [12, 1], [12, 1], [93, 2], [28, 3], [94, 1], [94, 1], [94, 1], [94, 1], [94, 1], [48, 2], [48, 3], [102, 1], [102, 3], [15, 2], [15, 3], [105, 1], [105, 3], [106, 3], [98, 1], [62, 1], [99, 1], [16, 0], [16, 1], [17, 0], [17, 1], [19, 0], [19, 1], [20, 0], [20, 1], [23, 0], [23, 1], [24, 0], [24, 2], [25, 0], [25, 2], [58, 1], [58, 1], [72, 0], [72, 1], [73, 0], [73, 2], [77, 0], [77, 1], [78, 0], [78, 2], [80, 0], [80, 1], [81, 0], [81, 2], [82, 0], [82, 1], [83, 0], [83, 2], [85, 0], [85, 1], [86, 0], [86, 2], [87, 0], [87, 1], [88, 0], [88, 2], [89, 1], [89, 1], [90, 1], [90, 1], [91, 1], [91, 1], [91, 1], [107, 1], [107, 1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:case 2:case 3:case 4:
                    this.$ = $$[$0 - 1];return this.$;
                    break;
                case 5:
                    this.$ = new yy.ast.InsertStatement($$[$0 - 2], $$[$0], this._$);
                    break;
                case 6:
                    this.$ = new yy.ast.UpdateStatement($$[$0 - 4], $$[$0 - 2], $$[$0 - 1] || [], $$[$0] || false, this._$);
                    break;
                case 7:
                    this.$ = new yy.ast.RemoveStatement($$[$0 - 3], $$[$0 - 1] || [], $$[$0] || false, this._$);
                    break;
                case 8:
                    this.$ = new yy.ast.FindStatement($$[$0 - 5], $$[$0 - 3], $$[$0 - 2] || [], $$[$0 - 1] || [], $$[$0] || [], this._$);
                    break;
                case 9:
                    this.$ = $$[$0];
                    break;
                case 10:
                    this.$ = [new yy.ast.AllFieldsReference(this._$)];
                    break;
                case 11:case 12:
                    this.$ = [$$[$0]];
                    break;
                case 13:case 21:case 83:
                    this.$ = [$$[$0]];
                    break;
                case 14:case 84:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 15:
                    this.$ = new yy.ast.FieldReference($$[$0], true, this._$);
                    break;
                case 16:
                    this.$ = new yy.ast.FieldReference($$[$0], false, this._$);
                    break;
                case 17:
                    this.$ = $$[$0].substring(1, $$[$0].length - 1);
                    break;
                case 18:
                    this.$ = $$[$0];
                    break;
                case 19:
                    this.$ = $$[$0];
                    break;
                case 20:
                    this.$ = [$$[$0]];
                    break;
                case 22:
                    this.$ = $$[$0 - 2];
                    this.$.push($$[$0]);

                    break;
                case 23:case 79:
                    this.$ = [$$[$0]];
                    break;
                case 24:case 25:case 26:case 27:case 28:case 29:case 30:case 31:case 32:
                    this.$ = new yy.ast.LogicFilter($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 33:case 34:case 35:
                    this.$ = new yy.ast.LogicFilter($$[$0 - 2], $$[$0 - 1], $$[$0]);
                    break;
                case 36:
                    this.$ = $$[$0 - 1];
                    break;
                case 37:
                    this.$ = '$or';
                    break;
                case 38:
                    this.$ = '$and';
                    break;
                case 39:
                    this.$ = '$nor';
                    break;
                case 40:
                    this.$ = new yy.ast.Filter($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 41:
                    this.$ = new yy.ast.Filter($$[$0 - 2], '$in', $$[$0], this._$);
                    break;
                case 42:
                    this.$ = new yy.ast.Filter($$[$0 - 3], '$nin', $$[$0], this._$);
                    break;
                case 43:
                    this.$ = new yy.ast.Filter($$[$0 - 1], '$exists', new yy.ast.BooleanLiteral(true, this._$));
                    break;
                case 44:
                    this.$ = new yy.ast.Filter($$[$0 - 2], '$exists', new yy.ast.BooleanLiteral(false, this._$));
                    break;
                case 45:
                    this.$ = '$gt';
                    break;
                case 46:
                    this.$ = '$gte';
                    break;
                case 47:
                    this.$ = '$lt';
                    break;
                case 48:
                    this.$ = '$lte';
                    break;
                case 49:
                    this.$ = '$eq';
                    break;
                case 50:
                    this.$ = '$ne';
                    break;
                case 52:
                    this.$ = new yy.ast.LimitClause($$[$0 - 1], this._$);
                    break;
                case 53:
                    this.$ = new yy.ast.SortClause($$[$0], this._$);
                    break;
                case 54:
                    this.$ = [$$[$0]];
                    break;
                case 55:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 56:
                    this.$ = new yy.ast.FieldSort($$[$0], -1, this._$);
                    break;
                case 57:
                    this.$ = new yy.ast.FieldSort($$[$0], 1, this._$);
                    break;
                case 58:
                    this.$ = new yy.ast.InnerJoinStatement($$[$0 - 6], $$[$0 - 4], $$[$0 - 4], $$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0], this._$);

                    break;
                case 59:
                    this.$ = new yy.ast.InnerJoinStatement($$[$0 - 8], $$[$0 - 6], $$[$0 - 4], $$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0], this._$);

                    break;
                case 60:
                    this.$ = new yy.ast.LeftJoinStatement($$[$0 - 6], $$[$0 - 4], $$[$0 - 4], $$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0], this._$);

                    break;
                case 61:
                    this.$ = new yy.ast.LeftJoinStatement($$[$0 - 8], $$[$0 - 6], $$[$0 - 4], $$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0], this._$);

                    break;
                case 62:
                    this.$ = new yy.ast.OuterJoinStatement($$[$0 - 6], $$[$0 - 4], $$[$0 - 4], $$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0], this._$);

                    break;
                case 63:
                    this.$ = new yy.ast.OuterJoinStatement($$[$0 - 8], $$[$0 - 6], $$[$0 - 4], $$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0], this._$);

                    break;
                case 64:
                    this.$ = new yy.ast.JoinCondition($$[$0 - 2], $$[$0], this._$);
                    break;
                case 66:
                    this.$ = new yy.ast.Identifier($$[$0], this._$);
                    break;
                case 70:
                    this.$ = new yy.ast.ContextReference($$[$0], this._$);
                    break;
                case 71:
                    this.$ = new yy.ast.ContextReference($$[$0 - 1], this._$);
                    break;
                case 77:
                    this.$ = new yy.ast.ArrayLiteral([], this._$);
                    break;
                case 78:
                    this.$ = new yy.ast.ArrayLiteral($$[$0 - 1], this._$);
                    break;
                case 80:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 81:
                    this.$ = new yy.ast.ObjectLiteral([], this._$);
                    break;
                case 82:
                    this.$ = new yy.ast.ObjectLiteral($$[$0 - 1], this._$);
                    break;
                case 85:
                    this.$ = { key: $$[$0 - 2], value: $$[$0] };
                    break;
                case 86:
                    this.$ = new yy.ast.StringLiteral($$[$0], this._$);
                    break;
                case 87:
                    this.$ = new yy.ast.NumberLiteral(yy.help.parseNumber($$[$0]), this._$);
                    break;
                case 88:
                    this.$ = new yy.ast.BooleanLiteral(yy.help.parseBoolean($$[$0]), this._$);
                    break;
                case 99:case 101:case 107:case 111:case 115:case 119:case 123:case 127:
                    this.$ = [];
                    break;
                case 100:case 102:case 108:case 112:case 116:case 120:case 124:case 128:
                    $$[$0 - 1].push($$[$0]);
                    break;
            }
        },
        table: [{ 3: 1, 4: 2, 6: 3, 7: 4, 8: 5, 9: [1, 6], 13: [1, 7] }, { 1: [3] }, { 5: [1, 8] }, { 5: [1, 9] }, { 5: [1, 10] }, { 5: [1, 11] }, { 10: 12, 28: 16, 33: $V0, 34: $V1, 91: 13, 92: 15, 96: $V2, 98: 14 }, { 10: 20, 28: 16, 33: $V0, 34: $V1, 91: 13, 92: 15, 96: $V2, 98: 14 }, { 1: [2, 1] }, { 1: [2, 2] }, { 1: [2, 3] }, { 1: [2, 4] }, { 11: [1, 21] }, o($V3, [2, 65]), o($V3, [2, 133]), o($V3, [2, 134]), o($V3, [2, 135]), o([5, 11, 14, 18, 21, 30, 36, 40, 41, 42, 44, 55, 60, 64, 70, 74, 76, 79, 84, 101, 104, 108, 111, 112], [2, 86]), o([5, 11, 14, 18, 21, 36, 55, 60, 64, 70, 74, 76, 79, 84, 108, 112], [2, 66]), { 34: [1, 22] }, { 14: [1, 23], 18: [1, 24], 21: [1, 25] }, { 12: 26, 15: 32, 28: 27, 33: $V0, 48: 31, 62: 34, 93: 28, 94: 29, 95: $V4, 96: $V2, 98: 33, 99: 35, 100: $V5, 103: $V6, 109: $V7, 110: $V8 }, { 97: [1, 40] }, { 15: 41, 103: $V6 }, o($V9, [2, 93], { 19: 42, 35: 43, 36: $Va }), { 15: 49, 22: 45, 26: 46, 27: [1, 47], 28: 48, 29: 50, 31: 51, 32: $Vb, 33: $Vc, 34: $Vd, 96: $V2, 103: $V6 }, { 5: [2, 5] }, o($Ve, [2, 67]), o($Ve, [2, 68]), o($Ve, [2, 69]), { 31: 55, 33: $Vc, 34: $Vd }, o($Ve, [2, 72]), o($Ve, [2, 73]), o($Ve, [2, 74]), o($Ve, [2, 75]), o($Ve, [2, 76]), { 12: 58, 15: 32, 28: 27, 33: $V0, 48: 31, 62: 34, 93: 28, 94: 29, 95: $V4, 96: $V2, 98: 33, 99: 35, 100: $V5, 101: [1, 56], 102: 57, 103: $V6, 109: $V7, 110: $V8 }, { 33: $V0, 34: $V1, 92: 63, 98: 64, 104: [1, 59], 105: 60, 106: 61, 107: 62 }, o($Ve, [2, 87]), o($Ve, [2, 88]), o([5, 11, 14, 18, 21, 30, 36, 40, 41, 42, 44, 60, 64, 70, 74, 76, 79, 84, 101, 104, 111, 112], [2, 71]), o($V9, [2, 89], { 16: 65, 35: 66, 36: $Va }), { 5: [2, 95], 20: 67, 111: [1, 68] }, o($V9, [2, 94]), { 28: 70, 31: 73, 33: $Vc, 34: $Vd, 37: 69, 38: 71, 39: 72, 43: $Vf, 96: $V2 }, o($Vg, [2, 97], { 23: 75, 35: 77, 30: [1, 76], 36: $Va }), o($Vh, [2, 9]), o($Vh, [2, 10]), o($Vh, [2, 11]), o($Vh, [2, 12]), o($Vh, [2, 13]), o($Vh, [2, 15]), { 31: 78, 33: $Vc, 34: $Vd }, o($Vi, [2, 17]), o($Vi, [2, 18]), o($Ve, [2, 70]), o($Ve, [2, 77]), { 30: [1, 80], 101: [1, 79] }, o($Vj, [2, 79]), o($Vk, [2, 81]), { 30: [1, 82], 104: [1, 81] }, o($Vl, [2, 83]), { 108: [1, 83] }, { 108: [2, 136] }, { 108: [2, 137] }, { 5: [2, 91], 17: 84, 111: [1, 85] }, o($V9, [2, 90]), { 5: [2, 7] }, { 5: [2, 96] }, o($Vm, [2, 19], { 30: [1, 86] }), o($Vm, [2, 20]), o($Vn, [2, 21], { 40: $Vo, 41: $Vp, 42: $Vq }), o($Vn, [2, 23], { 40: $Vr, 41: $Vs, 42: $Vt }), { 46: 93, 47: [1, 94], 49: [1, 95], 50: [1, 96], 51: [1, 97], 52: [1, 98], 53: [1, 99], 54: [1, 100], 55: [1, 101], 56: [1, 102] }, { 31: 73, 33: $Vc, 34: $Vd, 38: 104, 39: 103, 43: $Vf }, o($Vg, [2, 99], { 24: 105 }), { 29: 106, 31: 51, 32: $Vb, 33: $Vc, 34: $Vd }, o($Vg, [2, 98]), o($Vh, [2, 16]), o($Ve, [2, 78]), { 12: 107, 15: 32, 28: 27, 33: $V0, 48: 31, 62: 34, 93: 28, 94: 29, 95: $V4, 96: $V2, 98: 33, 99: 35, 100: $V5, 103: $V6, 109: $V7, 110: $V8 }, o($Vk, [2, 82]), { 33: $V0, 34: $V1, 92: 63, 98: 64, 106: 108, 107: 62 }, { 12: 109, 15: 32, 28: 27, 33: $V0, 48: 31, 62: 34, 93: 28, 94: 29, 95: $V4, 96: $V2, 98: 33, 99: 35, 100: $V5, 103: $V6, 109: $V7, 110: $V8 }, { 5: [2, 6] }, { 5: [2, 92] }, { 31: 73, 33: $Vc, 34: $Vd, 38: 110 }, { 31: 73, 33: $Vc, 34: $Vd, 38: 111, 39: 112, 43: $Vf }, { 31: 73, 33: $Vc, 34: $Vd, 38: 113, 39: 114, 43: $Vf }, { 31: 73, 33: $Vc, 34: $Vd, 38: 115, 39: 116, 43: $Vf }, { 31: 73, 33: $Vc, 34: $Vd, 38: 117, 39: 118, 43: $Vf }, { 31: 73, 33: $Vc, 34: $Vd, 38: 119, 39: 120, 43: $Vf }, { 31: 73, 33: $Vc, 34: $Vd, 38: 121, 39: 122, 43: $Vf }, { 12: 123, 15: 32, 28: 27, 33: $V0, 48: 31, 62: 34, 93: 28, 94: 29, 95: $V4, 96: $V2, 98: 33, 99: 35, 100: $V5, 103: $V6, 109: $V7, 110: $V8 }, { 48: 124, 100: $V5 }, { 47: [1, 125], 50: [1, 126] }, o($Vu, [2, 43]), o($Vv, [2, 45]), o($Vv, [2, 46]), o($Vv, [2, 47]), o($Vv, [2, 48]), o($Vv, [2, 49]), o($Vv, [2, 50]), { 40: $Vr, 41: $Vs, 42: $Vt, 44: [1, 127] }, { 40: $Vo, 41: $Vp, 42: $Vq }, o($Vw, [2, 101], { 25: 128, 57: 129, 58: 130, 59: 131, 63: 132, 60: $Vx, 64: $Vy }), o($Vh, [2, 14]), o($Vj, [2, 80]), o($Vl, [2, 84]), o($Vl, [2, 85]), o($Vn, [2, 22]), o($Vz, [2, 24], { 41: $Vp }), o($Vz, [2, 27], { 41: $Vs }), o($Vu, [2, 25]), o($Vu, [2, 28]), o($VA, [2, 26], { 40: $Vo, 41: $Vp }), o($VA, [2, 29], { 40: $Vr, 41: $Vs }), o($Vz, [2, 30], { 41: $Vp }), o($Vz, [2, 33], { 41: $Vs }), o($Vu, [2, 31]), o($Vu, [2, 34]), o($VA, [2, 32], { 40: $Vo, 41: $Vp }), o($VA, [2, 35], { 40: $Vr, 41: $Vs }), o($Vu, [2, 40]), o($Vu, [2, 41]), { 48: 135, 100: $V5 }, o($Vu, [2, 44]), o($Vu, [2, 36]), { 5: [2, 8], 69: 136, 70: [1, 137], 79: [1, 138], 84: [1, 139] }, o($Vg, [2, 100]), o($VB, [2, 51]), o($VB, [2, 103]), o($VB, [2, 104]), { 61: [1, 140] }, { 61: [1, 141] }, o($Vu, [2, 42]), o($Vw, [2, 102]), { 71: [1, 142] }, { 70: [1, 143] }, { 70: [1, 144] }, { 62: 145, 109: $V7 }, { 65: 146, 66: 147, 67: $VC, 68: $VD }, { 13: [1, 150] }, { 71: [1, 151] }, { 71: [1, 152] }, o($VB, [2, 52]), o($VB, [2, 53], { 30: [1, 153] }), o($VE, [2, 54]), { 31: 154, 33: $Vc, 34: $Vd }, { 31: 155, 33: $Vc, 34: $Vd }, { 10: 156, 28: 16, 33: $V0, 34: $V1, 91: 13, 92: 15, 96: $V2, 98: 14 }, { 13: [1, 157] }, { 13: [1, 158] }, { 66: 159, 67: $VC, 68: $VD }, o($VE, [2, 56]), o($VE, [2, 57]), o($VF, [2, 105], { 72: 160, 35: 162, 36: $Va, 76: [1, 161] }), { 10: 163, 28: 16, 33: $V0, 34: $V1, 91: 13, 92: 15, 96: $V2, 98: 14 }, { 10: 164, 28: 16, 33: $V0, 34: $V1, 91: 13, 92: 15, 96: $V2, 98: 14 }, o($VE, [2, 55]), o($VF, [2, 107], { 73: 165 }), { 10: 166, 28: 16, 33: $V0, 34: $V1, 91: 13, 92: 15, 96: $V2, 98: 14 }, o($VF, [2, 106]), o($VF, [2, 113], { 80: 167, 35: 169, 36: $Va, 76: [1, 168] }), o($VF, [2, 121], { 85: 170, 76: [1, 171], 112: [1, 172] }), { 57: 174, 58: 130, 59: 131, 60: $Vx, 63: 132, 64: $Vy, 74: [1, 173] }, o($VF, [2, 109], { 77: 175, 35: 176, 36: $Va }), o($VF, [2, 115], { 81: 177 }), { 10: 178, 28: 16, 33: $V0, 34: $V1, 91: 13, 92: 15, 96: $V2, 98: 14 }, o($VF, [2, 114]), o($VF, [2, 123], { 86: 179 }), { 10: 180, 28: 16, 33: $V0, 34: $V1, 91: 13, 92: 15, 96: $V2, 98: 14 }, o($VF, [2, 122]), { 33: $V0, 34: $V1, 75: 181, 89: 182, 92: 184, 98: 183 }, o($VF, [2, 108]), o($VF, [2, 111], { 78: 185 }), o($VF, [2, 110]), { 57: 187, 58: 130, 59: 131, 60: $Vx, 63: 132, 64: $Vy, 74: [1, 186] }, o($VF, [2, 117], { 82: 188, 35: 189, 36: $Va }), { 57: 191, 58: 130, 59: 131, 60: $Vx, 63: 132, 64: $Vy, 74: [1, 190] }, o($VF, [2, 125], { 87: 192, 112: [1, 193] }), o($Vw, [2, 58]), { 55: [1, 194] }, { 55: [2, 129] }, { 55: [2, 130] }, { 57: 196, 58: 130, 59: 131, 60: $Vx, 63: 132, 64: $Vy, 74: [1, 195] }, { 33: $V0, 34: $V1, 75: 197, 89: 182, 92: 184, 98: 183 }, o($VF, [2, 116]), o($VF, [2, 119], { 83: 198 }), o($VF, [2, 118]), { 33: $V0, 34: $V1, 75: 199, 89: 182, 92: 184, 98: 183 }, o($VF, [2, 124]), o($VF, [2, 127], { 88: 200 }), o($VF, [2, 126]), { 33: $V0, 34: $V1, 90: 201, 92: 203, 98: 202 }, { 33: $V0, 34: $V1, 75: 204, 89: 182, 92: 184, 98: 183 }, o($VF, [2, 112]), o($Vw, [2, 60]), { 57: 206, 58: 130, 59: 131, 60: $Vx, 63: 132, 64: $Vy, 74: [1, 205] }, o($Vw, [2, 62]), { 57: 208, 58: 130, 59: 131, 60: $Vx, 63: 132, 64: $Vy, 74: [1, 207] }, o($Vw, [2, 64]), o($Vw, [2, 131]), o($Vw, [2, 132]), o($Vw, [2, 59]), { 33: $V0, 34: $V1, 75: 209, 89: 182, 92: 184, 98: 183 }, o($VF, [2, 120]), { 33: $V0, 34: $V1, 75: 210, 89: 182, 92: 184, 98: 183 }, o($VF, [2, 128]), o($Vw, [2, 61]), o($Vw, [2, 63])],
        defaultActions: { 8: [2, 1], 9: [2, 2], 10: [2, 3], 11: [2, 4], 26: [2, 5], 63: [2, 136], 64: [2, 137], 67: [2, 7], 68: [2, 96], 84: [2, 6], 85: [2, 92], 183: [2, 129], 184: [2, 130] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                var _parseError = function _parseError(msg, hash) {
                    this.message = msg;
                    this.hash = hash;
                };

                _parseError.prototype = Error;

                throw new _parseError(str, hash);
            }
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                tstack = [],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = '',
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack: var lex = function lex() {
                var token;
                token = lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            var symbol,
                preErrorSymbol,
                state,
                action,
                a,
                r,
                yyval = {},
                p,
                len,
                newState,
                expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        } };
    /* generated by jison-lex 0.3.4 */
    var lexer = function () {
        var lexer = {

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function setInput(input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

            // consumes and returns one char from the input
            input: function input() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function unput(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function more() {
                this._more = true;
                return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function reject() {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
                return this;
            },

            // retain first n characters of the match
            less: function less(n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function pastInput() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function upcomingInput() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function showPosition() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function test_match(match, indexed_rule) {
                var token, lines, backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

            // return next match in input
            next: function next() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token, match, tempMatch, index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: { "flex": true },
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        return;
                        break;
                    case 1:
                        return 13;
                        break;
                    case 2:
                        return 21;
                        break;
                    case 3:
                        return 76;
                        break;
                    case 4:
                        return 36;
                        break;
                    case 5:
                        return 74;
                        break;
                    case 6:
                        return 70;
                        break;
                    case 7:
                        return 'FULL';
                        break;
                    case 8:
                        return 84;
                        break;
                    case 9:
                        return 79;
                        break;
                    case 10:
                        return 'ONE';
                        break;
                    case 11:
                        return 47;
                        break;
                    case 12:
                        return 'NIN';
                        break;
                    case 13:
                        return 110;
                        break;
                    case 14:
                        return 41;
                        break;
                    case 15:
                        return 40;
                        break;
                    case 16:
                        return 49;
                        break;
                    case 17:
                        return 42;
                        break;
                    case 18:
                        return 50;
                        break;
                    case 19:
                        return 60;
                        break;
                    case 20:
                        return 64;
                        break;
                    case 21:
                        return 61;
                        break;
                    case 22:
                        return 9;
                        break;
                    case 23:
                        return 11;
                        break;
                    case 24:
                        return 18;
                        break;
                    case 25:
                        return 'WITH';
                        break;
                    case 26:
                        return 14;
                        break;
                    case 27:
                        return 111;
                        break;
                    case 28:
                        return 109;
                        break;
                    case 29:
                        return 33;
                        break;
                    case 30:
                        return 96;
                        break;
                    case 31:
                        return 97;
                        break;
                    case 32:
                        return 27;
                        break;
                    case 33:
                        return 51;
                        break;
                    case 34:
                        return 53;
                        break;
                    case 35:
                        return 43;
                        break;
                    case 36:
                        return 44;
                        break;
                    case 37:
                        return 100;
                        break;
                    case 38:
                        return 101;
                        break;
                    case 39:
                        return ';';
                        break;
                    case 40:
                        return 108;
                        break;
                    case 41:
                        return '=';
                        break;
                    case 42:
                        return 55;
                        break;
                    case 43:
                        return 56;
                        break;
                    case 44:
                        return 52;
                        break;
                    case 45:
                        return 54;
                        break;
                    case 46:
                        return 68;
                        break;
                    case 47:
                        return 67;
                        break;
                    case 48:
                        return 27;
                        break;
                    case 49:
                        return '/';
                        break;
                    case 50:
                        return 32;
                        break;
                    case 51:
                        return 30;
                        break;
                    case 52:
                        return '?';
                        break;
                    case 53:
                        return 95;
                        break;
                    case 54:
                        return 103;
                        break;
                    case 55:
                        return 104;
                        break;
                    case 56:
                        return 34;
                        break;
                    case 57:
                        return 5;
                        break;
                    case 58:
                        console.log(yy_.yytext);
                        break;
                }
            },
            rules: [/^(?:\s+)/, /^(?:from|FROM)/, /^(?:find|FIND)/, /^(?:as|AS)/, /^(?:where|WHERE)/, /^(?:on|ON)/, /^(?:join|JOIN)/, /^(?:full|FULL)/, /^(?:outer|OUTER)/, /^(?:left|LEFT)/, /^(?:one|ONE)/, /^(?:in|IN)/, /^(?:nin|NIN)/, /^(?:true|false)/, /^(?:or|OR)/, /^(?:and|AND)/, /^(?:not|NOT)/, /^(?:nor|NOR)/, /^(?:exists|EXISTS)/, /^(?:limit|LIMIT)/, /^(?:sort|SORT)/, /^(?:by|BY)/, /^(?:into|INTO)/, /^(?:insert|INSERT)/, /^(?:remove|REMOVE)/, /^(?:with|WITH)/, /^(?:set|SET)/, /^(?:once|ONCE)/, /^(?:((([-]?([-]?([0]|(([1-9])([0-9]+)*)))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([-]?([0]|(([1-9])([0-9]+)*)))(([eE])([+-]?[0-9]+))?))|([0][xX]([0-9a-fA-F])+)|([0]([0-7])+)))/, /^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')|(`(([^\`\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*`)))/, /^(?:\{\{)/, /^(?:\}\})/, /^(?:\*)/, /^(?:>)/, /^(?:<)/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:;)/, /^(?::)/, /^(?:=)/, /^(?:==)/, /^(?:!=)/, /^(?:>=)/, /^(?:<=)/, /^(?:\+)/, /^(?:-)/, /^(?:\*)/, /^(?:\/)/, /^(?:!)/, /^(?:,)/, /^(?:\?)/, /^(?:@)/, /^(?:\{)/, /^(?:\})/, /^(?:([a-zA-Z$0-9_][a-zA-Z$_0-9.-]*))/, /^(?:$)/, /^(?:.)/],
            conditions: { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "inclusive": true } }
        };
        return lexer;
    }();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;parser.Parser = Parser;
    return new Parser();
}();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = ParserImpl;
    exports.Parser = ParserImpl.Parser;
    exports.parse = function () {
        return ParserImpl.parse.apply(ParserImpl, arguments);
    };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJzZS9QYXJzZXJJbXBsLmpzIl0sIm5hbWVzIjpbIlBhcnNlckltcGwiLCJvIiwiayIsInYiLCJsIiwibGVuZ3RoIiwiJFYwIiwiJFYxIiwiJFYyIiwiJFYzIiwiJFY0IiwiJFY1IiwiJFY2IiwiJFY3IiwiJFY4IiwiJFY5IiwiJFZhIiwiJFZiIiwiJFZjIiwiJFZkIiwiJFZlIiwiJFZmIiwiJFZnIiwiJFZoIiwiJFZpIiwiJFZqIiwiJFZrIiwiJFZsIiwiJFZtIiwiJFZuIiwiJFZvIiwiJFZwIiwiJFZxIiwiJFZyIiwiJFZzIiwiJFZ0IiwiJFZ1IiwiJFZ2IiwiJFZ3IiwiJFZ4IiwiJFZ5IiwiJFZ6IiwiJFZBIiwiJFZCIiwiJFZDIiwiJFZEIiwiJFZFIiwiJFZGIiwicGFyc2VyIiwidHJhY2UiLCJ5eSIsInN5bWJvbHNfIiwidGVybWluYWxzXyIsInByb2R1Y3Rpb25zXyIsInBlcmZvcm1BY3Rpb24iLCJhbm9ueW1vdXMiLCJ5eXRleHQiLCJ5eWxlbmciLCJ5eWxpbmVubyIsInl5c3RhdGUiLCIkJCIsIl8kIiwiJDAiLCIkIiwiYXN0IiwiSW5zZXJ0U3RhdGVtZW50IiwiVXBkYXRlU3RhdGVtZW50IiwiUmVtb3ZlU3RhdGVtZW50IiwiRmluZFN0YXRlbWVudCIsIkFsbEZpZWxkc1JlZmVyZW5jZSIsImNvbmNhdCIsIkZpZWxkUmVmZXJlbmNlIiwic3Vic3RyaW5nIiwicHVzaCIsIkxvZ2ljRmlsdGVyIiwiRmlsdGVyIiwiQm9vbGVhbkxpdGVyYWwiLCJMaW1pdENsYXVzZSIsIlNvcnRDbGF1c2UiLCJGaWVsZFNvcnQiLCJJbm5lckpvaW5TdGF0ZW1lbnQiLCJMZWZ0Sm9pblN0YXRlbWVudCIsIk91dGVySm9pblN0YXRlbWVudCIsIkpvaW5Db25kaXRpb24iLCJJZGVudGlmaWVyIiwiQ29udGV4dFJlZmVyZW5jZSIsIkFycmF5TGl0ZXJhbCIsIk9iamVjdExpdGVyYWwiLCJrZXkiLCJ2YWx1ZSIsIlN0cmluZ0xpdGVyYWwiLCJOdW1iZXJMaXRlcmFsIiwiaGVscCIsInBhcnNlTnVtYmVyIiwicGFyc2VCb29sZWFuIiwidGFibGUiLCJkZWZhdWx0QWN0aW9ucyIsInBhcnNlRXJyb3IiLCJzdHIiLCJoYXNoIiwicmVjb3ZlcmFibGUiLCJfcGFyc2VFcnJvciIsIm1zZyIsIm1lc3NhZ2UiLCJwcm90b3R5cGUiLCJFcnJvciIsInBhcnNlIiwiaW5wdXQiLCJzZWxmIiwic3RhY2siLCJ0c3RhY2siLCJ2c3RhY2siLCJsc3RhY2siLCJyZWNvdmVyaW5nIiwiVEVSUk9SIiwiRU9GIiwiYXJncyIsInNsaWNlIiwiY2FsbCIsImFyZ3VtZW50cyIsImxleGVyIiwiT2JqZWN0IiwiY3JlYXRlIiwic2hhcmVkU3RhdGUiLCJoYXNPd25Qcm9wZXJ0eSIsInNldElucHV0IiwieXlsbG9jIiwieXlsb2MiLCJyYW5nZXMiLCJvcHRpb25zIiwiZ2V0UHJvdG90eXBlT2YiLCJwb3BTdGFjayIsIm4iLCJfdG9rZW5fc3RhY2siLCJsZXgiLCJ0b2tlbiIsInN5bWJvbCIsInByZUVycm9yU3ltYm9sIiwic3RhdGUiLCJhY3Rpb24iLCJhIiwiciIsInl5dmFsIiwicCIsImxlbiIsIm5ld1N0YXRlIiwiZXhwZWN0ZWQiLCJlcnJTdHIiLCJzaG93UG9zaXRpb24iLCJqb2luIiwidGV4dCIsIm1hdGNoIiwibGluZSIsImxvYyIsIkFycmF5IiwiZmlyc3RfbGluZSIsImxhc3RfbGluZSIsImZpcnN0X2NvbHVtbiIsImxhc3RfY29sdW1uIiwicmFuZ2UiLCJhcHBseSIsIl9pbnB1dCIsIl9tb3JlIiwiX2JhY2t0cmFjayIsImRvbmUiLCJtYXRjaGVkIiwiY29uZGl0aW9uU3RhY2siLCJvZmZzZXQiLCJjaCIsImxpbmVzIiwidW5wdXQiLCJzcGxpdCIsInN1YnN0ciIsIm9sZExpbmVzIiwibW9yZSIsInJlamVjdCIsImJhY2t0cmFja19sZXhlciIsImxlc3MiLCJwYXN0SW5wdXQiLCJwYXN0IiwicmVwbGFjZSIsInVwY29taW5nSW5wdXQiLCJuZXh0IiwicHJlIiwiYyIsInRlc3RfbWF0Y2giLCJpbmRleGVkX3J1bGUiLCJiYWNrdXAiLCJtYXRjaGVzIiwidGVtcE1hdGNoIiwiaW5kZXgiLCJydWxlcyIsIl9jdXJyZW50UnVsZXMiLCJpIiwiZmxleCIsImJlZ2luIiwiY29uZGl0aW9uIiwicG9wU3RhdGUiLCJwb3AiLCJjb25kaXRpb25zIiwidG9wU3RhdGUiLCJNYXRoIiwiYWJzIiwicHVzaFN0YXRlIiwic3RhdGVTdGFja1NpemUiLCJ5eV8iLCIkYXZvaWRpbmdfbmFtZV9jb2xsaXNpb25zIiwiWVlfU1RBUlQiLCJZWVNUQVRFIiwiY29uc29sZSIsImxvZyIsIlBhcnNlciIsInJlcXVpcmUiLCJleHBvcnRzIiwibWFpbiIsImNvbW1vbmpzTWFpbiIsInByb2Nlc3MiLCJleGl0Iiwic291cmNlIiwicmVhZEZpbGVTeW5jIiwibm9ybWFsaXplIiwibW9kdWxlIiwiYXJndiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3RUEsSUFBSUEsYUFBYyxZQUFVO0FBQzVCLFFBQUlDLElBQUUsV0FBU0MsQ0FBVCxFQUFXQyxDQUFYLEVBQWFGLEVBQWIsRUFBZUcsQ0FBZixFQUFpQjtBQUFDLGFBQUlILEtBQUVBLE1BQUcsRUFBTCxFQUFRRyxJQUFFRixFQUFFRyxNQUFoQixFQUF1QkQsR0FBdkIsRUFBMkJILEdBQUVDLEVBQUVFLENBQUYsQ0FBRixJQUFRRCxDQUFuQyxJQUFzQyxPQUFPRixFQUFQO0FBQVMsS0FBdkU7QUFBQSxRQUF3RUssTUFBSSxDQUFDLENBQUQsRUFBRyxFQUFILENBQTVFO0FBQUEsUUFBbUZDLE1BQUksQ0FBQyxDQUFELEVBQUcsRUFBSCxDQUF2RjtBQUFBLFFBQThGQyxNQUFJLENBQUMsQ0FBRCxFQUFHLEVBQUgsQ0FBbEc7QUFBQSxRQUF5R0MsTUFBSSxDQUFDLEVBQUQsRUFBSSxFQUFKLEVBQU8sRUFBUCxFQUFVLEVBQVYs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QUNBLHlCQUFLLEVBQUw7QUFBUSwrQkFBTyxFQUFQO0FBQ1I7QUFDQSx5QkFBSyxFQUFMO0FBQVEsK0JBQU8sRUFBUDtBQUNSO0FBQ0EseUJBQUssRUFBTDtBQUFRLCtCQUFPLEVBQVA7QUFDUjtBQUNBLHlCQUFLLEVBQUw7QUFBUSwrQkFBTyxDQUFQO0FBQ1I7QUFDQSx5QkFBSyxFQUFMO0FBQVEsK0JBQU8sRUFBUDtBQUNSO0FBQ0EseUJBQUssRUFBTDtBQUFRLCtCQUFPLEVBQVA7QUFDUjtBQUNBLHlCQUFLLEVBQUw7QUFBUSwrQkFBTyxNQUFQO0FBQ1I7QUFDQSx5QkFBSyxFQUFMO0FBQVEsK0JBQU8sRUFBUDtBQUNSO0FBQ0EseUJBQUssRUFBTDtBQUFRLCtCQUFPLEdBQVA7QUFDUjtBQUNBLHlCQUFLLEVBQUw7QUFBUSwrQkFBTyxHQUFQO0FBQ1I7QUFDQSx5QkFBSyxFQUFMO0FBQVEsK0JBQU8sRUFBUDtBQUNSO0FBQ0EseUJBQUssRUFBTDtBQUFRLCtCQUFPLEVBQVA7QUFDUjtBQUNBLHlCQUFLLEVBQUw7QUFBUSwrQkFBTyxFQUFQO0FBQ1I7QUFDQSx5QkFBSyxFQUFMO0FBQVEsK0JBQU8sRUFBUDtBQUNSO0FBQ0EseUJBQUssRUFBTDtBQUFRLCtCQUFPLEVBQVA7QUFDUjtBQUNBLHlCQUFLLEVBQUw7QUFBUSwrQkFBTyxFQUFQO0FBQ1I7QUFDQSx5QkFBSyxFQUFMO0FBQVEsK0JBQU8sRUFBUDtBQUNSO0FBQ0EseUJBQUssRUFBTDtBQUFRLCtCQUFPLEVBQVA7QUFDUjtBQUNBLHlCQUFLLEVBQUw7QUFBUSwrQkFBTyxHQUFQO0FBQ1I7QUFDQSx5QkFBSyxFQUFMO0FBQVEsK0JBQU8sR0FBUDtBQUNSO0FBQ0EseUJBQUssRUFBTDtBQUFRLCtCQUFPLEdBQVA7QUFDUjtBQUNBLHlCQUFLLEVBQUw7QUFBUSwrQkFBTyxHQUFQO0FBQ1I7QUFDQSx5QkFBSyxFQUFMO0FBQVEsK0JBQU8sR0FBUDtBQUNSO0FBQ0EseUJBQUssRUFBTDtBQUFRLCtCQUFPLEVBQVA7QUFDUjtBQUNBLHlCQUFLLEVB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WUFBVCxDQUFzQm5HLElBQXRCLEVBQTRCO0FBQ3ZDLFlBQUksQ0FBQ0EsS0FBSyxDQUFMLENBQUwsRUFBYztBQUNWNkYsb0JBQVFDLEdBQVIsQ0FBWSxZQUFVOUYsS0FBSyxDQUFMLENBQVYsR0FBa0IsT0FBOUI7QUFDQW9HLG9CQUFRQyxJQUFSLENBQWEsQ0FBYjtBQUNIO0FBQ0QsWUFBSUMsU0FBU04sUUFBUSxJQUFSLEVBQWNPLFlBQWQsQ0FBMkJQLFFBQVEsTUFBUixFQUFnQlEsU0FBaEIsQ0FBMEJ4RyxLQUFLLENBQUwsQ0FBMUIsQ0FBM0IsRUFBK0QsTUFBL0QsQ0FBYjtBQUNBLGVBQU9pRyxRQUFRckssTUFBUixDQUFlMEQsS0FBZixDQUFxQmdILE1BQXJCLENBQVA7QUFDSCxLQVBEO0FBUUEsUUFBSSxPQUFPRyxNQUFQLEtBQWtCLFdBQWxCLElBQWlDVCxRQUFRRSxJQUFSLEtBQWlCTyxNQUF0RCxFQUE4RDtBQUM1RFIsZ0JBQVFDLElBQVIsQ0FBYUUsUUFBUU0sSUFBUixDQUFhekcsS0FBYixDQUFtQixDQUFuQixDQUFiO0FBQ0Q7QUFDQSIsImZpbGUiOiJQYXJzZXJJbXBsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogcGFyc2VyIGdlbmVyYXRlZCBieSBqaXNvbiAwLjQuMTcgKi9cbi8qXG4gIFJldHVybnMgYSBQYXJzZXIgb2JqZWN0IG9mIHRoZSBmb2xsb3dpbmcgc3RydWN0dXJlOlxuXG4gIFBhcnNlcjoge1xuICAgIHl5OiB7fVxuICB9XG5cbiAgUGFyc2VyLnByb3RvdHlwZToge1xuICAgIHl5OiB7fSxcbiAgICB0cmFjZTogZnVuY3Rpb24oKSxcbiAgICBzeW1ib2xzXzoge2Fzc29jaWF0aXZlIGxpc3Q6IG5hbWUgPT0+IG51bWJlcn0sXG4gICAgdGVybWluYWxzXzoge2Fzc29jaWF0aXZlIGxpc3Q6IG51bWJlciA9PT4gbmFtZX0sXG4gICAgcHJvZHVjdGlvbnNfOiBbLi4uXSxcbiAgICBwZXJmb3JtQWN0aW9uOiBmdW5jdGlvbiBhbm9ueW1vdXMoeXl0ZXh0LCB5eWxlbmcsIHl5bGluZW5vLCB5eSwgeXlzdGF0ZSwgJCQsIF8kKSxcbiAgICB0YWJsZTogWy4uLl0sXG4gICAgZGVmYXVsdEFjdGlvbnM6IHsuLi59LFxuICAgIHBhcnNlRXJyb3I6IGZ1bmN0aW9uKHN0ciwgaGFzaCksXG4gICAgcGFyc2U6IGZ1bmN0aW9uKGlucHV0KSxcblxuICAgIGxleGVyOiB7XG4gICAgICAgIEVPRjogMSxcbiAgICAgICAgcGFyc2VFcnJvcjogZnVuY3Rpb24oc3RyLCBoYXNoKSxcbiAgICAgICAgc2V0SW5wdXQ6IGZ1bmN0aW9uKGlucHV0KSxcbiAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCksXG4gICAgICAgIHVucHV0OiBmdW5jdGlvbihzdHIpLFxuICAgICAgICBtb3JlOiBmdW5jdGlvbigpLFxuICAgICAgICBsZXNzOiBmdW5jdGlvbihuKSxcbiAgICAgICAgcGFzdElucHV0OiBmdW5jdGlvbigpLFxuICAgICAgICB1cGNvbWluZ0lucHV0OiBmdW5jdGlvbigpLFxuICAgICAgICBzaG93UG9zaXRpb246IGZ1bmN0aW9uKCksXG4gICAgICAgIHRlc3RfbWF0Y2g6IGZ1bmN0aW9uKHJlZ2V4X21hdGNoX2FycmF5LCBydWxlX2luZGV4KSxcbiAgICAgICAgbmV4dDogZnVuY3Rpb24oKSxcbiAgICAgICAgbGV4OiBmdW5jdGlvbigpLFxuICAgICAgICBiZWdpbjogZnVuY3Rpb24oY29uZGl0aW9uKSxcbiAgICAgICAgcG9wU3RhdGU6IGZ1bmN0aW9uKCksXG4gICAgICAgIF9jdXJyZW50UnVsZXM6IGZ1bmN0aW9uKCksXG4gICAgICAgIHRvcFN0YXRlOiBmdW5jdGlvbigpLFxuICAgICAgICBwdXNoU3RhdGU6IGZ1bmN0aW9uKGNvbmRpdGlvbiksXG5cbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgcmFuZ2VzOiBib29sZWFuICAgICAgICAgICAob3B0aW9uYWw6IHRydWUgPT0+IHRva2VuIGxvY2F0aW9uIGluZm8gd2lsbCBpbmNsdWRlIGEgLnJhbmdlW10gbWVtYmVyKVxuICAgICAgICAgICAgZmxleDogYm9vbGVhbiAgICAgICAgICAgICAob3B0aW9uYWw6IHRydWUgPT0+IGZsZXgtbGlrZSBsZXhpbmcgYmVoYXZpb3VyIHdoZXJlIHRoZSBydWxlcyBhcmUgdGVzdGVkIGV4aGF1c3RpdmVseSB0byBmaW5kIHRoZSBsb25nZXN0IG1hdGNoKVxuICAgICAgICAgICAgYmFja3RyYWNrX2xleGVyOiBib29sZWFuICAob3B0aW9uYWw6IHRydWUgPT0+IGxleGVyIHJlZ2V4ZXMgYXJlIHRlc3RlZCBpbiBvcmRlciBhbmQgZm9yIGVhY2ggbWF0Y2hpbmcgcmVnZXggdGhlIGFjdGlvbiBjb2RlIGlzIGludm9rZWQ7IHRoZSBsZXhlciB0ZXJtaW5hdGVzIHRoZSBzY2FuIHdoZW4gYSB0b2tlbiBpcyByZXR1cm5lZCBieSB0aGUgYWN0aW9uIGNvZGUpXG4gICAgICAgIH0sXG5cbiAgICAgICAgcGVyZm9ybUFjdGlvbjogZnVuY3Rpb24oeXksIHl5XywgJGF2b2lkaW5nX25hbWVfY29sbGlzaW9ucywgWVlfU1RBUlQpLFxuICAgICAgICBydWxlczogWy4uLl0sXG4gICAgICAgIGNvbmRpdGlvbnM6IHthc3NvY2lhdGl2ZSBsaXN0OiBuYW1lID09PiBzZXR9LFxuICAgIH1cbiAgfVxuXG5cbiAgdG9rZW4gbG9jYXRpb24gaW5mbyAoQCQsIF8kLCBldGMuKToge1xuICAgIGZpcnN0X2xpbmU6IG4sXG4gICAgbGFzdF9saW5lOiBuLFxuICAgIGZpcnN0X2NvbHVtbjogbixcbiAgICBsYXN0X2NvbHVtbjogbixcbiAgICByYW5nZTogW3N0YXJ0X251bWJlciwgZW5kX251bWJlcl0gICAgICAgKHdoZXJlIHRoZSBudW1iZXJzIGFyZSBpbmRleGVzIGludG8gdGhlIGlucHV0IHN0cmluZywgcmVndWxhciB6ZXJvLWJhc2VkKVxuICB9XG5cblxuICB0aGUgcGFyc2VFcnJvciBmdW5jdGlvbiByZWNlaXZlcyBhICdoYXNoJyBvYmplY3Qgd2l0aCB0aGVzZSBtZW1iZXJzIGZvciBsZXhlciBhbmQgcGFyc2VyIGVycm9yczoge1xuICAgIHRleHQ6ICAgICAgICAobWF0Y2hlZCB0ZXh0KVxuICAgIHRva2VuOiAgICAgICAodGhlIHByb2R1Y2VkIHRlcm1pbmFsIHRva2VuLCBpZiBhbnkpXG4gICAgbGluZTogICAgICAgICh5eWxpbmVubylcbiAgfVxuICB3aGlsZSBwYXJzZXIgKGdyYW1tYXIpIGVycm9ycyB3aWxsIGFsc28gcHJvdmlkZSB0aGVzZSBtZW1iZXJzLCBpLmUuIHBhcnNlciBlcnJvcnMgZGVsaXZlciBhIHN1cGVyc2V0IG9mIGF0dHJpYnV0ZXM6IHtcbiAgICBsb2M6ICAgICAgICAgKHl5bGxvYylcbiAgICBleHBlY3RlZDogICAgKHN0cmluZyBkZXNjcmliaW5nIHRoZSBzZXQgb2YgZXhwZWN0ZWQgdG9rZW5zKVxuICAgIHJlY292ZXJhYmxlOiAoYm9vbGVhbjogVFJVRSB3aGVuIHRoZSBwYXJzZXIgaGFzIGEgZXJyb3IgcmVjb3ZlcnkgcnVsZSBhdmFpbGFibGUgZm9yIHRoaXMgcGFydGljdWxhciBlcnJvcilcbiAgfVxuKi9cbnZhciBQYXJzZXJJbXBsID0gKGZ1bmN0aW9uKCl7XG52YXIgbz1mdW5jdGlvbihrLHYsbyxsKXtmb3Iobz1vfHx7fSxsPWsubGVuZ3RoO2wtLTtvW2tbbF1dPXYpO3JldHVybiBvfSwkVjA9WzEsMTddLCRWMT1bMSwxOF0sJFYyPVsxLDE5XSwkVjM9WzExLDE0LDE4LDIxLDM2LDYwLDY0LDc0LDc2LDExMl0sJFY0PVsxLDMwXSwkVjU9WzEsMzZdLCRWNj1bMSwzN10sJFY3PVsxLDM4XSwkVjg9WzEsMzldLCRWOT1bNSwxMTFdLCRWYT1bMSw0NF0sJFZiPVsxLDUyXSwkVmM9WzEsNTNdLCRWZD1bMSw1NF0sJFZlPVs1LDMwLDQwLDQxLDQyLDQ0LDYwLDY0LDcwLDc0LDc5LDg0LDEwMSwxMDQsMTExXSwkVmY9WzEsNzRdLCRWZz1bNSw2MCw2NCw3MCw3OSw4NF0sJFZoPVs1LDMwLDM2LDYwLDY0LDcwLDc5LDg0XSwkVmk9WzUsMzAsMzYsNDAsNDEsNDIsNDQsNDcsNDksNTAsNTEsNTIsNTMsNTQsNTUsNTYsNjAsNjQsNzAsNzQsNzksODQsMTAxLDEwNCwxMTFdLCRWaj1bMzAsMTAxXSwkVms9WzUsMzAsMzYsNDAsNDEsNDIsNDQsNjAsNjQsNzAsNzQsNzksODQsMTAxLDEwNCwxMTFdLCRWbD1bMzAsMTA0XSwkVm09WzUsNjAsNjQsNzAsNzQsNzksODQsMTExXSwkVm49WzUsMzAsNjAsNjQsNzAsNzQsNzksODQsMTExXSwkVm89WzEsODddLCRWcD1bMSw4OF0sJFZxPVsxLDg5XSwkVnI9WzEsOTBdLCRWcz1bMSw5MV0sJFZ0PVsxLDkyXSwkVnU9WzUsMzAsNDAsNDEsNDIsNDQsNjAsNjQsNzAsNzQsNzksODQsMTExXSwkVnY9WzMzLDk1LDk2LDEwMCwxMDMsMTA5LDExMF0sJFZ3PVs1LDcwLDc5LDg0XSwkVng9WzEsMTMzXSwkVnk9WzEsMTM0XSwkVno9WzUsMzAsNDAsNDIsNDQsNjAsNjQsNzAsNzQsNzksODQsMTExXSwkVkE9WzUsMzAsNDIsNDQsNjAsNjQsNzAsNzQsNzksODQsMTExXSwkVkI9WzUsNjAsNjQsNzAsNzQsNzksODRdLCRWQz1bMSwxNDhdLCRWRD1bMSwxNDldLCRWRT1bNSwzMCw2MCw2NCw3MCw3NCw3OSw4NF0sJFZGPVs2MCw2NCw3NF07XG52YXIgcGFyc2VyID0ge3RyYWNlOiBmdW5jdGlvbiB0cmFjZSgpIHsgfSxcbnl5OiB7fSxcbnN5bWJvbHNfOiB7XCJlcnJvclwiOjIsXCJzdGF0ZW1lbnRcIjozLFwiaW5zZXJ0X3N0YXRlbWVudFwiOjQsXCJFT0ZcIjo1LFwidXBkYXRlX3N0YXRlbWVudFwiOjYsXCJyZW1vdmVfc3RhdGVtZW50XCI6NyxcImZpbmRfc3RhdGVtZW50XCI6OCxcIklOVE9cIjo5LFwiY29sbGVjdGlvblwiOjEwLFwiSU5TRVJUXCI6MTEsXCJ2YWx1ZV9leHByZXNzaW9uXCI6MTIsXCJGUk9NXCI6MTMsXCJTRVRcIjoxNCxcIm9iamVjdF9saXRlcmFsXCI6MTUsXCJ1cGRhdGVfc3RhdGVtZW50X29wdGlvbjBcIjoxNixcInVwZGF0ZV9zdGF0ZW1lbnRfb3B0aW9uMVwiOjE3LFwiUkVNT1ZFXCI6MTgsXCJyZW1vdmVfc3RhdGVtZW50X29wdGlvbjBcIjoxOSxcInJlbW92ZV9zdGF0ZW1lbnRfb3B0aW9uMVwiOjIwLFwiRklORFwiOjIxLFwiZmllbGRfc2VsZWN0aW9uXCI6MjIsXCJmaW5kX3N0YXRlbWVudF9vcHRpb24wXCI6MjMsXCJmaW5kX3N0YXRlbWVudF9yZXBldGl0aW9uMFwiOjI0LFwiZmluZF9zdGF0ZW1lbnRfcmVwZXRpdGlvbjFcIjoyNSxcImZpZWxkX3JlZmVyZW5jZXNcIjoyNixcIipcIjoyNyxcImNvbnRleHRfcmVmZXJlbmNlXCI6MjgsXCJmaWVsZF9yZWZlcmVuY2VcIjoyOSxcIixcIjozMCxcImZpZWxkX25hbWVcIjozMSxcIiFcIjozMixcIlNUUklOR19MSVRFUkFMXCI6MzMsXCJJREVOVElGSUVSXCI6MzQsXCJ3aGVyZV9leHByZXNzaW9uXCI6MzUsXCJXSEVSRVwiOjM2LFwiZmlsdGVyc1wiOjM3LFwiZmlsdGVyXCI6MzgsXCJsb2dpY2FsX2ZpbHRlclwiOjM5LFwiQU5EXCI6NDAsXCJPUlwiOjQxLFwiTk9SXCI6NDIsXCIoXCI6NDMsXCIpXCI6NDQsXCJsb2dpY2FsX29wZXJhdG9yXCI6NDUsXCJmaWx0ZXJfb3BlcmF0b3JcIjo0NixcIklOXCI6NDcsXCJhcnJheV9saXRlcmFsXCI6NDgsXCJOT1RcIjo0OSxcIkVYSVNUU1wiOjUwLFwiPlwiOjUxLFwiPj1cIjo1MixcIjxcIjo1MyxcIjw9XCI6NTQsXCI9PVwiOjU1LFwiIT1cIjo1NixcIm1vZGlmaWVyc1wiOjU3LFwibW9kaWZpZXJzX2dyb3VwMFwiOjU4LFwibGltaXRfY2xhdXNlXCI6NTksXCJMSU1JVFwiOjYwLFwiQllcIjo2MSxcIm51bWJlcl9saXRlcmFsXCI6NjIsXCJzb3J0X2NsYXVzZVwiOjYzLFwiU09SVFwiOjY0LFwiZmllbGRfc29ydHNcIjo2NSxcImZpZWxkX3NvcnRcIjo2NixcIi1cIjo2NyxcIitcIjo2OCxcImpvaW5zXCI6NjksXCJKT0lOXCI6NzAsXCJmaWVsZF9zZWxlY3RfZXhwcmVzc2lvblwiOjcxLFwiam9pbnNfb3B0aW9uMFwiOjcyLFwiam9pbnNfcmVwZXRpdGlvbjBcIjo3MyxcIk9OXCI6NzQsXCJqb2luX2NvbmRpdGlvblwiOjc1LFwiQVNcIjo3NixcImpvaW5zX29wdGlvbjFcIjo3NyxcImpvaW5zX3JlcGV0aXRpb24xXCI6NzgsXCJMRUZUXCI6NzksXCJqb2luc19vcHRpb24yXCI6ODAsXCJqb2luc19yZXBldGl0aW9uMlwiOjgxLFwiam9pbnNfb3B0aW9uM1wiOjgyLFwiam9pbnNfcmVwZXRpdGlvbjNcIjo4MyxcIk9VVEVSXCI6ODQsXCJqb2luc19vcHRpb240XCI6ODUsXCJqb2luc19yZXBldGl0aW9uNFwiOjg2LFwiam9pbnNfb3B0aW9uNVwiOjg3LFwiam9pbnNfcmVwZXRpdGlvbjVcIjo4OCxcImpvaW5fY29uZGl0aW9uX2dyb3VwMFwiOjg5LFwiam9pbl9jb25kaXRpb25fZ3JvdXAxXCI6OTAsXCJjb2xsZWN0aW9uX2dyb3VwMFwiOjkxLFwiaWRlbnRpZmllclwiOjkyLFwiY3VycmVudF9yZWZlcmVuY2VcIjo5MyxcImxpdGVyYWxcIjo5NCxcIkBcIjo5NSxcInt7XCI6OTYsXCJ9fVwiOjk3LFwic3RyaW5nX2xpdGVyYWxcIjo5OCxcImJvb2xlYW5fbGl0ZXJhbFwiOjk5LFwiW1wiOjEwMCxcIl1cIjoxMDEsXCJ2YWx1ZV9saXN0XCI6MTAyLFwie1wiOjEwMyxcIn1cIjoxMDQsXCJrZXlfdmFsdWVfcGFpcnNcIjoxMDUsXCJrZXlfdmFsdWVfcGFpclwiOjEwNixcImtleV92YWx1ZV9wYWlyX2dyb3VwMFwiOjEwNyxcIjpcIjoxMDgsXCJOVU1CRVJfTElURVJBTFwiOjEwOSxcIkJPT0xFQU5cIjoxMTAsXCJPTkNFXCI6MTExLFwid2hlcmVfZXhwZXJlc3Npb25cIjoxMTIsXCIkYWNjZXB0XCI6MCxcIiRlbmRcIjoxfSxcbnRlcm1pbmFsc186IHsyOlwiZXJyb3JcIiw1OlwiRU9GXCIsOTpcIklOVE9cIiwxMTpcIklOU0VSVFwiLDEzOlwiRlJPTVwiLDE0OlwiU0VUXCIsMTg6XCJSRU1PVkVcIiwyMTpcIkZJTkRcIiwyNzpcIipcIiwzMDpcIixcIiwzMjpcIiFcIiwzMzpcIlNUUklOR19MSVRFUkFMXCIsMzQ6XCJJREVOVElGSUVSXCIsMzY6XCJXSEVSRVwiLDQwOlwiQU5EXCIsNDE6XCJPUlwiLDQyOlwiTk9SXCIsNDM6XCIoXCIsNDQ6XCIpXCIsNDc6XCJJTlwiLDQ5OlwiTk9UXCIsNTA6XCJFWElTVFNcIiw1MTpcIj5cIiw1MjpcIj49XCIsNTM6XCI8XCIsNTQ6XCI8PVwiLDU1OlwiPT1cIiw1NjpcIiE9XCIsNjA6XCJMSU1JVFwiLDYxOlwiQllcIiw2NDpcIlNPUlRcIiw2NzpcIi1cIiw2ODpcIitcIiw3MDpcIkpPSU5cIiw3MTpcImZpZWxkX3NlbGVjdF9leHByZXNzaW9uXCIsNzQ6XCJPTlwiLDc2OlwiQVNcIiw3OTpcIkxFRlRcIiw4NDpcIk9VVEVSXCIsOTU6XCJAXCIsOTY6XCJ7e1wiLDk3OlwifX1cIiwxMDA6XCJbXCIsMTAxOlwiXVwiLDEwMzpcIntcIiwxMDQ6XCJ9XCIsMTA4OlwiOlwiLDEwOTpcIk5VTUJFUl9MSVRFUkFMXCIsMTEwOlwiQk9PTEVBTlwiLDExMTpcIk9OQ0VcIiwxMTI6XCJ3aGVyZV9leHBlcmVzc2lvblwifSxcbnByb2R1Y3Rpb25zXzogWzAsWzMsMl0sWzMsMl0sWzMsMl0sWzMsMl0sWzQsNF0sWzYsNl0sWzcsNV0sWzgsN10sWzIyLDFdLFsyMiwxXSxbMjIsMV0sWzIyLDFdLFsyNiwxXSxbMjYsM10sWzI5LDFdLFsyOSwyXSxbMzEsMV0sWzMxLDFdLFszNSwyXSxbMzUsMl0sWzM3LDFdLFszNywzXSxbMzcsMV0sWzM5LDNdLFszOSwzXSxbMzksM10sWzM5LDNdLFszOSwzXSxbMzksM10sWzM5LDNdLFszOSwzXSxbMzksM10sWzM5LDNdLFszOSwzXSxbMzksM10sWzM5LDNdLFs0NSwxXSxbNDUsMV0sWzQ1LDFdLFszOCwzXSxbMzgsM10sWzM4LDRdLFszOCwyXSxbMzgsM10sWzQ2LDFdLFs0NiwxXSxbNDYsMV0sWzQ2LDFdLFs0NiwxXSxbNDYsMV0sWzU3LDFdLFs1OSwzXSxbNjMsM10sWzY1LDFdLFs2NSwzXSxbNjYsMl0sWzY2LDJdLFs2OSw4XSxbNjksMTBdLFs2OSw5XSxbNjksMTFdLFs2OSw5XSxbNjksMTFdLFs3NSwzXSxbMTAsMV0sWzkyLDFdLFsxMiwxXSxbMTIsMV0sWzEyLDFdLFs5MywyXSxbMjgsM10sWzk0LDFdLFs5NCwxXSxbOTQsMV0sWzk0LDFdLFs5NCwxXSxbNDgsMl0sWzQ4LDNdLFsxMDIsMV0sWzEwMiwzXSxbMTUsMl0sWzE1LDNdLFsxMDUsMV0sWzEwNSwzXSxbMTA2LDNdLFs5OCwxXSxbNjIsMV0sWzk5LDFdLFsxNiwwXSxbMTYsMV0sWzE3LDBdLFsxNywxXSxbMTksMF0sWzE5LDFdLFsyMCwwXSxbMjAsMV0sWzIzLDBdLFsyMywxXSxbMjQsMF0sWzI0LDJdLFsyNSwwXSxbMjUsMl0sWzU4LDFdLFs1OCwxXSxbNzIsMF0sWzcyLDFdLFs3MywwXSxbNzMsMl0sWzc3LDBdLFs3NywxXSxbNzgsMF0sWzc4LDJdLFs4MCwwXSxbODAsMV0sWzgxLDBdLFs4MSwyXSxbODIsMF0sWzgyLDFdLFs4MywwXSxbODMsMl0sWzg1LDBdLFs4NSwxXSxbODYsMF0sWzg2LDJdLFs4NywwXSxbODcsMV0sWzg4LDBdLFs4OCwyXSxbODksMV0sWzg5LDFdLFs5MCwxXSxbOTAsMV0sWzkxLDFdLFs5MSwxXSxbOTEsMV0sWzEwNywxXSxbMTA3LDFdXSxcbnBlcmZvcm1BY3Rpb246IGZ1bmN0aW9uIGFub255bW91cyh5eXRleHQsIHl5bGVuZywgeXlsaW5lbm8sIHl5LCB5eXN0YXRlIC8qIGFjdGlvblsxXSAqLywgJCQgLyogdnN0YWNrICovLCBfJCAvKiBsc3RhY2sgKi8pIHtcbi8qIHRoaXMgPT0geXl2YWwgKi9cblxudmFyICQwID0gJCQubGVuZ3RoIC0gMTtcbnN3aXRjaCAoeXlzdGF0ZSkge1xuY2FzZSAxOiBjYXNlIDI6IGNhc2UgMzogY2FzZSA0OlxudGhpcy4kID0gJCRbJDAtMV07IHJldHVybiB0aGlzLiQ7XG5icmVhaztcbmNhc2UgNTpcbnRoaXMuJCA9IG5ldyB5eS5hc3QuSW5zZXJ0U3RhdGVtZW50KCQkWyQwLTJdLCAkJFskMF0sIHRoaXMuXyQpOyAgICAgICAgICAgXG5icmVhaztcbmNhc2UgNjpcbnRoaXMuJCA9IG5ldyB5eS5hc3QuVXBkYXRlU3RhdGVtZW50KCQkWyQwLTRdLCAkJFskMC0yXSwgJCRbJDAtMV18fFtdLCAkJFskMF18fGZhbHNlLCAgdGhpcy5fJCk7XG5icmVhaztcbmNhc2UgNzpcbnRoaXMuJCA9IG5ldyB5eS5hc3QuUmVtb3ZlU3RhdGVtZW50KCQkWyQwLTNdLCAkJFskMC0xXXx8W10sICQkWyQwXXx8ZmFsc2UsIHRoaXMuXyQpO1xuYnJlYWs7XG5jYXNlIDg6XG50aGlzLiQgPSBuZXcgeXkuYXN0LkZpbmRTdGF0ZW1lbnQoJCRbJDAtNV0sICQkWyQwLTNdLCAkJFskMC0yXSB8fCBbXSwgJCRbJDAtMV0gfHwgW10sICQkWyQwXXx8W10sICB0aGlzLl8kKTtcbmJyZWFrO1xuY2FzZSA5OlxudGhpcy4kID0gJCRbJDBdOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5icmVhaztcbmNhc2UgMTA6XG50aGlzLiQgPSBbbmV3IHl5LmFzdC5BbGxGaWVsZHNSZWZlcmVuY2UodGhpcy5fJCldICAgXG5icmVhaztcbmNhc2UgMTE6IGNhc2UgMTI6XG50aGlzLiQgPSBbJCRbJDBdXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmJyZWFrO1xuY2FzZSAxMzogY2FzZSAyMTogY2FzZSA4MzpcbnRoaXMuJCA9IFskJFskMF1dOyBcbmJyZWFrO1xuY2FzZSAxNDogY2FzZSA4NDpcbnRoaXMuJCA9ICQkWyQwLTJdLmNvbmNhdCgkJFskMF0pOyBcbmJyZWFrO1xuY2FzZSAxNTpcbnRoaXMuJCA9IG5ldyB5eS5hc3QuRmllbGRSZWZlcmVuY2UoJCRbJDBdLCB0cnVlLCB0aGlzLl8kKTsgIFxuYnJlYWs7XG5jYXNlIDE2OlxudGhpcy4kID0gbmV3IHl5LmFzdC5GaWVsZFJlZmVyZW5jZSgkJFskMF0sIGZhbHNlLCAgdGhpcy5fJCk7XG5icmVhaztcbmNhc2UgMTc6XG50aGlzLiQgPSAkJFskMF0uc3Vic3RyaW5nKDEsICQkWyQwXS5sZW5ndGggLTEpO1xuYnJlYWs7XG5jYXNlIDE4OlxudGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDE5OlxudGhpcy4kID0gJCRbJDBdOyAgICAgICAgICAgICAgICAgXG5icmVhaztcbmNhc2UgMjA6XG50aGlzLiQgPSBbJCRbJDBdXTsgICAgICAgICAgICAgICBcbmJyZWFrO1xuY2FzZSAyMjpcbnRoaXMuJCA9ICQkWyQwLTJdO1xuICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiQucHVzaCgkJFskMF0pO1xuICAgICAgICAgICAgICAgICAgICAgIFxuYnJlYWs7XG5jYXNlIDIzOiBjYXNlIDc5OlxudGhpcy4kID0gWyQkWyQwXV07XG5icmVhaztcbmNhc2UgMjQ6IGNhc2UgMjU6IGNhc2UgMjY6IGNhc2UgMjc6IGNhc2UgMjg6IGNhc2UgMjk6IGNhc2UgMzA6IGNhc2UgMzE6IGNhc2UgMzI6XG50aGlzLiQgPSBuZXcgeXkuYXN0LkxvZ2ljRmlsdGVyKCQkWyQwLTJdLCAkJFskMC0xXSwgJCRbJDBdLCB0aGlzLl8kKTtcbmJyZWFrO1xuY2FzZSAzMzogY2FzZSAzNDogY2FzZSAzNTpcbnRoaXMuJCA9IG5ldyB5eS5hc3QuTG9naWNGaWx0ZXIoJCRbJDAtMl0sICQkWyQwLTFdLCAkJFskMF0pOyBcbmJyZWFrO1xuY2FzZSAzNjpcbnRoaXMuJCA9ICQkWyQwLTFdO1xuYnJlYWs7XG5jYXNlIDM3OlxudGhpcy4kID0gJyRvcic7IFxuYnJlYWs7XG5jYXNlIDM4OlxudGhpcy4kID0gJyRhbmQnO1xuYnJlYWs7XG5jYXNlIDM5OlxudGhpcy4kID0gJyRub3InO1xuYnJlYWs7XG5jYXNlIDQwOlxudGhpcy4kID0gbmV3IHl5LmFzdC5GaWx0ZXIoJCRbJDAtMl0sICQkWyQwLTFdLCAkJFskMF0sIHRoaXMuXyQpOyAgICAgICAgICAgXG5icmVhaztcbmNhc2UgNDE6XG50aGlzLiQgPSBuZXcgeXkuYXN0LkZpbHRlcigkJFskMC0yXSwgJyRpbicsICQkWyQwXSwgdGhpcy5fJCk7ICAgICAgICBcbmJyZWFrO1xuY2FzZSA0MjpcbnRoaXMuJCA9IG5ldyB5eS5hc3QuRmlsdGVyKCQkWyQwLTNdLCAnJG5pbicsICQkWyQwXSwgdGhpcy5fJCk7ICAgICAgIFxuYnJlYWs7XG5jYXNlIDQzOlxudGhpcy4kID0gbmV3IHl5LmFzdC5GaWx0ZXIoJCRbJDAtMV0sICckZXhpc3RzJyxcbiAgICAgICAgICAgICAgICAgICAgICBuZXcgeXkuYXN0LkJvb2xlYW5MaXRlcmFsKHRydWUsIHRoaXMuXyQpKTsgIFxuYnJlYWs7XG5jYXNlIDQ0OlxudGhpcy4kID1cbiAgICAgICAgICAgICAgICAgICAgICBuZXcgeXkuYXN0LkZpbHRlcigkJFskMC0yXSwgJyRleGlzdHMnLFxuICAgICAgICAgICAgICAgICAgICAgIG5ldyB5eS5hc3QuQm9vbGVhbkxpdGVyYWwoZmFsc2UsIHRoaXMuXyQpKTsgXG5icmVhaztcbmNhc2UgNDU6XG50aGlzLiQgPSAnJGd0JzsgICAgXG5icmVhaztcbmNhc2UgNDY6XG50aGlzLiQgPSAnJGd0ZSc7ICAgXG5icmVhaztcbmNhc2UgNDc6XG50aGlzLiQgPSAnJGx0JzsgICAgXG5icmVhaztcbmNhc2UgNDg6XG50aGlzLiQgPSAnJGx0ZSc7ICAgXG5icmVhaztcbmNhc2UgNDk6XG50aGlzLiQgPSAnJGVxJzsgICAgXG5icmVhaztcbmNhc2UgNTA6XG50aGlzLiQgPSAnJG5lJzsgICAgXG5icmVhaztcbmNhc2UgNTI6XG50aGlzLiQgPSBuZXcgeXkuYXN0LkxpbWl0Q2xhdXNlKCQkWyQwLTFdLCB0aGlzLl8kKTsgICAgIFxuYnJlYWs7XG5jYXNlIDUzOlxudGhpcy4kID0gbmV3IHl5LmFzdC5Tb3J0Q2xhdXNlKCQkWyQwXSwgIHRoaXMuXyQpOyAgICAgXG5icmVhaztcbmNhc2UgNTQ6XG50aGlzLiQgPSBbJCRbJDBdXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5icmVhaztcbmNhc2UgNTU6XG50aGlzLiQgPSAkJFskMC0yXS5jb25jYXQoJCRbJDBdKTsgICAgICAgICAgICAgICAgICAgICAgXG5icmVhaztcbmNhc2UgNTY6XG50aGlzLiQgPSBuZXcgeXkuYXN0LkZpZWxkU29ydCgkJFskMF0sIC0xLCB0aGlzLl8kKTsgICBcbmJyZWFrO1xuY2FzZSA1NzpcbnRoaXMuJCA9IG5ldyB5eS5hc3QuRmllbGRTb3J0KCQkWyQwXSwgMSwgdGhpcy5fJCk7ICAgIFxuYnJlYWs7XG5jYXNlIDU4OlxudGhpcy4kID1cbiAgICAgICAgICAgICAgICAgICAgICBuZXcgeXkuYXN0LklubmVySm9pblN0YXRlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICgkJFskMC02XSwgJCRbJDAtNF0sICQkWyQwLTRdLCAkJFskMC0zXXx8W10sICQkWyQwLTJdfHxbXSwgJCRbJDBdLCB0aGlzLl8kKTtcbiAgICAgICAgICAgICAgICAgICAgICBcbmJyZWFrO1xuY2FzZSA1OTpcbnRoaXMuJCA9XG4gICAgICAgICAgICAgICAgICAgICAgbmV3IHl5LmFzdC5Jbm5lckpvaW5TdGF0ZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAoJCRbJDAtOF0sICQkWyQwLTZdLCAkJFskMC00XSwgJCRbJDAtM118fFtdLCAkJFskMC0yXXx8W10sICQkWyQwXSwgdGhpcy5fJCk7XG4gICAgICAgICAgICAgICAgICAgICAgXG5icmVhaztcbmNhc2UgNjA6XG50aGlzLiQgPVxuICAgICAgICAgICAgICAgICAgICAgIG5ldyB5eS5hc3QuTGVmdEpvaW5TdGF0ZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAoJCRbJDAtNl0sICQkWyQwLTRdLCAkJFskMC00XSwgJCRbJDAtM10gfHwgW10sICQkWyQwLTJdIHx8IFtdLCAkJFskMF0sICB0aGlzLl8kKTtcbiAgICAgICAgICAgICAgICAgICAgICBcbmJyZWFrO1xuY2FzZSA2MTpcbnRoaXMuJCA9XG4gICAgICAgICAgICAgICAgICAgICAgbmV3IHl5LmFzdC5MZWZ0Sm9pblN0YXRlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICgkJFskMC04XSwgJCRbJDAtNl0sICQkWyQwLTRdLCAkJFskMC0zXSB8fCBbXSwgJCRbJDAtMl0gfHwgW10sICQkWyQwXSwgIHRoaXMuXyQpO1xuICAgICAgICAgICAgICAgICAgICAgIFxuYnJlYWs7XG5jYXNlIDYyOlxudGhpcy4kID1cbiAgICAgICAgICAgICAgICAgICAgICBuZXcgeXkuYXN0Lk91dGVySm9pblN0YXRlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICgkJFskMC02XSwgJCRbJDAtNF0sICQkWyQwLTRdLCAkJFskMC0zXSB8fCBbXSwgJCRbJDAtMl0gfHwgW10sICQkWyQwXSwgdGhpcy5fJCk7XG4gICAgICAgICAgICAgICAgICAgICAgXG5icmVhaztcbmNhc2UgNjM6XG50aGlzLiQgPVxuICAgICAgICAgICAgICAgICAgICAgIG5ldyB5eS5hc3QuT3V0ZXJKb2luU3RhdGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgKCQkWyQwLThdLCAkJFskMC02XSwgJCRbJDAtNF0sICQkWyQwLTNdIHx8IFtdLCAkJFskMC0yXSB8fCBbXSwgJCRbJDBdLCAgdGhpcy5fJCk7XG4gICAgICAgICAgICAgICAgICAgICAgXG5icmVhaztcbmNhc2UgNjQ6XG50aGlzLiQgPSBuZXcgeXkuYXN0LkpvaW5Db25kaXRpb24oJCRbJDAtMl0sICQkWyQwXSwgdGhpcy5fJCk7XG5icmVhaztcbmNhc2UgNjY6XG50aGlzLiQgPSBuZXcgeXkuYXN0LklkZW50aWZpZXIoJCRbJDBdLCB0aGlzLl8kKTtcbmJyZWFrO1xuY2FzZSA3MDpcbnRoaXMuJCA9IG5ldyB5eS5hc3QuQ29udGV4dFJlZmVyZW5jZSgkJFskMF0sIHRoaXMuXyQpOyBcbmJyZWFrO1xuY2FzZSA3MTpcbnRoaXMuJCA9IG5ldyB5eS5hc3QuQ29udGV4dFJlZmVyZW5jZSgkJFskMC0xXSwgIHRoaXMuXyQpO1xuYnJlYWs7XG5jYXNlIDc3OlxudGhpcy4kID0gbmV3IHl5LmFzdC5BcnJheUxpdGVyYWwoW10sIHRoaXMuXyQpOyBcbmJyZWFrO1xuY2FzZSA3ODpcbnRoaXMuJCA9IG5ldyB5eS5hc3QuQXJyYXlMaXRlcmFsKCQkWyQwLTFdLCB0aGlzLl8kKTsgXG5icmVhaztcbmNhc2UgODA6XG50aGlzLiQgPSAkJFskMC0yXS5jb25jYXQoJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSA4MTpcbnRoaXMuJCA9IG5ldyB5eS5hc3QuT2JqZWN0TGl0ZXJhbChbXSwgdGhpcy5fJCk7IFxuYnJlYWs7XG5jYXNlIDgyOlxudGhpcy4kID0gbmV3IHl5LmFzdC5PYmplY3RMaXRlcmFsKCQkWyQwLTFdLCB0aGlzLl8kKTsgXG5icmVhaztcbmNhc2UgODU6XG50aGlzLiQgPSB7a2V5OiQkWyQwLTJdLCB2YWx1ZTokJFskMF19OyBcbmJyZWFrO1xuY2FzZSA4NjpcbnRoaXMuJCA9IG5ldyB5eS5hc3QuU3RyaW5nTGl0ZXJhbCgkJFskMF0sIHRoaXMuXyQpOyBcbmJyZWFrO1xuY2FzZSA4NzpcbnRoaXMuJCA9IG5ldyB5eS5hc3QuTnVtYmVyTGl0ZXJhbCh5eS5oZWxwLnBhcnNlTnVtYmVyKCQkWyQwXSksIHRoaXMuXyQpOyBcbmJyZWFrO1xuY2FzZSA4ODpcbnRoaXMuJCA9IG5ldyB5eS5hc3QuQm9vbGVhbkxpdGVyYWwoeXkuaGVscC5wYXJzZUJvb2xlYW4oJCRbJDBdKSwgdGhpcy5fJCk7XG5icmVhaztcbmNhc2UgOTk6IGNhc2UgMTAxOiBjYXNlIDEwNzogY2FzZSAxMTE6IGNhc2UgMTE1OiBjYXNlIDExOTogY2FzZSAxMjM6IGNhc2UgMTI3OlxudGhpcy4kID0gW107XG5icmVhaztcbmNhc2UgMTAwOiBjYXNlIDEwMjogY2FzZSAxMDg6IGNhc2UgMTEyOiBjYXNlIDExNjogY2FzZSAxMjA6IGNhc2UgMTI0OiBjYXNlIDEyODpcbiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xufVxufSxcbnRhYmxlOiBbezM6MSw0OjIsNjozLDc6NCw4OjUsOTpbMSw2XSwxMzpbMSw3XX0sezE6WzNdfSx7NTpbMSw4XX0sezU6WzEsOV19LHs1OlsxLDEwXX0sezU6WzEsMTFdfSx7MTA6MTIsMjg6MTYsMzM6JFYwLDM0OiRWMSw5MToxMyw5MjoxNSw5NjokVjIsOTg6MTR9LHsxMDoyMCwyODoxNiwzMzokVjAsMzQ6JFYxLDkxOjEzLDkyOjE1LDk2OiRWMiw5ODoxNH0sezE6WzIsMV19LHsxOlsyLDJdfSx7MTpbMiwzXX0sezE6WzIsNF19LHsxMTpbMSwyMV19LG8oJFYzLFsyLDY1XSksbygkVjMsWzIsMTMzXSksbygkVjMsWzIsMTM0XSksbygkVjMsWzIsMTM1XSksbyhbNSwxMSwxNCwxOCwyMSwzMCwzNiw0MCw0MSw0Miw0NCw1NSw2MCw2NCw3MCw3NCw3Niw3OSw4NCwxMDEsMTA0LDEwOCwxMTEsMTEyXSxbMiw4Nl0pLG8oWzUsMTEsMTQsMTgsMjEsMzYsNTUsNjAsNjQsNzAsNzQsNzYsNzksODQsMTA4LDExMl0sWzIsNjZdKSx7MzQ6WzEsMjJdfSx7MTQ6WzEsMjNdLDE4OlsxLDI0XSwyMTpbMSwyNV19LHsxMjoyNiwxNTozMiwyODoyNywzMzokVjAsNDg6MzEsNjI6MzQsOTM6MjgsOTQ6MjksOTU6JFY0LDk2OiRWMiw5ODozMyw5OTozNSwxMDA6JFY1LDEwMzokVjYsMTA5OiRWNywxMTA6JFY4fSx7OTc6WzEsNDBdfSx7MTU6NDEsMTAzOiRWNn0sbygkVjksWzIsOTNdLHsxOTo0MiwzNTo0MywzNjokVmF9KSx7MTU6NDksMjI6NDUsMjY6NDYsMjc6WzEsNDddLDI4OjQ4LDI5OjUwLDMxOjUxLDMyOiRWYiwzMzokVmMsMzQ6JFZkLDk2OiRWMiwxMDM6JFY2fSx7NTpbMiw1XX0sbygkVmUsWzIsNjddKSxvKCRWZSxbMiw2OF0pLG8oJFZlLFsyLDY5XSksezMxOjU1LDMzOiRWYywzNDokVmR9LG8oJFZlLFsyLDcyXSksbygkVmUsWzIsNzNdKSxvKCRWZSxbMiw3NF0pLG8oJFZlLFsyLDc1XSksbygkVmUsWzIsNzZdKSx7MTI6NTgsMTU6MzIsMjg6MjcsMzM6JFYwLDQ4OjMxLDYyOjM0LDkzOjI4LDk0OjI5LDk1OiRWNCw5NjokVjIsOTg6MzMsOTk6MzUsMTAwOiRWNSwxMDE6WzEsNTZdLDEwMjo1NywxMDM6JFY2LDEwOTokVjcsMTEwOiRWOH0sezMzOiRWMCwzNDokVjEsOTI6NjMsOTg6NjQsMTA0OlsxLDU5XSwxMDU6NjAsMTA2OjYxLDEwNzo2Mn0sbygkVmUsWzIsODddKSxvKCRWZSxbMiw4OF0pLG8oWzUsMTEsMTQsMTgsMjEsMzAsMzYsNDAsNDEsNDIsNDQsNjAsNjQsNzAsNzQsNzYsNzksODQsMTAxLDEwNCwxMTEsMTEyXSxbMiw3MV0pLG8oJFY5LFsyLDg5XSx7MTY6NjUsMzU6NjYsMzY6JFZhfSksezU6WzIsOTVdLDIwOjY3LDExMTpbMSw2OF19LG8oJFY5LFsyLDk0XSksezI4OjcwLDMxOjczLDMzOiRWYywzNDokVmQsMzc6NjksMzg6NzEsMzk6NzIsNDM6JFZmLDk2OiRWMn0sbygkVmcsWzIsOTddLHsyMzo3NSwzNTo3NywzMDpbMSw3Nl0sMzY6JFZhfSksbygkVmgsWzIsOV0pLG8oJFZoLFsyLDEwXSksbygkVmgsWzIsMTFdKSxvKCRWaCxbMiwxMl0pLG8oJFZoLFsyLDEzXSksbygkVmgsWzIsMTVdKSx7MzE6NzgsMzM6JFZjLDM0OiRWZH0sbygkVmksWzIsMTddKSxvKCRWaSxbMiwxOF0pLG8oJFZlLFsyLDcwXSksbygkVmUsWzIsNzddKSx7MzA6WzEsODBdLDEwMTpbMSw3OV19LG8oJFZqLFsyLDc5XSksbygkVmssWzIsODFdKSx7MzA6WzEsODJdLDEwNDpbMSw4MV19LG8oJFZsLFsyLDgzXSksezEwODpbMSw4M119LHsxMDg6WzIsMTM2XX0sezEwODpbMiwxMzddfSx7NTpbMiw5MV0sMTc6ODQsMTExOlsxLDg1XX0sbygkVjksWzIsOTBdKSx7NTpbMiw3XX0sezU6WzIsOTZdfSxvKCRWbSxbMiwxOV0sezMwOlsxLDg2XX0pLG8oJFZtLFsyLDIwXSksbygkVm4sWzIsMjFdLHs0MDokVm8sNDE6JFZwLDQyOiRWcX0pLG8oJFZuLFsyLDIzXSx7NDA6JFZyLDQxOiRWcyw0MjokVnR9KSx7NDY6OTMsNDc6WzEsOTRdLDQ5OlsxLDk1XSw1MDpbMSw5Nl0sNTE6WzEsOTddLDUyOlsxLDk4XSw1MzpbMSw5OV0sNTQ6WzEsMTAwXSw1NTpbMSwxMDFdLDU2OlsxLDEwMl19LHszMTo3MywzMzokVmMsMzQ6JFZkLDM4OjEwNCwzOToxMDMsNDM6JFZmfSxvKCRWZyxbMiw5OV0sezI0OjEwNX0pLHsyOToxMDYsMzE6NTEsMzI6JFZiLDMzOiRWYywzNDokVmR9LG8oJFZnLFsyLDk4XSksbygkVmgsWzIsMTZdKSxvKCRWZSxbMiw3OF0pLHsxMjoxMDcsMTU6MzIsMjg6MjcsMzM6JFYwLDQ4OjMxLDYyOjM0LDkzOjI4LDk0OjI5LDk1OiRWNCw5NjokVjIsOTg6MzMsOTk6MzUsMTAwOiRWNSwxMDM6JFY2LDEwOTokVjcsMTEwOiRWOH0sbygkVmssWzIsODJdKSx7MzM6JFYwLDM0OiRWMSw5Mjo2Myw5ODo2NCwxMDY6MTA4LDEwNzo2Mn0sezEyOjEwOSwxNTozMiwyODoyNywzMzokVjAsNDg6MzEsNjI6MzQsOTM6MjgsOTQ6MjksOTU6JFY0LDk2OiRWMiw5ODozMyw5OTozNSwxMDA6JFY1LDEwMzokVjYsMTA5OiRWNywxMTA6JFY4fSx7NTpbMiw2XX0sezU6WzIsOTJdfSx7MzE6NzMsMzM6JFZjLDM0OiRWZCwzODoxMTB9LHszMTo3MywzMzokVmMsMzQ6JFZkLDM4OjExMSwzOToxMTIsNDM6JFZmfSx7MzE6NzMsMzM6JFZjLDM0OiRWZCwzODoxMTMsMzk6MTE0LDQzOiRWZn0sezMxOjczLDMzOiRWYywzNDokVmQsMzg6MTE1LDM5OjExNiw0MzokVmZ9LHszMTo3MywzMzokVmMsMzQ6JFZkLDM4OjExNywzOToxMTgsNDM6JFZmfSx7MzE6NzMsMzM6JFZjLDM0OiRWZCwzODoxMTksMzk6MTIwLDQzOiRWZn0sezMxOjczLDMzOiRWYywzNDokVmQsMzg6MTIxLDM5OjEyMiw0MzokVmZ9LHsxMjoxMjMsMTU6MzIsMjg6MjcsMzM6JFYwLDQ4OjMxLDYyOjM0LDkzOjI4LDk0OjI5LDk1OiRWNCw5NjokVjIsOTg6MzMsOTk6MzUsMTAwOiRWNSwxMDM6JFY2LDEwOTokVjcsMTEwOiRWOH0sezQ4OjEyNCwxMDA6JFY1fSx7NDc6WzEsMTI1XSw1MDpbMSwxMjZdfSxvKCRWdSxbMiw0M10pLG8oJFZ2LFsyLDQ1XSksbygkVnYsWzIsNDZdKSxvKCRWdixbMiw0N10pLG8oJFZ2LFsyLDQ4XSksbygkVnYsWzIsNDldKSxvKCRWdixbMiw1MF0pLHs0MDokVnIsNDE6JFZzLDQyOiRWdCw0NDpbMSwxMjddfSx7NDA6JFZvLDQxOiRWcCw0MjokVnF9LG8oJFZ3LFsyLDEwMV0sezI1OjEyOCw1NzoxMjksNTg6MTMwLDU5OjEzMSw2MzoxMzIsNjA6JFZ4LDY0OiRWeX0pLG8oJFZoLFsyLDE0XSksbygkVmosWzIsODBdKSxvKCRWbCxbMiw4NF0pLG8oJFZsLFsyLDg1XSksbygkVm4sWzIsMjJdKSxvKCRWeixbMiwyNF0sezQxOiRWcH0pLG8oJFZ6LFsyLDI3XSx7NDE6JFZzfSksbygkVnUsWzIsMjVdKSxvKCRWdSxbMiwyOF0pLG8oJFZBLFsyLDI2XSx7NDA6JFZvLDQxOiRWcH0pLG8oJFZBLFsyLDI5XSx7NDA6JFZyLDQxOiRWc30pLG8oJFZ6LFsyLDMwXSx7NDE6JFZwfSksbygkVnosWzIsMzNdLHs0MTokVnN9KSxvKCRWdSxbMiwzMV0pLG8oJFZ1LFsyLDM0XSksbygkVkEsWzIsMzJdLHs0MDokVm8sNDE6JFZwfSksbygkVkEsWzIsMzVdLHs0MDokVnIsNDE6JFZzfSksbygkVnUsWzIsNDBdKSxvKCRWdSxbMiw0MV0pLHs0ODoxMzUsMTAwOiRWNX0sbygkVnUsWzIsNDRdKSxvKCRWdSxbMiwzNl0pLHs1OlsyLDhdLDY5OjEzNiw3MDpbMSwxMzddLDc5OlsxLDEzOF0sODQ6WzEsMTM5XX0sbygkVmcsWzIsMTAwXSksbygkVkIsWzIsNTFdKSxvKCRWQixbMiwxMDNdKSxvKCRWQixbMiwxMDRdKSx7NjE6WzEsMTQwXX0sezYxOlsxLDE0MV19LG8oJFZ1LFsyLDQyXSksbygkVncsWzIsMTAyXSksezcxOlsxLDE0Ml19LHs3MDpbMSwxNDNdfSx7NzA6WzEsMTQ0XX0sezYyOjE0NSwxMDk6JFY3fSx7NjU6MTQ2LDY2OjE0Nyw2NzokVkMsNjg6JFZEfSx7MTM6WzEsMTUwXX0sezcxOlsxLDE1MV19LHs3MTpbMSwxNTJdfSxvKCRWQixbMiw1Ml0pLG8oJFZCLFsyLDUzXSx7MzA6WzEsMTUzXX0pLG8oJFZFLFsyLDU0XSksezMxOjE1NCwzMzokVmMsMzQ6JFZkfSx7MzE6MTU1LDMzOiRWYywzNDokVmR9LHsxMDoxNTYsMjg6MTYsMzM6JFYwLDM0OiRWMSw5MToxMyw5MjoxNSw5NjokVjIsOTg6MTR9LHsxMzpbMSwxNTddfSx7MTM6WzEsMTU4XX0sezY2OjE1OSw2NzokVkMsNjg6JFZEfSxvKCRWRSxbMiw1Nl0pLG8oJFZFLFsyLDU3XSksbygkVkYsWzIsMTA1XSx7NzI6MTYwLDM1OjE2MiwzNjokVmEsNzY6WzEsMTYxXX0pLHsxMDoxNjMsMjg6MTYsMzM6JFYwLDM0OiRWMSw5MToxMyw5MjoxNSw5NjokVjIsOTg6MTR9LHsxMDoxNjQsMjg6MTYsMzM6JFYwLDM0OiRWMSw5MToxMyw5MjoxNSw5NjokVjIsOTg6MTR9LG8oJFZFLFsyLDU1XSksbygkVkYsWzIsMTA3XSx7NzM6MTY1fSksezEwOjE2NiwyODoxNiwzMzokVjAsMzQ6JFYxLDkxOjEzLDkyOjE1LDk2OiRWMiw5ODoxNH0sbygkVkYsWzIsMTA2XSksbygkVkYsWzIsMTEzXSx7ODA6MTY3LDM1OjE2OSwzNjokVmEsNzY6WzEsMTY4XX0pLG8oJFZGLFsyLDEyMV0sezg1OjE3MCw3NjpbMSwxNzFdLDExMjpbMSwxNzJdfSksezU3OjE3NCw1ODoxMzAsNTk6MTMxLDYwOiRWeCw2MzoxMzIsNjQ6JFZ5LDc0OlsxLDE3M119LG8oJFZGLFsyLDEwOV0sezc3OjE3NSwzNToxNzYsMzY6JFZhfSksbygkVkYsWzIsMTE1XSx7ODE6MTc3fSksezEwOjE3OCwyODoxNiwzMzokVjAsMzQ6JFYxLDkxOjEzLDkyOjE1LDk2OiRWMiw5ODoxNH0sbygkVkYsWzIsMTE0XSksbygkVkYsWzIsMTIzXSx7ODY6MTc5fSksezEwOjE4MCwyODoxNiwzMzokVjAsMzQ6JFYxLDkxOjEzLDkyOjE1LDk2OiRWMiw5ODoxNH0sbygkVkYsWzIsMTIyXSksezMzOiRWMCwzNDokVjEsNzU6MTgxLDg5OjE4Miw5MjoxODQsOTg6MTgzfSxvKCRWRixbMiwxMDhdKSxvKCRWRixbMiwxMTFdLHs3ODoxODV9KSxvKCRWRixbMiwxMTBdKSx7NTc6MTg3LDU4OjEzMCw1OToxMzEsNjA6JFZ4LDYzOjEzMiw2NDokVnksNzQ6WzEsMTg2XX0sbygkVkYsWzIsMTE3XSx7ODI6MTg4LDM1OjE4OSwzNjokVmF9KSx7NTc6MTkxLDU4OjEzMCw1OToxMzEsNjA6JFZ4LDYzOjEzMiw2NDokVnksNzQ6WzEsMTkwXX0sbygkVkYsWzIsMTI1XSx7ODc6MTkyLDExMjpbMSwxOTNdfSksbygkVncsWzIsNThdKSx7NTU6WzEsMTk0XX0sezU1OlsyLDEyOV19LHs1NTpbMiwxMzBdfSx7NTc6MTk2LDU4OjEzMCw1OToxMzEsNjA6JFZ4LDYzOjEzMiw2NDokVnksNzQ6WzEsMTk1XX0sezMzOiRWMCwzNDokVjEsNzU6MTk3LDg5OjE4Miw5MjoxODQsOTg6MTgzfSxvKCRWRixbMiwxMTZdKSxvKCRWRixbMiwxMTldLHs4MzoxOTh9KSxvKCRWRixbMiwxMThdKSx7MzM6JFYwLDM0OiRWMSw3NToxOTksODk6MTgyLDkyOjE4NCw5ODoxODN9LG8oJFZGLFsyLDEyNF0pLG8oJFZGLFsyLDEyN10sezg4OjIwMH0pLG8oJFZGLFsyLDEyNl0pLHszMzokVjAsMzQ6JFYxLDkwOjIwMSw5MjoyMDMsOTg6MjAyfSx7MzM6JFYwLDM0OiRWMSw3NToyMDQsODk6MTgyLDkyOjE4NCw5ODoxODN9LG8oJFZGLFsyLDExMl0pLG8oJFZ3LFsyLDYwXSksezU3OjIwNiw1ODoxMzAsNTk6MTMxLDYwOiRWeCw2MzoxMzIsNjQ6JFZ5LDc0OlsxLDIwNV19LG8oJFZ3LFsyLDYyXSksezU3OjIwOCw1ODoxMzAsNTk6MTMxLDYwOiRWeCw2MzoxMzIsNjQ6JFZ5LDc0OlsxLDIwN119LG8oJFZ3LFsyLDY0XSksbygkVncsWzIsMTMxXSksbygkVncsWzIsMTMyXSksbygkVncsWzIsNTldKSx7MzM6JFYwLDM0OiRWMSw3NToyMDksODk6MTgyLDkyOjE4NCw5ODoxODN9LG8oJFZGLFsyLDEyMF0pLHszMzokVjAsMzQ6JFYxLDc1OjIxMCw4OToxODIsOTI6MTg0LDk4OjE4M30sbygkVkYsWzIsMTI4XSksbygkVncsWzIsNjFdKSxvKCRWdyxbMiw2M10pXSxcbmRlZmF1bHRBY3Rpb25zOiB7ODpbMiwxXSw5OlsyLDJdLDEwOlsyLDNdLDExOlsyLDRdLDI2OlsyLDVdLDYzOlsyLDEzNl0sNjQ6WzIsMTM3XSw2NzpbMiw3XSw2ODpbMiw5Nl0sODQ6WzIsNl0sODU6WzIsOTJdLDE4MzpbMiwxMjldLDE4NDpbMiwxMzBdfSxcbnBhcnNlRXJyb3I6IGZ1bmN0aW9uIHBhcnNlRXJyb3Ioc3RyLCBoYXNoKSB7XG4gICAgaWYgKGhhc2gucmVjb3ZlcmFibGUpIHtcbiAgICAgICAgdGhpcy50cmFjZShzdHIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZ1bmN0aW9uIF9wYXJzZUVycm9yIChtc2csIGhhc2gpIHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IG1zZztcbiAgICAgICAgICAgIHRoaXMuaGFzaCA9IGhhc2g7XG4gICAgICAgIH1cbiAgICAgICAgX3BhcnNlRXJyb3IucHJvdG90eXBlID0gRXJyb3I7XG5cbiAgICAgICAgdGhyb3cgbmV3IF9wYXJzZUVycm9yKHN0ciwgaGFzaCk7XG4gICAgfVxufSxcbnBhcnNlOiBmdW5jdGlvbiBwYXJzZShpbnB1dCkge1xuICAgIHZhciBzZWxmID0gdGhpcywgc3RhY2sgPSBbMF0sIHRzdGFjayA9IFtdLCB2c3RhY2sgPSBbbnVsbF0sIGxzdGFjayA9IFtdLCB0YWJsZSA9IHRoaXMudGFibGUsIHl5dGV4dCA9ICcnLCB5eWxpbmVubyA9IDAsIHl5bGVuZyA9IDAsIHJlY292ZXJpbmcgPSAwLCBURVJST1IgPSAyLCBFT0YgPSAxO1xuICAgIHZhciBhcmdzID0gbHN0YWNrLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICB2YXIgbGV4ZXIgPSBPYmplY3QuY3JlYXRlKHRoaXMubGV4ZXIpO1xuICAgIHZhciBzaGFyZWRTdGF0ZSA9IHsgeXk6IHt9IH07XG4gICAgZm9yICh2YXIgayBpbiB0aGlzLnl5KSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy55eSwgaykpIHtcbiAgICAgICAgICAgIHNoYXJlZFN0YXRlLnl5W2tdID0gdGhpcy55eVtrXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXhlci5zZXRJbnB1dChpbnB1dCwgc2hhcmVkU3RhdGUueXkpO1xuICAgIHNoYXJlZFN0YXRlLnl5LmxleGVyID0gbGV4ZXI7XG4gICAgc2hhcmVkU3RhdGUueXkucGFyc2VyID0gdGhpcztcbiAgICBpZiAodHlwZW9mIGxleGVyLnl5bGxvYyA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBsZXhlci55eWxsb2MgPSB7fTtcbiAgICB9XG4gICAgdmFyIHl5bG9jID0gbGV4ZXIueXlsbG9jO1xuICAgIGxzdGFjay5wdXNoKHl5bG9jKTtcbiAgICB2YXIgcmFuZ2VzID0gbGV4ZXIub3B0aW9ucyAmJiBsZXhlci5vcHRpb25zLnJhbmdlcztcbiAgICBpZiAodHlwZW9mIHNoYXJlZFN0YXRlLnl5LnBhcnNlRXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5wYXJzZUVycm9yID0gc2hhcmVkU3RhdGUueXkucGFyc2VFcnJvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBhcnNlRXJyb3IgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykucGFyc2VFcnJvcjtcbiAgICB9XG4gICAgZnVuY3Rpb24gcG9wU3RhY2sobikge1xuICAgICAgICBzdGFjay5sZW5ndGggPSBzdGFjay5sZW5ndGggLSAyICogbjtcbiAgICAgICAgdnN0YWNrLmxlbmd0aCA9IHZzdGFjay5sZW5ndGggLSBuO1xuICAgICAgICBsc3RhY2subGVuZ3RoID0gbHN0YWNrLmxlbmd0aCAtIG47XG4gICAgfVxuICAgIF90b2tlbl9zdGFjazpcbiAgICAgICAgdmFyIGxleCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0b2tlbjtcbiAgICAgICAgICAgIHRva2VuID0gbGV4ZXIubGV4KCkgfHwgRU9GO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0b2tlbiAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICB0b2tlbiA9IHNlbGYuc3ltYm9sc19bdG9rZW5dIHx8IHRva2VuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICB9O1xuICAgIHZhciBzeW1ib2wsIHByZUVycm9yU3ltYm9sLCBzdGF0ZSwgYWN0aW9uLCBhLCByLCB5eXZhbCA9IHt9LCBwLCBsZW4sIG5ld1N0YXRlLCBleHBlY3RlZDtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBzdGF0ZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAodGhpcy5kZWZhdWx0QWN0aW9uc1tzdGF0ZV0pIHtcbiAgICAgICAgICAgIGFjdGlvbiA9IHRoaXMuZGVmYXVsdEFjdGlvbnNbc3RhdGVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHN5bWJvbCA9PT0gbnVsbCB8fCB0eXBlb2Ygc3ltYm9sID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgc3ltYm9sID0gbGV4KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY3Rpb24gPSB0YWJsZVtzdGF0ZV0gJiYgdGFibGVbc3RhdGVdW3N5bWJvbF07XG4gICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICd1bmRlZmluZWQnIHx8ICFhY3Rpb24ubGVuZ3RoIHx8ICFhY3Rpb25bMF0pIHtcbiAgICAgICAgICAgICAgICB2YXIgZXJyU3RyID0gJyc7XG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHAgaW4gdGFibGVbc3RhdGVdKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRlcm1pbmFsc19bcF0gJiYgcCA+IFRFUlJPUikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWQucHVzaCgnXFwnJyArIHRoaXMudGVybWluYWxzX1twXSArICdcXCcnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobGV4ZXIuc2hvd1Bvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGVyclN0ciA9ICdQYXJzZSBlcnJvciBvbiBsaW5lICcgKyAoeXlsaW5lbm8gKyAxKSArICc6XFxuJyArIGxleGVyLnNob3dQb3NpdGlvbigpICsgJ1xcbkV4cGVjdGluZyAnICsgZXhwZWN0ZWQuam9pbignLCAnKSArICcsIGdvdCBcXCcnICsgKHRoaXMudGVybWluYWxzX1tzeW1ib2xdIHx8IHN5bWJvbCkgKyAnXFwnJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlcnJTdHIgPSAnUGFyc2UgZXJyb3Igb24gbGluZSAnICsgKHl5bGluZW5vICsgMSkgKyAnOiBVbmV4cGVjdGVkICcgKyAoc3ltYm9sID09IEVPRiA/ICdlbmQgb2YgaW5wdXQnIDogJ1xcJycgKyAodGhpcy50ZXJtaW5hbHNfW3N5bWJvbF0gfHwgc3ltYm9sKSArICdcXCcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJzZUVycm9yKGVyclN0ciwge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBsZXhlci5tYXRjaCxcbiAgICAgICAgICAgICAgICAgICAgdG9rZW46IHRoaXMudGVybWluYWxzX1tzeW1ib2xdIHx8IHN5bWJvbCxcbiAgICAgICAgICAgICAgICAgICAgbGluZTogbGV4ZXIueXlsaW5lbm8sXG4gICAgICAgICAgICAgICAgICAgIGxvYzogeXlsb2MsXG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBleHBlY3RlZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aW9uWzBdIGluc3RhbmNlb2YgQXJyYXkgJiYgYWN0aW9uLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUGFyc2UgRXJyb3I6IG11bHRpcGxlIGFjdGlvbnMgcG9zc2libGUgYXQgc3RhdGU6ICcgKyBzdGF0ZSArICcsIHRva2VuOiAnICsgc3ltYm9sKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGFjdGlvblswXSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBzdGFjay5wdXNoKHN5bWJvbCk7XG4gICAgICAgICAgICB2c3RhY2sucHVzaChsZXhlci55eXRleHQpO1xuICAgICAgICAgICAgbHN0YWNrLnB1c2gobGV4ZXIueXlsbG9jKTtcbiAgICAgICAgICAgIHN0YWNrLnB1c2goYWN0aW9uWzFdKTtcbiAgICAgICAgICAgIHN5bWJvbCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoIXByZUVycm9yU3ltYm9sKSB7XG4gICAgICAgICAgICAgICAgeXlsZW5nID0gbGV4ZXIueXlsZW5nO1xuICAgICAgICAgICAgICAgIHl5dGV4dCA9IGxleGVyLnl5dGV4dDtcbiAgICAgICAgICAgICAgICB5eWxpbmVubyA9IGxleGVyLnl5bGluZW5vO1xuICAgICAgICAgICAgICAgIHl5bG9jID0gbGV4ZXIueXlsbG9jO1xuICAgICAgICAgICAgICAgIGlmIChyZWNvdmVyaW5nID4gMCkge1xuICAgICAgICAgICAgICAgICAgICByZWNvdmVyaW5nLS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzeW1ib2wgPSBwcmVFcnJvclN5bWJvbDtcbiAgICAgICAgICAgICAgICBwcmVFcnJvclN5bWJvbCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgbGVuID0gdGhpcy5wcm9kdWN0aW9uc19bYWN0aW9uWzFdXVsxXTtcbiAgICAgICAgICAgIHl5dmFsLiQgPSB2c3RhY2tbdnN0YWNrLmxlbmd0aCAtIGxlbl07XG4gICAgICAgICAgICB5eXZhbC5fJCA9IHtcbiAgICAgICAgICAgICAgICBmaXJzdF9saW5lOiBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIChsZW4gfHwgMSldLmZpcnN0X2xpbmUsXG4gICAgICAgICAgICAgICAgbGFzdF9saW5lOiBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIDFdLmxhc3RfbGluZSxcbiAgICAgICAgICAgICAgICBmaXJzdF9jb2x1bW46IGxzdGFja1tsc3RhY2subGVuZ3RoIC0gKGxlbiB8fCAxKV0uZmlyc3RfY29sdW1uLFxuICAgICAgICAgICAgICAgIGxhc3RfY29sdW1uOiBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIDFdLmxhc3RfY29sdW1uXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHJhbmdlcykge1xuICAgICAgICAgICAgICAgIHl5dmFsLl8kLnJhbmdlID0gW1xuICAgICAgICAgICAgICAgICAgICBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIChsZW4gfHwgMSldLnJhbmdlWzBdLFxuICAgICAgICAgICAgICAgICAgICBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIDFdLnJhbmdlWzFdXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHIgPSB0aGlzLnBlcmZvcm1BY3Rpb24uYXBwbHkoeXl2YWwsIFtcbiAgICAgICAgICAgICAgICB5eXRleHQsXG4gICAgICAgICAgICAgICAgeXlsZW5nLFxuICAgICAgICAgICAgICAgIHl5bGluZW5vLFxuICAgICAgICAgICAgICAgIHNoYXJlZFN0YXRlLnl5LFxuICAgICAgICAgICAgICAgIGFjdGlvblsxXSxcbiAgICAgICAgICAgICAgICB2c3RhY2ssXG4gICAgICAgICAgICAgICAgbHN0YWNrXG4gICAgICAgICAgICBdLmNvbmNhdChhcmdzKSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobGVuKSB7XG4gICAgICAgICAgICAgICAgc3RhY2sgPSBzdGFjay5zbGljZSgwLCAtMSAqIGxlbiAqIDIpO1xuICAgICAgICAgICAgICAgIHZzdGFjayA9IHZzdGFjay5zbGljZSgwLCAtMSAqIGxlbik7XG4gICAgICAgICAgICAgICAgbHN0YWNrID0gbHN0YWNrLnNsaWNlKDAsIC0xICogbGVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YWNrLnB1c2godGhpcy5wcm9kdWN0aW9uc19bYWN0aW9uWzFdXVswXSk7XG4gICAgICAgICAgICB2c3RhY2sucHVzaCh5eXZhbC4kKTtcbiAgICAgICAgICAgIGxzdGFjay5wdXNoKHl5dmFsLl8kKTtcbiAgICAgICAgICAgIG5ld1N0YXRlID0gdGFibGVbc3RhY2tbc3RhY2subGVuZ3RoIC0gMl1dW3N0YWNrW3N0YWNrLmxlbmd0aCAtIDFdXTtcbiAgICAgICAgICAgIHN0YWNrLnB1c2gobmV3U3RhdGUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufX07XG4vKiBnZW5lcmF0ZWQgYnkgamlzb24tbGV4IDAuMy40ICovXG52YXIgbGV4ZXIgPSAoZnVuY3Rpb24oKXtcbnZhciBsZXhlciA9ICh7XG5cbkVPRjoxLFxuXG5wYXJzZUVycm9yOmZ1bmN0aW9uIHBhcnNlRXJyb3Ioc3RyLCBoYXNoKSB7XG4gICAgICAgIGlmICh0aGlzLnl5LnBhcnNlcikge1xuICAgICAgICAgICAgdGhpcy55eS5wYXJzZXIucGFyc2VFcnJvcihzdHIsIGhhc2gpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHN0cik7XG4gICAgICAgIH1cbiAgICB9LFxuXG4vLyByZXNldHMgdGhlIGxleGVyLCBzZXRzIG5ldyBpbnB1dFxuc2V0SW5wdXQ6ZnVuY3Rpb24gKGlucHV0LCB5eSkge1xuICAgICAgICB0aGlzLnl5ID0geXkgfHwgdGhpcy55eSB8fCB7fTtcbiAgICAgICAgdGhpcy5faW5wdXQgPSBpbnB1dDtcbiAgICAgICAgdGhpcy5fbW9yZSA9IHRoaXMuX2JhY2t0cmFjayA9IHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnl5bGluZW5vID0gdGhpcy55eWxlbmcgPSAwO1xuICAgICAgICB0aGlzLnl5dGV4dCA9IHRoaXMubWF0Y2hlZCA9IHRoaXMubWF0Y2ggPSAnJztcbiAgICAgICAgdGhpcy5jb25kaXRpb25TdGFjayA9IFsnSU5JVElBTCddO1xuICAgICAgICB0aGlzLnl5bGxvYyA9IHtcbiAgICAgICAgICAgIGZpcnN0X2xpbmU6IDEsXG4gICAgICAgICAgICBmaXJzdF9jb2x1bW46IDAsXG4gICAgICAgICAgICBsYXN0X2xpbmU6IDEsXG4gICAgICAgICAgICBsYXN0X2NvbHVtbjogMFxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykge1xuICAgICAgICAgICAgdGhpcy55eWxsb2MucmFuZ2UgPSBbMCwwXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbi8vIGNvbnN1bWVzIGFuZCByZXR1cm5zIG9uZSBjaGFyIGZyb20gdGhlIGlucHV0XG5pbnB1dDpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjaCA9IHRoaXMuX2lucHV0WzBdO1xuICAgICAgICB0aGlzLnl5dGV4dCArPSBjaDtcbiAgICAgICAgdGhpcy55eWxlbmcrKztcbiAgICAgICAgdGhpcy5vZmZzZXQrKztcbiAgICAgICAgdGhpcy5tYXRjaCArPSBjaDtcbiAgICAgICAgdGhpcy5tYXRjaGVkICs9IGNoO1xuICAgICAgICB2YXIgbGluZXMgPSBjaC5tYXRjaCgvKD86XFxyXFxuP3xcXG4pLiovZyk7XG4gICAgICAgIGlmIChsaW5lcykge1xuICAgICAgICAgICAgdGhpcy55eWxpbmVubysrO1xuICAgICAgICAgICAgdGhpcy55eWxsb2MubGFzdF9saW5lKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbisrO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmFuZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLnl5bGxvYy5yYW5nZVsxXSsrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faW5wdXQgPSB0aGlzLl9pbnB1dC5zbGljZSgxKTtcbiAgICAgICAgcmV0dXJuIGNoO1xuICAgIH0sXG5cbi8vIHVuc2hpZnRzIG9uZSBjaGFyIChvciBhIHN0cmluZykgaW50byB0aGUgaW5wdXRcbnVucHV0OmZ1bmN0aW9uIChjaCkge1xuICAgICAgICB2YXIgbGVuID0gY2gubGVuZ3RoO1xuICAgICAgICB2YXIgbGluZXMgPSBjaC5zcGxpdCgvKD86XFxyXFxuP3xcXG4pL2cpO1xuXG4gICAgICAgIHRoaXMuX2lucHV0ID0gY2ggKyB0aGlzLl9pbnB1dDtcbiAgICAgICAgdGhpcy55eXRleHQgPSB0aGlzLnl5dGV4dC5zdWJzdHIoMCwgdGhpcy55eXRleHQubGVuZ3RoIC0gbGVuKTtcbiAgICAgICAgLy90aGlzLnl5bGVuZyAtPSBsZW47XG4gICAgICAgIHRoaXMub2Zmc2V0IC09IGxlbjtcbiAgICAgICAgdmFyIG9sZExpbmVzID0gdGhpcy5tYXRjaC5zcGxpdCgvKD86XFxyXFxuP3xcXG4pL2cpO1xuICAgICAgICB0aGlzLm1hdGNoID0gdGhpcy5tYXRjaC5zdWJzdHIoMCwgdGhpcy5tYXRjaC5sZW5ndGggLSAxKTtcbiAgICAgICAgdGhpcy5tYXRjaGVkID0gdGhpcy5tYXRjaGVkLnN1YnN0cigwLCB0aGlzLm1hdGNoZWQubGVuZ3RoIC0gMSk7XG5cbiAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHRoaXMueXlsaW5lbm8gLT0gbGluZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgciA9IHRoaXMueXlsbG9jLnJhbmdlO1xuXG4gICAgICAgIHRoaXMueXlsbG9jID0ge1xuICAgICAgICAgICAgZmlyc3RfbGluZTogdGhpcy55eWxsb2MuZmlyc3RfbGluZSxcbiAgICAgICAgICAgIGxhc3RfbGluZTogdGhpcy55eWxpbmVubyArIDEsXG4gICAgICAgICAgICBmaXJzdF9jb2x1bW46IHRoaXMueXlsbG9jLmZpcnN0X2NvbHVtbixcbiAgICAgICAgICAgIGxhc3RfY29sdW1uOiBsaW5lcyA/XG4gICAgICAgICAgICAgICAgKGxpbmVzLmxlbmd0aCA9PT0gb2xkTGluZXMubGVuZ3RoID8gdGhpcy55eWxsb2MuZmlyc3RfY29sdW1uIDogMClcbiAgICAgICAgICAgICAgICAgKyBvbGRMaW5lc1tvbGRMaW5lcy5sZW5ndGggLSBsaW5lcy5sZW5ndGhdLmxlbmd0aCAtIGxpbmVzWzBdLmxlbmd0aCA6XG4gICAgICAgICAgICAgIHRoaXMueXlsbG9jLmZpcnN0X2NvbHVtbiAtIGxlblxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmFuZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLnl5bGxvYy5yYW5nZSA9IFtyWzBdLCByWzBdICsgdGhpcy55eWxlbmcgLSBsZW5dO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMueXlsZW5nID0gdGhpcy55eXRleHQubGVuZ3RoO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4vLyBXaGVuIGNhbGxlZCBmcm9tIGFjdGlvbiwgY2FjaGVzIG1hdGNoZWQgdGV4dCBhbmQgYXBwZW5kcyBpdCBvbiBuZXh0IGFjdGlvblxubW9yZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX21vcmUgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4vLyBXaGVuIGNhbGxlZCBmcm9tIGFjdGlvbiwgc2lnbmFscyB0aGUgbGV4ZXIgdGhhdCB0aGlzIHJ1bGUgZmFpbHMgdG8gbWF0Y2ggdGhlIGlucHV0LCBzbyB0aGUgbmV4dCBtYXRjaGluZyBydWxlIChyZWdleCkgc2hvdWxkIGJlIHRlc3RlZCBpbnN0ZWFkLlxucmVqZWN0OmZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5iYWNrdHJhY2tfbGV4ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2JhY2t0cmFjayA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUVycm9yKCdMZXhpY2FsIGVycm9yIG9uIGxpbmUgJyArICh0aGlzLnl5bGluZW5vICsgMSkgKyAnLiBZb3UgY2FuIG9ubHkgaW52b2tlIHJlamVjdCgpIGluIHRoZSBsZXhlciB3aGVuIHRoZSBsZXhlciBpcyBvZiB0aGUgYmFja3RyYWNraW5nIHBlcnN1YXNpb24gKG9wdGlvbnMuYmFja3RyYWNrX2xleGVyID0gdHJ1ZSkuXFxuJyArIHRoaXMuc2hvd1Bvc2l0aW9uKCksIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIlwiLFxuICAgICAgICAgICAgICAgIHRva2VuOiBudWxsLFxuICAgICAgICAgICAgICAgIGxpbmU6IHRoaXMueXlsaW5lbm9cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuLy8gcmV0YWluIGZpcnN0IG4gY2hhcmFjdGVycyBvZiB0aGUgbWF0Y2hcbmxlc3M6ZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgdGhpcy51bnB1dCh0aGlzLm1hdGNoLnNsaWNlKG4pKTtcbiAgICB9LFxuXG4vLyBkaXNwbGF5cyBhbHJlYWR5IG1hdGNoZWQgaW5wdXQsIGkuZS4gZm9yIGVycm9yIG1lc3NhZ2VzXG5wYXN0SW5wdXQ6ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGFzdCA9IHRoaXMubWF0Y2hlZC5zdWJzdHIoMCwgdGhpcy5tYXRjaGVkLmxlbmd0aCAtIHRoaXMubWF0Y2gubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIChwYXN0Lmxlbmd0aCA+IDIwID8gJy4uLic6JycpICsgcGFzdC5zdWJzdHIoLTIwKS5yZXBsYWNlKC9cXG4vZywgXCJcIik7XG4gICAgfSxcblxuLy8gZGlzcGxheXMgdXBjb21pbmcgaW5wdXQsIGkuZS4gZm9yIGVycm9yIG1lc3NhZ2VzXG51cGNvbWluZ0lucHV0OmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5leHQgPSB0aGlzLm1hdGNoO1xuICAgICAgICBpZiAobmV4dC5sZW5ndGggPCAyMCkge1xuICAgICAgICAgICAgbmV4dCArPSB0aGlzLl9pbnB1dC5zdWJzdHIoMCwgMjAtbmV4dC5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAobmV4dC5zdWJzdHIoMCwyMCkgKyAobmV4dC5sZW5ndGggPiAyMCA/ICcuLi4nIDogJycpKS5yZXBsYWNlKC9cXG4vZywgXCJcIik7XG4gICAgfSxcblxuLy8gZGlzcGxheXMgdGhlIGNoYXJhY3RlciBwb3NpdGlvbiB3aGVyZSB0aGUgbGV4aW5nIGVycm9yIG9jY3VycmVkLCBpLmUuIGZvciBlcnJvciBtZXNzYWdlc1xuc2hvd1Bvc2l0aW9uOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHByZSA9IHRoaXMucGFzdElucHV0KCk7XG4gICAgICAgIHZhciBjID0gbmV3IEFycmF5KHByZS5sZW5ndGggKyAxKS5qb2luKFwiLVwiKTtcbiAgICAgICAgcmV0dXJuIHByZSArIHRoaXMudXBjb21pbmdJbnB1dCgpICsgXCJcXG5cIiArIGMgKyBcIl5cIjtcbiAgICB9LFxuXG4vLyB0ZXN0IHRoZSBsZXhlZCB0b2tlbjogcmV0dXJuIEZBTFNFIHdoZW4gbm90IGEgbWF0Y2gsIG90aGVyd2lzZSByZXR1cm4gdG9rZW5cbnRlc3RfbWF0Y2g6ZnVuY3Rpb24gKG1hdGNoLCBpbmRleGVkX3J1bGUpIHtcbiAgICAgICAgdmFyIHRva2VuLFxuICAgICAgICAgICAgbGluZXMsXG4gICAgICAgICAgICBiYWNrdXA7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5iYWNrdHJhY2tfbGV4ZXIpIHtcbiAgICAgICAgICAgIC8vIHNhdmUgY29udGV4dFxuICAgICAgICAgICAgYmFja3VwID0ge1xuICAgICAgICAgICAgICAgIHl5bGluZW5vOiB0aGlzLnl5bGluZW5vLFxuICAgICAgICAgICAgICAgIHl5bGxvYzoge1xuICAgICAgICAgICAgICAgICAgICBmaXJzdF9saW5lOiB0aGlzLnl5bGxvYy5maXJzdF9saW5lLFxuICAgICAgICAgICAgICAgICAgICBsYXN0X2xpbmU6IHRoaXMubGFzdF9saW5lLFxuICAgICAgICAgICAgICAgICAgICBmaXJzdF9jb2x1bW46IHRoaXMueXlsbG9jLmZpcnN0X2NvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgbGFzdF9jb2x1bW46IHRoaXMueXlsbG9jLmxhc3RfY29sdW1uXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB5eXRleHQ6IHRoaXMueXl0ZXh0LFxuICAgICAgICAgICAgICAgIG1hdGNoOiB0aGlzLm1hdGNoLFxuICAgICAgICAgICAgICAgIG1hdGNoZXM6IHRoaXMubWF0Y2hlcyxcbiAgICAgICAgICAgICAgICBtYXRjaGVkOiB0aGlzLm1hdGNoZWQsXG4gICAgICAgICAgICAgICAgeXlsZW5nOiB0aGlzLnl5bGVuZyxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgIF9tb3JlOiB0aGlzLl9tb3JlLFxuICAgICAgICAgICAgICAgIF9pbnB1dDogdGhpcy5faW5wdXQsXG4gICAgICAgICAgICAgICAgeXk6IHRoaXMueXksXG4gICAgICAgICAgICAgICAgY29uZGl0aW9uU3RhY2s6IHRoaXMuY29uZGl0aW9uU3RhY2suc2xpY2UoMCksXG4gICAgICAgICAgICAgICAgZG9uZTogdGhpcy5kb25lXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHtcbiAgICAgICAgICAgICAgICBiYWNrdXAueXlsbG9jLnJhbmdlID0gdGhpcy55eWxsb2MucmFuZ2Uuc2xpY2UoMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsaW5lcyA9IG1hdGNoWzBdLm1hdGNoKC8oPzpcXHJcXG4/fFxcbikuKi9nKTtcbiAgICAgICAgaWYgKGxpbmVzKSB7XG4gICAgICAgICAgICB0aGlzLnl5bGluZW5vICs9IGxpbmVzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnl5bGxvYyA9IHtcbiAgICAgICAgICAgIGZpcnN0X2xpbmU6IHRoaXMueXlsbG9jLmxhc3RfbGluZSxcbiAgICAgICAgICAgIGxhc3RfbGluZTogdGhpcy55eWxpbmVubyArIDEsXG4gICAgICAgICAgICBmaXJzdF9jb2x1bW46IHRoaXMueXlsbG9jLmxhc3RfY29sdW1uLFxuICAgICAgICAgICAgbGFzdF9jb2x1bW46IGxpbmVzID9cbiAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXS5sZW5ndGggLSBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXS5tYXRjaCgvXFxyP1xcbj8vKVswXS5sZW5ndGggOlxuICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueXlsbG9jLmxhc3RfY29sdW1uICsgbWF0Y2hbMF0ubGVuZ3RoXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMueXl0ZXh0ICs9IG1hdGNoWzBdO1xuICAgICAgICB0aGlzLm1hdGNoICs9IG1hdGNoWzBdO1xuICAgICAgICB0aGlzLm1hdGNoZXMgPSBtYXRjaDtcbiAgICAgICAgdGhpcy55eWxlbmcgPSB0aGlzLnl5dGV4dC5sZW5ndGg7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmFuZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLnl5bGxvYy5yYW5nZSA9IFt0aGlzLm9mZnNldCwgdGhpcy5vZmZzZXQgKz0gdGhpcy55eWxlbmddO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21vcmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fYmFja3RyYWNrID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2lucHV0ID0gdGhpcy5faW5wdXQuc2xpY2UobWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgdGhpcy5tYXRjaGVkICs9IG1hdGNoWzBdO1xuICAgICAgICB0b2tlbiA9IHRoaXMucGVyZm9ybUFjdGlvbi5jYWxsKHRoaXMsIHRoaXMueXksIHRoaXMsIGluZGV4ZWRfcnVsZSwgdGhpcy5jb25kaXRpb25TdGFja1t0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aCAtIDFdKTtcbiAgICAgICAgaWYgKHRoaXMuZG9uZSAmJiB0aGlzLl9pbnB1dCkge1xuICAgICAgICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYmFja3RyYWNrKSB7XG4gICAgICAgICAgICAvLyByZWNvdmVyIGNvbnRleHRcbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gYmFja3VwKSB7XG4gICAgICAgICAgICAgICAgdGhpc1trXSA9IGJhY2t1cFtrXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gcnVsZSBhY3Rpb24gY2FsbGVkIHJlamVjdCgpIGltcGx5aW5nIHRoZSBuZXh0IHJ1bGUgc2hvdWxkIGJlIHRlc3RlZCBpbnN0ZWFkLlxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4vLyByZXR1cm4gbmV4dCBtYXRjaCBpbiBpbnB1dFxubmV4dDpmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkVPRjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2lucHV0KSB7XG4gICAgICAgICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRva2VuLFxuICAgICAgICAgICAgbWF0Y2gsXG4gICAgICAgICAgICB0ZW1wTWF0Y2gsXG4gICAgICAgICAgICBpbmRleDtcbiAgICAgICAgaWYgKCF0aGlzLl9tb3JlKSB7XG4gICAgICAgICAgICB0aGlzLnl5dGV4dCA9ICcnO1xuICAgICAgICAgICAgdGhpcy5tYXRjaCA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBydWxlcyA9IHRoaXMuX2N1cnJlbnRSdWxlcygpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0ZW1wTWF0Y2ggPSB0aGlzLl9pbnB1dC5tYXRjaCh0aGlzLnJ1bGVzW3J1bGVzW2ldXSk7XG4gICAgICAgICAgICBpZiAodGVtcE1hdGNoICYmICghbWF0Y2ggfHwgdGVtcE1hdGNoWzBdLmxlbmd0aCA+IG1hdGNoWzBdLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICBtYXRjaCA9IHRlbXBNYXRjaDtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5iYWNrdHJhY2tfbGV4ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0aGlzLnRlc3RfbWF0Y2godGVtcE1hdGNoLCBydWxlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbiAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9iYWNrdHJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsgLy8gcnVsZSBhY3Rpb24gY2FsbGVkIHJlamVjdCgpIGltcGx5aW5nIGEgcnVsZSBNSVNtYXRjaC5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVsc2U6IHRoaXMgaXMgYSBsZXhlciBydWxlIHdoaWNoIGNvbnN1bWVzIGlucHV0IHdpdGhvdXQgcHJvZHVjaW5nIGEgdG9rZW4gKGUuZy4gd2hpdGVzcGFjZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMub3B0aW9ucy5mbGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHRva2VuID0gdGhpcy50ZXN0X21hdGNoKG1hdGNoLCBydWxlc1tpbmRleF0pO1xuICAgICAgICAgICAgaWYgKHRva2VuICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVsc2U6IHRoaXMgaXMgYSBsZXhlciBydWxlIHdoaWNoIGNvbnN1bWVzIGlucHV0IHdpdGhvdXQgcHJvZHVjaW5nIGEgdG9rZW4gKGUuZy4gd2hpdGVzcGFjZSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faW5wdXQgPT09IFwiXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkVPRjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRXJyb3IoJ0xleGljYWwgZXJyb3Igb24gbGluZSAnICsgKHRoaXMueXlsaW5lbm8gKyAxKSArICcuIFVucmVjb2duaXplZCB0ZXh0LlxcbicgKyB0aGlzLnNob3dQb3NpdGlvbigpLCB7XG4gICAgICAgICAgICAgICAgdGV4dDogXCJcIixcbiAgICAgICAgICAgICAgICB0b2tlbjogbnVsbCxcbiAgICAgICAgICAgICAgICBsaW5lOiB0aGlzLnl5bGluZW5vXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbi8vIHJldHVybiBuZXh0IG1hdGNoIHRoYXQgaGFzIGEgdG9rZW5cbmxleDpmdW5jdGlvbiBsZXgoKSB7XG4gICAgICAgIHZhciByID0gdGhpcy5uZXh0KCk7XG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxleCgpO1xuICAgICAgICB9XG4gICAgfSxcblxuLy8gYWN0aXZhdGVzIGEgbmV3IGxleGVyIGNvbmRpdGlvbiBzdGF0ZSAocHVzaGVzIHRoZSBuZXcgbGV4ZXIgY29uZGl0aW9uIHN0YXRlIG9udG8gdGhlIGNvbmRpdGlvbiBzdGFjaylcbmJlZ2luOmZ1bmN0aW9uIGJlZ2luKGNvbmRpdGlvbikge1xuICAgICAgICB0aGlzLmNvbmRpdGlvblN0YWNrLnB1c2goY29uZGl0aW9uKTtcbiAgICB9LFxuXG4vLyBwb3AgdGhlIHByZXZpb3VzbHkgYWN0aXZlIGxleGVyIGNvbmRpdGlvbiBzdGF0ZSBvZmYgdGhlIGNvbmRpdGlvbiBzdGFja1xucG9wU3RhdGU6ZnVuY3Rpb24gcG9wU3RhdGUoKSB7XG4gICAgICAgIHZhciBuID0gdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGggLSAxO1xuICAgICAgICBpZiAobiA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmRpdGlvblN0YWNrLnBvcCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uU3RhY2tbMF07XG4gICAgICAgIH1cbiAgICB9LFxuXG4vLyBwcm9kdWNlIHRoZSBsZXhlciBydWxlIHNldCB3aGljaCBpcyBhY3RpdmUgZm9yIHRoZSBjdXJyZW50bHkgYWN0aXZlIGxleGVyIGNvbmRpdGlvbiBzdGF0ZVxuX2N1cnJlbnRSdWxlczpmdW5jdGlvbiBfY3VycmVudFJ1bGVzKCkge1xuICAgICAgICBpZiAodGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGggJiYgdGhpcy5jb25kaXRpb25TdGFja1t0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25zW3RoaXMuY29uZGl0aW9uU3RhY2tbdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGggLSAxXV0ucnVsZXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25zW1wiSU5JVElBTFwiXS5ydWxlcztcbiAgICAgICAgfVxuICAgIH0sXG5cbi8vIHJldHVybiB0aGUgY3VycmVudGx5IGFjdGl2ZSBsZXhlciBjb25kaXRpb24gc3RhdGU7IHdoZW4gYW4gaW5kZXggYXJndW1lbnQgaXMgcHJvdmlkZWQgaXQgcHJvZHVjZXMgdGhlIE4tdGggcHJldmlvdXMgY29uZGl0aW9uIHN0YXRlLCBpZiBhdmFpbGFibGVcbnRvcFN0YXRlOmZ1bmN0aW9uIHRvcFN0YXRlKG4pIHtcbiAgICAgICAgbiA9IHRoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoIC0gMSAtIE1hdGguYWJzKG4gfHwgMCk7XG4gICAgICAgIGlmIChuID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmRpdGlvblN0YWNrW25dO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFwiSU5JVElBTFwiO1xuICAgICAgICB9XG4gICAgfSxcblxuLy8gYWxpYXMgZm9yIGJlZ2luKGNvbmRpdGlvbilcbnB1c2hTdGF0ZTpmdW5jdGlvbiBwdXNoU3RhdGUoY29uZGl0aW9uKSB7XG4gICAgICAgIHRoaXMuYmVnaW4oY29uZGl0aW9uKTtcbiAgICB9LFxuXG4vLyByZXR1cm4gdGhlIG51bWJlciBvZiBzdGF0ZXMgY3VycmVudGx5IG9uIHRoZSBzdGFja1xuc3RhdGVTdGFja1NpemU6ZnVuY3Rpb24gc3RhdGVTdGFja1NpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aDtcbiAgICB9LFxub3B0aW9uczoge1wiZmxleFwiOnRydWV9LFxucGVyZm9ybUFjdGlvbjogZnVuY3Rpb24gYW5vbnltb3VzKHl5LHl5XywkYXZvaWRpbmdfbmFtZV9jb2xsaXNpb25zLFlZX1NUQVJUKSB7XG52YXIgWVlTVEFURT1ZWV9TVEFSVDtcbnN3aXRjaCgkYXZvaWRpbmdfbmFtZV9jb2xsaXNpb25zKSB7XG5jYXNlIDA6cmV0dXJuO1xuYnJlYWs7XG5jYXNlIDE6cmV0dXJuIDEzO1xuYnJlYWs7XG5jYXNlIDI6cmV0dXJuIDIxO1xuYnJlYWs7XG5jYXNlIDM6cmV0dXJuIDc2O1xuYnJlYWs7XG5jYXNlIDQ6cmV0dXJuIDM2O1xuYnJlYWs7XG5jYXNlIDU6cmV0dXJuIDc0O1xuYnJlYWs7XG5jYXNlIDY6cmV0dXJuIDcwO1xuYnJlYWs7XG5jYXNlIDc6cmV0dXJuICdGVUxMJztcbmJyZWFrO1xuY2FzZSA4OnJldHVybiA4NDtcbmJyZWFrO1xuY2FzZSA5OnJldHVybiA3OTtcbmJyZWFrO1xuY2FzZSAxMDpyZXR1cm4gJ09ORSc7XG5icmVhaztcbmNhc2UgMTE6cmV0dXJuIDQ3O1xuYnJlYWs7XG5jYXNlIDEyOnJldHVybiAnTklOJztcbmJyZWFrO1xuY2FzZSAxMzpyZXR1cm4gMTEwO1xuYnJlYWs7XG5jYXNlIDE0OnJldHVybiA0MTtcbmJyZWFrO1xuY2FzZSAxNTpyZXR1cm4gNDA7XG5icmVhaztcbmNhc2UgMTY6cmV0dXJuIDQ5O1xuYnJlYWs7XG5jYXNlIDE3OnJldHVybiA0MjtcbmJyZWFrO1xuY2FzZSAxODpyZXR1cm4gNTA7XG5icmVhaztcbmNhc2UgMTk6cmV0dXJuIDYwO1xuYnJlYWs7XG5jYXNlIDIwOnJldHVybiA2NDtcbmJyZWFrO1xuY2FzZSAyMTpyZXR1cm4gNjE7XG5icmVhaztcbmNhc2UgMjI6cmV0dXJuIDk7XG5icmVhaztcbmNhc2UgMjM6cmV0dXJuIDExO1xuYnJlYWs7XG5jYXNlIDI0OnJldHVybiAxODtcbmJyZWFrO1xuY2FzZSAyNTpyZXR1cm4gJ1dJVEgnO1xuYnJlYWs7XG5jYXNlIDI2OnJldHVybiAxNDtcbmJyZWFrO1xuY2FzZSAyNzpyZXR1cm4gMTExO1xuYnJlYWs7XG5jYXNlIDI4OnJldHVybiAxMDk7XG5icmVhaztcbmNhc2UgMjk6cmV0dXJuIDMzO1xuYnJlYWs7XG5jYXNlIDMwOnJldHVybiA5NjtcbmJyZWFrO1xuY2FzZSAzMTpyZXR1cm4gOTc7XG5icmVhaztcbmNhc2UgMzI6cmV0dXJuIDI3O1xuYnJlYWs7XG5jYXNlIDMzOnJldHVybiA1MTtcbmJyZWFrO1xuY2FzZSAzNDpyZXR1cm4gNTM7XG5icmVhaztcbmNhc2UgMzU6cmV0dXJuIDQzO1xuYnJlYWs7XG5jYXNlIDM2OnJldHVybiA0NDtcbmJyZWFrO1xuY2FzZSAzNzpyZXR1cm4gMTAwO1xuYnJlYWs7XG5jYXNlIDM4OnJldHVybiAxMDE7XG5icmVhaztcbmNhc2UgMzk6cmV0dXJuICc7JztcbmJyZWFrO1xuY2FzZSA0MDpyZXR1cm4gMTA4O1xuYnJlYWs7XG5jYXNlIDQxOnJldHVybiAnPSc7XG5icmVhaztcbmNhc2UgNDI6cmV0dXJuIDU1O1xuYnJlYWs7XG5jYXNlIDQzOnJldHVybiA1NjtcbmJyZWFrO1xuY2FzZSA0NDpyZXR1cm4gNTI7XG5icmVhaztcbmNhc2UgNDU6cmV0dXJuIDU0O1xuYnJlYWs7XG5jYXNlIDQ2OnJldHVybiA2ODtcbmJyZWFrO1xuY2FzZSA0NzpyZXR1cm4gNjc7XG5icmVhaztcbmNhc2UgNDg6cmV0dXJuIDI3O1xuYnJlYWs7XG5jYXNlIDQ5OnJldHVybiAnLyc7XG5icmVhaztcbmNhc2UgNTA6cmV0dXJuIDMyO1xuYnJlYWs7XG5jYXNlIDUxOnJldHVybiAzMDtcbmJyZWFrO1xuY2FzZSA1MjpyZXR1cm4gJz8nO1xuYnJlYWs7XG5jYXNlIDUzOnJldHVybiA5NTtcbmJyZWFrO1xuY2FzZSA1NDpyZXR1cm4gMTAzO1xuYnJlYWs7XG5jYXNlIDU1OnJldHVybiAxMDQ7XG5icmVhaztcbmNhc2UgNTY6cmV0dXJuIDM0O1xuYnJlYWs7XG5jYXNlIDU3OnJldHVybiA1O1xuYnJlYWs7XG5jYXNlIDU4OmNvbnNvbGUubG9nKHl5Xy55eXRleHQpO1xuYnJlYWs7XG59XG59LFxucnVsZXM6IFsvXig/OlxccyspLywvXig/OmZyb218RlJPTSkvLC9eKD86ZmluZHxGSU5EKS8sL14oPzphc3xBUykvLC9eKD86d2hlcmV8V0hFUkUpLywvXig/Om9ufE9OKS8sL14oPzpqb2lufEpPSU4pLywvXig/OmZ1bGx8RlVMTCkvLC9eKD86b3V0ZXJ8T1VURVIpLywvXig/OmxlZnR8TEVGVCkvLC9eKD86b25lfE9ORSkvLC9eKD86aW58SU4pLywvXig/Om5pbnxOSU4pLywvXig/OnRydWV8ZmFsc2UpLywvXig/Om9yfE9SKS8sL14oPzphbmR8QU5EKS8sL14oPzpub3R8Tk9UKS8sL14oPzpub3J8Tk9SKS8sL14oPzpleGlzdHN8RVhJU1RTKS8sL14oPzpsaW1pdHxMSU1JVCkvLC9eKD86c29ydHxTT1JUKS8sL14oPzpieXxCWSkvLC9eKD86aW50b3xJTlRPKS8sL14oPzppbnNlcnR8SU5TRVJUKS8sL14oPzpyZW1vdmV8UkVNT1ZFKS8sL14oPzp3aXRofFdJVEgpLywvXig/OnNldHxTRVQpLywvXig/Om9uY2V8T05DRSkvLC9eKD86KCgoWy1dPyhbLV0/KFswXXwoKFsxLTldKShbMC05XSspKikpKVxcLihbMC05XSspKigoW2VFXSkoWystXT9bMC05XSspKT8pfChcXC4oWzAtOV0rKSgoW2VFXSkoWystXT9bMC05XSspKT8pfCgoWy1dPyhbMF18KChbMS05XSkoWzAtOV0rKSopKSkoKFtlRV0pKFsrLV0/WzAtOV0rKSk/KSl8KFswXVt4WF0oWzAtOWEtZkEtRl0pKyl8KFswXShbMC03XSkrKSkpLywvXig/OigoXCIoKFteXFxcIlxcXFxcXG5cXHJdKyl8KFxcXFwoKChbXFwnXFxcIlxcXFxiZm5ydHZdKXwoW15cXCdcXFwiXFxcXGJmbnJ0djAtOXh1XSkpfCgoPzpbMS03XVswLTddezAsMn18WzAtN117MiwzfSkpfChbeF0oWzAtOWEtZkEtRl0pezJ9KXwoW3VdKFswLTlhLWZBLUZdKXs0fSkpKXwoXFxcXChcXHJcXG58XFxyfFxcbikpKSpcIil8KCcoKFteXFwnXFxcXFxcblxccl0rKXwoXFxcXCgoKFtcXCdcXFwiXFxcXGJmbnJ0dl0pfChbXlxcJ1xcXCJcXFxcYmZucnR2MC05eHVdKSl8KCg/OlsxLTddWzAtN117MCwyfXxbMC03XXsyLDN9KSl8KFt4XShbMC05YS1mQS1GXSl7Mn0pfChbdV0oWzAtOWEtZkEtRl0pezR9KSkpfChcXFxcKFxcclxcbnxcXHJ8XFxuKSkpKicpfChgKChbXlxcYFxcXFxcXG5cXHJdKyl8KFxcXFwoKChbXFwnXFxcIlxcXFxiZm5ydHZdKXwoW15cXCdcXFwiXFxcXGJmbnJ0djAtOXh1XSkpfCgoPzpbMS03XVswLTddezAsMn18WzAtN117MiwzfSkpfChbeF0oWzAtOWEtZkEtRl0pezJ9KXwoW3VdKFswLTlhLWZBLUZdKXs0fSkpKXwoXFxcXChcXHJcXG58XFxyfFxcbikpKSpgKSkpLywvXig/Olxce1xceykvLC9eKD86XFx9XFx9KS8sL14oPzpcXCopLywvXig/Oj4pLywvXig/OjwpLywvXig/OlxcKCkvLC9eKD86XFwpKS8sL14oPzpcXFspLywvXig/OlxcXSkvLC9eKD86OykvLC9eKD86OikvLC9eKD86PSkvLC9eKD86PT0pLywvXig/OiE9KS8sL14oPzo+PSkvLC9eKD86PD0pLywvXig/OlxcKykvLC9eKD86LSkvLC9eKD86XFwqKS8sL14oPzpcXC8pLywvXig/OiEpLywvXig/OiwpLywvXig/OlxcPykvLC9eKD86QCkvLC9eKD86XFx7KS8sL14oPzpcXH0pLywvXig/OihbYS16QS1aJDAtOV9dW2EtekEtWiRfMC05Li1dKikpLywvXig/OiQpLywvXig/Oi4pL10sXG5jb25kaXRpb25zOiB7XCJJTklUSUFMXCI6e1wicnVsZXNcIjpbMCwxLDIsMyw0LDUsNiw3LDgsOSwxMCwxMSwxMiwxMywxNCwxNSwxNiwxNywxOCwxOSwyMCwyMSwyMiwyMywyNCwyNSwyNiwyNywyOCwyOSwzMCwzMSwzMiwzMywzNCwzNSwzNiwzNywzOCwzOSw0MCw0MSw0Miw0Myw0NCw0NSw0Niw0Nyw0OCw0OSw1MCw1MSw1Miw1Myw1NCw1NSw1Niw1Nyw1OF0sXCJpbmNsdXNpdmVcIjp0cnVlfX1cbn0pO1xucmV0dXJuIGxleGVyO1xufSkoKTtcbnBhcnNlci5sZXhlciA9IGxleGVyO1xuZnVuY3Rpb24gUGFyc2VyICgpIHtcbiAgdGhpcy55eSA9IHt9O1xufVxuUGFyc2VyLnByb3RvdHlwZSA9IHBhcnNlcjtwYXJzZXIuUGFyc2VyID0gUGFyc2VyO1xucmV0dXJuIG5ldyBQYXJzZXI7XG59KSgpO1xuXG5cbmlmICh0eXBlb2YgcmVxdWlyZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG5leHBvcnRzLnBhcnNlciA9IFBhcnNlckltcGw7XG5leHBvcnRzLlBhcnNlciA9IFBhcnNlckltcGwuUGFyc2VyO1xuZXhwb3J0cy5wYXJzZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFBhcnNlckltcGwucGFyc2UuYXBwbHkoUGFyc2VySW1wbCwgYXJndW1lbnRzKTsgfTtcbmV4cG9ydHMubWFpbiA9IGZ1bmN0aW9uIGNvbW1vbmpzTWFpbihhcmdzKSB7XG4gICAgaWYgKCFhcmdzWzFdKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdVc2FnZTogJythcmdzWzBdKycgRklMRScpO1xuICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgfVxuICAgIHZhciBzb3VyY2UgPSByZXF1aXJlKCdmcycpLnJlYWRGaWxlU3luYyhyZXF1aXJlKCdwYXRoJykubm9ybWFsaXplKGFyZ3NbMV0pLCBcInV0ZjhcIik7XG4gICAgcmV0dXJuIGV4cG9ydHMucGFyc2VyLnBhcnNlKHNvdXJjZSk7XG59O1xuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHJlcXVpcmUubWFpbiA9PT0gbW9kdWxlKSB7XG4gIGV4cG9ydHMubWFpbihwcm9jZXNzLmFyZ3Yuc2xpY2UoMSkpO1xufVxufSJdfQ==