"use strict";

/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ParserImpl = function () {
    var o = function o(k, v, _o, l) {
        for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {}return _o;
    },
        $V0 = [1, 19],
        $V1 = [1, 20],
        $V2 = [1, 21],
        $V3 = [12, 15, 18, 21, 44, 68, 72, 82, 84, 118],
        $V4 = [1, 24],
        $V5 = [1, 33],
        $V6 = [1, 32],
        $V7 = [1, 39],
        $V8 = [1, 40],
        $V9 = [1, 41],
        $Va = [5, 117],
        $Vb = [1, 46],
        $Vc = [1, 50],
        $Vd = [1, 57],
        $Ve = [1, 58],
        $Vf = [1, 59],
        $Vg = [5, 32, 33, 39, 44, 48, 49, 50, 52, 68, 72, 78, 82, 87, 92, 105, 109, 117],
        $Vh = [1, 80],
        $Vi = [5, 68, 72, 78, 87, 92],
        $Vj = [1, 82],
        $Vk = [5, 39, 44, 68, 72, 78, 87, 92],
        $Vl = [35, 41, 42, 43, 104],
        $Vm = [5, 32, 33, 39, 44, 48, 49, 50, 52, 55, 57, 58, 59, 60, 61, 62, 63, 64, 68, 72, 78, 82, 87, 92, 105, 109, 117],
        $Vn = [39, 105],
        $Vo = [39, 109],
        $Vp = [5, 32, 33, 68, 72, 78, 82, 87, 92, 117],
        $Vq = [5, 32, 33, 39, 68, 72, 78, 82, 87, 92, 117],
        $Vr = [1, 95],
        $Vs = [1, 96],
        $Vt = [1, 97],
        $Vu = [1, 98],
        $Vv = [1, 99],
        $Vw = [1, 100],
        $Vx = [5, 32, 33, 39, 48, 49, 50, 52, 68, 72, 78, 82, 87, 92, 117],
        $Vy = [42, 103, 104, 108, 115, 116],
        $Vz = [5, 78, 87, 92],
        $VA = [1, 142],
        $VB = [1, 143],
        $VC = [5, 32, 33, 39, 48, 50, 52, 68, 72, 78, 82, 87, 92, 117],
        $VD = [5, 32, 33, 39, 50, 52, 68, 72, 78, 82, 87, 92, 117],
        $VE = [5, 68, 72, 78, 82, 87, 92],
        $VF = [1, 161],
        $VG = [1, 162],
        $VH = [5, 39, 68, 72, 78, 82, 87, 92],
        $VI = [68, 72, 82];
    var parser = { trace: function trace() {},
        yy: {},
        symbols_: { "error": 2, "statement": 3, "insert_statement": 4, "EOF": 5, "update_statement": 6, "remove_statement": 7, "find_statement": 8, "find_and_modify_statement": 9, "INTO": 10, "collection": 11, "INSERT": 12, "value_expression": 13, "FROM": 14, "SET": 15, "update_statement_option0": 16, "update_statement_option1": 17, "REMOVE": 18, "remove_statement_option0": 19, "remove_statement_option1": 20, "FIND": 21, "field_selection": 22, "find_statement_option0": 23, "find_statement_repetition0": 24, "find_statement_repetition1": 25, "version": 26, "where_expression": 27, "update_or_upsert": 28, "find_and_modify_statement_option0": 29, "NEW": 30, "ORIGINAL": 31, "UPDATE": 32, "UPSERT": 33, "field_references": 34, "*": 35, "context_reference": 36, "object_literal": 37, "field_reference": 38, ",": 39, "field_name": 40, "!": 41, "STRING_LITERAL": 42, "IDENTIFIER": 43, "WHERE": 44, "filters": 45, "filter": 46, "logical_filter": 47, "AND": 48, "OR": 49, "NOR": 50, "(": 51, ")": 52, "logical_operator": 53, "filter_operator": 54, "IN": 55, "array_literal": 56, "NOT": 57, "EXISTS": 58, ">": 59, ">=": 60, "<": 61, "<=": 62, "==": 63, "!=": 64, "modifiers": 65, "modifiers_group0": 66, "limit_clause": 67, "LIMIT": 68, "BY": 69, "number_literal": 70, "sort_clause": 71, "SORT": 72, "field_sorts": 73, "field_sort": 74, "-": 75, "+": 76, "joins": 77, "JOIN": 78, "field_select_expression": 79, "joins_option0": 80, "joins_repetition0": 81, "ON": 82, "join_condition": 83, "AS": 84, "joins_option1": 85, "joins_repetition1": 86, "LEFT": 87, "joins_option2": 88, "joins_repetition2": 89, "joins_option3": 90, "joins_repetition3": 91, "OUTER": 92, "joins_option4": 93, "joins_repetition4": 94, "joins_option5": 95, "joins_repetition5": 96, "join_condition_group0": 97, "join_condition_group1": 98, "collection_group0": 99, "identifier": 100, "current_reference": 101, "literal": 102, "@": 103, "{": 104, "}": 105, "string_literal": 106, "boolean_literal": 107, "[": 108, "]": 109, "value_list": 110, "key_value_pairs": 111, "key_value_pair": 112, "key_value_pair_group0": 113, ":": 114, "NUMBER_LITERAL": 115, "BOOLEAN": 116, "ONCE": 117, "where_experession": 118, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 5: "EOF", 10: "INTO", 12: "INSERT", 14: "FROM", 15: "SET", 18: "REMOVE", 21: "FIND", 30: "NEW", 31: "ORIGINAL", 32: "UPDATE", 33: "UPSERT", 35: "*", 39: ",", 41: "!", 42: "STRING_LITERAL", 43: "IDENTIFIER", 44: "WHERE", 48: "AND", 49: "OR", 50: "NOR", 51: "(", 52: ")", 55: "IN", 57: "NOT", 58: "EXISTS", 59: ">", 60: ">=", 61: "<", 62: "<=", 63: "==", 64: "!=", 68: "LIMIT", 69: "BY", 72: "SORT", 75: "-", 76: "+", 78: "JOIN", 79: "field_select_expression", 82: "ON", 84: "AS", 87: "LEFT", 92: "OUTER", 103: "@", 104: "{", 105: "}", 108: "[", 109: "]", 114: ":", 115: "NUMBER_LITERAL", 116: "BOOLEAN", 117: "ONCE", 118: "where_experession" },
        productions_: [0, [3, 2], [3, 2], [3, 2], [3, 2], [3, 2], [4, 4], [6, 6], [7, 5], [8, 7], [9, 9], [26, 1], [26, 1], [28, 1], [28, 1], [22, 1], [22, 1], [22, 1], [22, 1], [34, 1], [34, 3], [38, 1], [38, 2], [40, 1], [40, 1], [27, 2], [27, 2], [45, 1], [45, 3], [45, 1], [47, 3], [47, 3], [47, 3], [47, 3], [47, 3], [47, 3], [47, 3], [47, 3], [47, 3], [47, 3], [47, 3], [47, 3], [47, 3], [53, 1], [53, 1], [53, 1], [46, 3], [46, 3], [46, 4], [46, 2], [46, 3], [54, 1], [54, 1], [54, 1], [54, 1], [54, 1], [54, 1], [65, 1], [67, 3], [71, 3], [73, 1], [73, 3], [74, 2], [74, 2], [77, 8], [77, 10], [77, 9], [77, 11], [77, 9], [77, 11], [83, 3], [11, 1], [100, 1], [13, 1], [13, 1], [13, 1], [101, 2], [36, 5], [102, 1], [102, 1], [102, 1], [102, 1], [102, 1], [56, 2], [56, 3], [110, 1], [110, 3], [37, 2], [37, 3], [111, 1], [111, 3], [112, 3], [106, 1], [70, 1], [107, 1], [16, 0], [16, 1], [17, 0], [17, 1], [19, 0], [19, 1], [20, 0], [20, 1], [23, 0], [23, 1], [24, 0], [24, 2], [25, 0], [25, 2], [29, 0], [29, 1], [66, 1], [66, 1], [80, 0], [80, 1], [81, 0], [81, 2], [85, 0], [85, 1], [86, 0], [86, 2], [88, 0], [88, 1], [89, 0], [89, 2], [90, 0], [90, 1], [91, 0], [91, 2], [93, 0], [93, 1], [94, 0], [94, 2], [95, 0], [95, 1], [96, 0], [96, 2], [97, 1], [97, 1], [98, 1], [98, 1], [99, 1], [99, 1], [99, 1], [113, 1], [113, 1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:case 2:case 3:case 4:case 5:
                    this.$ = $$[$0 - 1];return this.$;
                    break;
                case 6:
                    this.$ = new yy.ast.InsertStatement($$[$0 - 2], $$[$0], this._$);
                    break;
                case 7:
                    this.$ = new yy.ast.UpdateStatement($$[$0 - 4], $$[$0 - 2], $$[$0 - 1] || [], $$[$0] || false, this._$);
                    break;
                case 8:
                    this.$ = new yy.ast.RemoveStatement($$[$0 - 3], $$[$0 - 1] || [], $$[$0] || false, this._$);
                    break;
                case 9:
                    this.$ = new yy.ast.FindStatement($$[$0 - 5], $$[$0 - 3], $$[$0 - 2] || [], $$[$0 - 1] || [], $$[$0] || [], this._$);
                    break;
                case 10:
                    this.$ = new yy.ast.FindAndModifyStatement($$[$0 - 7], $$[$0 - 5], $$[$0 - 4], $$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], this._$);

                    break;
                case 11:
                    this.$ = true;
                    break;
                case 12:
                    this.$ = false;
                    break;
                case 13:
                    this.$ = false;
                    break;
                case 14:
                    this.$ = true;
                    break;
                case 15:
                    this.$ = $$[$0];
                    break;
                case 16:
                    this.$ = [new yy.ast.AllFieldsReference(this._$)];
                    break;
                case 17:case 18:
                    this.$ = [$$[$0]];
                    break;
                case 19:case 27:case 89:
                    this.$ = [$$[$0]];
                    break;
                case 20:case 90:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 21:
                    this.$ = new yy.ast.FieldReference($$[$0], true, this._$);
                    break;
                case 22:
                    this.$ = new yy.ast.FieldReference($$[$0], false, this._$);
                    break;
                case 23:
                    this.$ = $$[$0].substring(1, $$[$0].length - 1);
                    break;
                case 24:
                    this.$ = $$[$0];
                    break;
                case 25:
                    this.$ = $$[$0];
                    break;
                case 26:
                    this.$ = [$$[$0]];
                    break;
                case 28:
                    this.$ = $$[$0 - 2];
                    this.$.push($$[$0]);

                    break;
                case 29:case 85:
                    this.$ = [$$[$0]];
                    break;
                case 30:case 31:case 32:case 33:case 34:case 35:case 36:case 37:case 38:
                    this.$ = new yy.ast.LogicFilter($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 39:case 40:case 41:
                    this.$ = new yy.ast.LogicFilter($$[$0 - 2], $$[$0 - 1], $$[$0]);
                    break;
                case 42:
                    this.$ = $$[$0 - 1];
                    break;
                case 43:
                    this.$ = '$or';
                    break;
                case 44:
                    this.$ = '$and';
                    break;
                case 45:
                    this.$ = '$nor';
                    break;
                case 46:
                    this.$ = new yy.ast.Filter($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 47:
                    this.$ = new yy.ast.Filter($$[$0 - 2], '$in', $$[$0], this._$);
                    break;
                case 48:
                    this.$ = new yy.ast.Filter($$[$0 - 3], '$nin', $$[$0], this._$);
                    break;
                case 49:
                    this.$ = new yy.ast.Filter($$[$0 - 1], '$exists', new yy.ast.BooleanLiteral(true, this._$));
                    break;
                case 50:
                    this.$ = new yy.ast.Filter($$[$0 - 2], '$exists', new yy.ast.BooleanLiteral(false, this._$));
                    break;
                case 51:
                    this.$ = '$gt';
                    break;
                case 52:
                    this.$ = '$gte';
                    break;
                case 53:
                    this.$ = '$lt';
                    break;
                case 54:
                    this.$ = '$lte';
                    break;
                case 55:
                    this.$ = '$eq';
                    break;
                case 56:
                    this.$ = '$ne';
                    break;
                case 58:
                    this.$ = new yy.ast.LimitClause($$[$0 - 1], this._$);
                    break;
                case 59:
                    this.$ = new yy.ast.SortClause($$[$0], this._$);
                    break;
                case 60:
                    this.$ = [$$[$0]];
                    break;
                case 61:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 62:
                    this.$ = new yy.ast.FieldSort($$[$0], -1, this._$);
                    break;
                case 63:
                    this.$ = new yy.ast.FieldSort($$[$0], 1, this._$);
                    break;
                case 64:
                    this.$ = new yy.ast.InnerJoinStatement($$[$0 - 6], $$[$0 - 4], $$[$0 - 4], $$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0], this._$);

                    break;
                case 65:
                    this.$ = new yy.ast.InnerJoinStatement($$[$0 - 8], $$[$0 - 6], $$[$0 - 4], $$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0], this._$);

                    break;
                case 66:
                    this.$ = new yy.ast.LeftJoinStatement($$[$0 - 6], $$[$0 - 4], $$[$0 - 4], $$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0], this._$);

                    break;
                case 67:
                    this.$ = new yy.ast.LeftJoinStatement($$[$0 - 8], $$[$0 - 6], $$[$0 - 4], $$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0], this._$);

                    break;
                case 68:
                    this.$ = new yy.ast.OuterJoinStatement($$[$0 - 6], $$[$0 - 4], $$[$0 - 4], $$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0], this._$);

                    break;
                case 69:
                    this.$ = new yy.ast.OuterJoinStatement($$[$0 - 8], $$[$0 - 6], $$[$0 - 4], $$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0], this._$);

                    break;
                case 70:
                    this.$ = new yy.ast.JoinCondition($$[$0 - 2], $$[$0], this._$);
                    break;
                case 72:
                    this.$ = new yy.ast.Identifier($$[$0], this._$);
                    break;
                case 76:
                    this.$ = new yy.ast.ContextReference($$[$0], this._$);
                    break;
                case 77:
                    this.$ = new yy.ast.ContextReference($$[$0 - 3], this._$);
                    break;
                case 83:
                    this.$ = new yy.ast.ArrayLiteral([], this._$);
                    break;
                case 84:
                    this.$ = new yy.ast.ArrayLiteral($$[$0 - 1], this._$);
                    break;
                case 86:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 87:
                    this.$ = new yy.ast.ObjectLiteral([], this._$);
                    break;
                case 88:
                    this.$ = new yy.ast.ObjectLiteral($$[$0 - 1], this._$);
                    break;
                case 91:
                    this.$ = { key: $$[$0 - 2], value: $$[$0] };
                    break;
                case 92:
                    this.$ = new yy.ast.StringLiteral($$[$0], this._$);
                    break;
                case 93:
                    this.$ = new yy.ast.NumberLiteral(yy.help.parseNumber($$[$0]), this._$);
                    break;
                case 94:
                    this.$ = new yy.ast.BooleanLiteral(yy.help.parseBoolean($$[$0]), this._$);
                    break;
                case 105:case 107:case 115:case 119:case 123:case 127:case 131:case 135:
                    this.$ = [];
                    break;
                case 106:case 108:case 116:case 120:case 124:case 128:case 132:case 136:
                    $$[$0 - 1].push($$[$0]);
                    break;
            }
        },
        table: [{ 3: 1, 4: 2, 6: 3, 7: 4, 8: 5, 9: 6, 10: [1, 7], 14: [1, 8] }, { 1: [3] }, { 5: [1, 9] }, { 5: [1, 10] }, { 5: [1, 11] }, { 5: [1, 12] }, { 5: [1, 13] }, { 11: 14, 36: 18, 42: $V0, 43: $V1, 99: 15, 100: 17, 104: $V2, 106: 16 }, { 11: 22, 36: 18, 42: $V0, 43: $V1, 99: 15, 100: 17, 104: $V2, 106: 16 }, { 1: [2, 1] }, { 1: [2, 2] }, { 1: [2, 3] }, { 1: [2, 4] }, { 1: [2, 5] }, { 12: [1, 23] }, o($V3, [2, 71]), o($V3, [2, 141]), o($V3, [2, 142]), o($V3, [2, 143]), o([5, 12, 15, 18, 21, 32, 33, 39, 44, 48, 49, 50, 52, 63, 68, 72, 78, 82, 84, 87, 92, 105, 109, 114, 117, 118], [2, 92]), o([5, 12, 15, 18, 21, 44, 63, 68, 72, 78, 82, 84, 87, 92, 114, 118], [2, 72]), { 104: $V4 }, { 15: [1, 25], 18: [1, 26], 21: [1, 27] }, { 13: 28, 36: 29, 37: 35, 42: $V0, 56: 34, 70: 37, 101: 30, 102: 31, 103: $V5, 104: $V6, 106: 36, 107: 38, 108: $V7, 115: $V8, 116: $V9 }, { 43: [1, 42] }, { 13: 43, 36: 29, 37: 35, 42: $V0, 56: 34, 70: 37, 101: 30, 102: 31, 103: $V5, 104: $V6, 106: 36, 107: 38, 108: $V7, 115: $V8, 116: $V9 }, o($Va, [2, 99], { 19: 44, 27: 45, 44: $Vb }), { 22: 47, 26: 48, 30: [1, 53], 31: [1, 54], 34: 49, 35: $Vc, 36: 51, 37: 52, 38: 55, 40: 56, 41: $Vd, 42: $Ve, 43: $Vf, 104: $V6 }, { 5: [2, 6] }, o($Vg, [2, 73]), o($Vg, [2, 74]), o($Vg, [2, 75]), { 42: $V0, 43: $V1, 100: 64, 104: $V4, 105: [1, 60], 106: 65, 111: 61, 112: 62, 113: 63 }, { 40: 66, 42: $Ve, 43: $Vf }, o($Vg, [2, 78]), o($Vg, [2, 79]), o($Vg, [2, 80]), o($Vg, [2, 81]), o($Vg, [2, 82]), { 13: 69, 36: 29, 37: 35, 42: $V0, 56: 34, 70: 37, 101: 30, 102: 31, 103: $V5, 104: $V6, 106: 36, 107: 38, 108: $V7, 109: [1, 67], 110: 68, 115: $V8, 116: $V9 }, o($Vg, [2, 93]), o($Vg, [2, 94]), { 105: [1, 70] }, o($Va, [2, 95], { 16: 71, 27: 72, 44: $Vb }), { 5: [2, 101], 20: 73, 117: [1, 74] }, o($Va, [2, 100]), { 36: 76, 40: 79, 42: $Ve, 43: $Vf, 45: 75, 46: 77, 47: 78, 51: $Vh, 104: $V2 }, o($Vi, [2, 103], { 23: 81, 27: 83, 39: $Vj, 44: $Vb }), { 22: 84, 34: 49, 35: $Vc, 36: 51, 37: 52, 38: 55, 40: 56, 41: $Vd, 42: $Ve, 43: $Vf, 104: $V6 }, o($Vk, [2, 15]), o($Vk, [2, 16]), o($Vk, [2, 17]), o($Vk, [2, 18]), o($Vl, [2, 11]), o($Vl, [2, 12]), o($Vk, [2, 19]), o($Vk, [2, 21]), { 40: 85, 42: $Ve, 43: $Vf }, o($Vm, [2, 23]), o($Vm, [2, 24]), o($Vg, [2, 87]), { 39: [1, 87], 105: [1, 86] }, o($Vn, [2, 89]), { 114: [1, 88] }, { 114: [2, 144] }, { 114: [2, 145] }, o($Vg, [2, 76]), o($Vg, [2, 83]), { 39: [1, 90], 109: [1, 89] }, o($Vo, [2, 85]), { 105: [1, 91] }, { 5: [2, 97], 17: 92, 117: [1, 93] }, o($Va, [2, 96]), { 5: [2, 8] }, { 5: [2, 102] }, o($Vp, [2, 25], { 39: [1, 94] }), o($Vp, [2, 26]), o($Vq, [2, 27], { 48: $Vr, 49: $Vs, 50: $Vt }), o($Vq, [2, 29], { 48: $Vu, 49: $Vv, 50: $Vw }), { 54: 101, 55: [1, 102], 57: [1, 103], 58: [1, 104], 59: [1, 105], 60: [1, 106], 61: [1, 107], 62: [1, 108], 63: [1, 109], 64: [1, 110] }, { 40: 79, 42: $Ve, 43: $Vf, 46: 112, 47: 111, 51: $Vh }, o($Vi, [2, 105], { 24: 113 }), { 38: 114, 40: 56, 41: $Vd, 42: $Ve, 43: $Vf }, o($Vi, [2, 104]), { 27: 115, 39: $Vj, 44: $Vb }, o($Vk, [2, 22]), o($Vg, [2, 88]), { 42: $V0, 43: $V1, 100: 64, 106: 65, 112: 116, 113: 63 }, { 13: 117, 36: 29, 37: 35, 42: $V0, 56: 34, 70: 37, 101: 30, 102: 31, 103: $V5, 104: $V6, 106: 36, 107: 38, 108: $V7, 115: $V8, 116: $V9 }, o($Vg, [2, 84]), { 13: 118, 36: 29, 37: 35, 42: $V0, 56: 34, 70: 37, 101: 30, 102: 31, 103: $V5, 104: $V6, 106: 36, 107: 38, 108: $V7, 115: $V8, 116: $V9 }, o([5, 12, 15, 18, 21, 32, 33, 39, 44, 48, 49, 50, 52, 68, 72, 78, 82, 84, 87, 92, 105, 109, 117, 118], [2, 77]), { 5: [2, 7] }, { 5: [2, 98] }, { 40: 79, 42: $Ve, 43: $Vf, 46: 119 }, { 40: 79, 42: $Ve, 43: $Vf, 46: 120, 47: 121, 51: $Vh }, { 40: 79, 42: $Ve, 43: $Vf, 46: 122, 47: 123, 51: $Vh }, { 40: 79, 42: $Ve, 43: $Vf, 46: 124, 47: 125, 51: $Vh }, { 40: 79, 42: $Ve, 43: $Vf, 46: 126, 47: 127, 51: $Vh }, { 40: 79, 42: $Ve, 43: $Vf, 46: 128, 47: 129, 51: $Vh }, { 40: 79, 42: $Ve, 43: $Vf, 46: 130, 47: 131, 51: $Vh }, { 13: 132, 36: 29, 37: 35, 42: $V0, 56: 34, 70: 37, 101: 30, 102: 31, 103: $V5, 104: $V6, 106: 36, 107: 38, 108: $V7, 115: $V8, 116: $V9 }, { 56: 133, 108: $V7 }, { 55: [1, 134], 58: [1, 135] }, o($Vx, [2, 49]), o($Vy, [2, 51]), o($Vy, [2, 52]), o($Vy, [2, 53]), o($Vy, [2, 54]), o($Vy, [2, 55]), o($Vy, [2, 56]), { 48: $Vu, 49: $Vv, 50: $Vw, 52: [1, 136] }, { 48: $Vr, 49: $Vs, 50: $Vt }, o($Vz, [2, 107], { 25: 137, 65: 138, 66: 139, 67: 140, 71: 141, 68: $VA, 72: $VB }), o($Vk, [2, 20]), { 28: 144, 32: [1, 145], 33: [1, 146] }, o($Vn, [2, 90]), o($Vn, [2, 91]), o($Vo, [2, 86]), o($Vq, [2, 28]), o($VC, [2, 30], { 49: $Vs }), o($VC, [2, 33], { 49: $Vv }), o($Vx, [2, 31]), o($Vx, [2, 34]), o($VD, [2, 32], { 48: $Vr, 49: $Vs }), o($VD, [2, 35], { 48: $Vu, 49: $Vv }), o($VC, [2, 36], { 49: $Vs }), o($VC, [2, 39], { 49: $Vv }), o($Vx, [2, 37]), o($Vx, [2, 40]), o($VD, [2, 38], { 48: $Vr, 49: $Vs }), o($VD, [2, 41], { 48: $Vu, 49: $Vv }), o($Vx, [2, 46]), o($Vx, [2, 47]), { 56: 147, 108: $V7 }, o($Vx, [2, 50]), o($Vx, [2, 42]), { 5: [2, 9], 77: 148, 78: [1, 149], 87: [1, 150], 92: [1, 151] }, o($Vi, [2, 106]), o($VE, [2, 57]), o($VE, [2, 111]), o($VE, [2, 112]), { 69: [1, 152] }, { 69: [1, 153] }, { 13: 154, 36: 29, 37: 35, 42: $V0, 56: 34, 70: 37, 101: 30, 102: 31, 103: $V5, 104: $V6, 106: 36, 107: 38, 108: $V7, 115: $V8, 116: $V9 }, o($Vy, [2, 13]), o($Vy, [2, 14]), o($Vx, [2, 48]), o($Vz, [2, 108]), { 79: [1, 155] }, { 78: [1, 156] }, { 78: [1, 157] }, { 70: 158, 115: $V8 }, { 73: 159, 74: 160, 75: $VF, 76: $VG }, { 5: [2, 109], 29: 163, 71: 164, 72: $VB }, { 14: [1, 165] }, { 79: [1, 166] }, { 79: [1, 167] }, o($VE, [2, 58]), o($VE, [2, 59], { 39: [1, 168] }), o($VH, [2, 60]), { 40: 169, 42: $Ve, 43: $Vf }, { 40: 170, 42: $Ve, 43: $Vf }, { 5: [2, 10] }, { 5: [2, 110] }, { 11: 171, 36: 18, 42: $V0, 43: $V1, 99: 15, 100: 17, 104: $V2, 106: 16 }, { 14: [1, 172] }, { 14: [1, 173] }, { 74: 174, 75: $VF, 76: $VG }, o($VH, [2, 62]), o($VH, [2, 63]), o($VI, [2, 113], { 80: 175, 27: 177, 44: $Vb, 84: [1, 176] }), { 11: 178, 36: 18, 42: $V0, 43: $V1, 99: 15, 100: 17, 104: $V2, 106: 16 }, { 11: 179, 36: 18, 42: $V0, 43: $V1, 99: 15, 100: 17, 104: $V2, 106: 16 }, o($VH, [2, 61]), o($VI, [2, 115], { 81: 180 }), { 11: 181, 36: 18, 42: $V0, 43: $V1, 99: 15, 100: 17, 104: $V2, 106: 16 }, o($VI, [2, 114]), o($VI, [2, 121], { 88: 182, 27: 184, 44: $Vb, 84: [1, 183] }), o($VI, [2, 129], { 93: 185, 84: [1, 186], 118: [1, 187] }), { 65: 189, 66: 139, 67: 140, 68: $VA, 71: 141, 72: $VB, 82: [1, 188] }, o($VI, [2, 117], { 85: 190, 27: 191, 44: $Vb }), o($VI, [2, 123], { 89: 192 }), { 11: 193, 36: 18, 42: $V0, 43: $V1, 99: 15, 100: 17, 104: $V2, 106: 16 }, o($VI, [2, 122]), o($VI, [2, 131], { 94: 194 }), { 11: 195, 36: 18, 42: $V0, 43: $V1, 99: 15, 100: 17, 104: $V2, 106: 16 }, o($VI, [2, 130]), { 42: $V0, 43: $V1, 83: 196, 97: 197, 100: 199, 106: 198 }, o($VI, [2, 116]), o($VI, [2, 119], { 86: 200 }), o($VI, [2, 118]), { 65: 202, 66: 139, 67: 140, 68: $VA, 71: 141, 72: $VB, 82: [1, 201] }, o($VI, [2, 125], { 90: 203, 27: 204, 44: $Vb }), { 65: 206, 66: 139, 67: 140, 68: $VA, 71: 141, 72: $VB, 82: [1, 205] }, o($VI, [2, 133], { 95: 207, 118: [1, 208] }), o($Vz, [2, 64]), { 63: [1, 209] }, { 63: [2, 137] }, { 63: [2, 138] }, { 65: 211, 66: 139, 67: 140, 68: $VA, 71: 141, 72: $VB, 82: [1, 210] }, { 42: $V0, 43: $V1, 83: 212, 97: 197, 100: 199, 106: 198 }, o($VI, [2, 124]), o($VI, [2, 127], { 91: 213 }), o($VI, [2, 126]), { 42: $V0, 43: $V1, 83: 214, 97: 197, 100: 199, 106: 198 }, o($VI, [2, 132]), o($VI, [2, 135], { 96: 215 }), o($VI, [2, 134]), { 42: $V0, 43: $V1, 98: 216, 100: 218, 106: 217 }, { 42: $V0, 43: $V1, 83: 219, 97: 197, 100: 199, 106: 198 }, o($VI, [2, 120]), o($Vz, [2, 66]), { 65: 221, 66: 139, 67: 140, 68: $VA, 71: 141, 72: $VB, 82: [1, 220] }, o($Vz, [2, 68]), { 65: 223, 66: 139, 67: 140, 68: $VA, 71: 141, 72: $VB, 82: [1, 222] }, o($Vz, [2, 70]), o($Vz, [2, 139]), o($Vz, [2, 140]), o($Vz, [2, 65]), { 42: $V0, 43: $V1, 83: 224, 97: 197, 100: 199, 106: 198 }, o($VI, [2, 128]), { 42: $V0, 43: $V1, 83: 225, 97: 197, 100: 199, 106: 198 }, o($VI, [2, 136]), o($Vz, [2, 67]), o($Vz, [2, 69])],
        defaultActions: { 9: [2, 1], 10: [2, 2], 11: [2, 3], 12: [2, 4], 13: [2, 5], 28: [2, 6], 64: [2, 144], 65: [2, 145], 73: [2, 8], 74: [2, 102], 92: [2, 7], 93: [2, 98], 163: [2, 10], 164: [2, 110], 198: [2, 137], 199: [2, 138] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                var _parseError = function _parseError(msg, hash) {
                    this.message = msg;
                    this.hash = hash;
                };

                _parseError.prototype = Error;

                throw new _parseError(str, hash);
            }
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                tstack = [],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = '',
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack: var lex = function lex() {
                var token;
                token = lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            var symbol,
                preErrorSymbol,
                state,
                action,
                a,
                r,
                yyval = {},
                p,
                len,
                newState,
                expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        } };
    /* generated by jison-lex 0.3.4 */
    var lexer = function () {
        var lexer = {

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function setInput(input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

            // consumes and returns one char from the input
            input: function input() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function unput(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function more() {
                this._more = true;
                return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function reject() {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
                return this;
            },

            // retain first n characters of the match
            less: function less(n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function pastInput() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function upcomingInput() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function showPosition() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function test_match(match, indexed_rule) {
                var token, lines, backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

            // return next match in input
            next: function next() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token, match, tempMatch, index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: { "flex": true },
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        return;
                        break;
                    case 1:
                        return 14;
                        break;
                    case 2:
                        return 21;
                        break;
                    case 3:
                        return 84;
                        break;
                    case 4:
                        return 44;
                        break;
                    case 5:
                        return 82;
                        break;
                    case 6:
                        return 78;
                        break;
                    case 7:
                        return 'FULL';
                        break;
                    case 8:
                        return 92;
                        break;
                    case 9:
                        return 87;
                        break;
                    case 10:
                        return 'ONE';
                        break;
                    case 11:
                        return 55;
                        break;
                    case 12:
                        return 'NIN';
                        break;
                    case 13:
                        return 116;
                        break;
                    case 14:
                        return 49;
                        break;
                    case 15:
                        return 48;
                        break;
                    case 16:
                        return 57;
                        break;
                    case 17:
                        return 50;
                        break;
                    case 18:
                        return 58;
                        break;
                    case 19:
                        return 68;
                        break;
                    case 20:
                        return 72;
                        break;
                    case 21:
                        return 69;
                        break;
                    case 22:
                        return 10;
                        break;
                    case 23:
                        return 12;
                        break;
                    case 24:
                        return 18;
                        break;
                    case 25:
                        return 32;
                        break;
                    case 26:
                        return 33;
                        break;
                    case 27:
                        return 'WITH';
                        break;
                    case 28:
                        return 15;
                        break;
                    case 29:
                        return 117;
                        break;
                    case 30:
                        return 31;
                        break;
                    case 31:
                        return 30;
                        break;
                    case 32:
                        return 115;
                        break;
                    case 33:
                        return 42;
                        break;
                    case 34:
                        return 35;
                        break;
                    case 35:
                        return 59;
                        break;
                    case 36:
                        return 61;
                        break;
                    case 37:
                        return 51;
                        break;
                    case 38:
                        return 52;
                        break;
                    case 39:
                        return 108;
                        break;
                    case 40:
                        return 109;
                        break;
                    case 41:
                        return ';';
                        break;
                    case 42:
                        return 114;
                        break;
                    case 43:
                        return '=';
                        break;
                    case 44:
                        return 63;
                        break;
                    case 45:
                        return 64;
                        break;
                    case 46:
                        return 60;
                        break;
                    case 47:
                        return 62;
                        break;
                    case 48:
                        return 76;
                        break;
                    case 49:
                        return 75;
                        break;
                    case 50:
                        return 35;
                        break;
                    case 51:
                        return '/';
                        break;
                    case 52:
                        return 41;
                        break;
                    case 53:
                        return 39;
                        break;
                    case 54:
                        return '?';
                        break;
                    case 55:
                        return 103;
                        break;
                    case 56:
                        return 104;
                        break;
                    case 57:
                        return 105;
                        break;
                    case 58:
                        return 43;
                        break;
                    case 59:
                        return 5;
                        break;
                    case 60:
                        console.log(yy_.yytext);
                        break;
                }
            },
            rules: [/^(?:\s+)/, /^(?:from|FROM)/, /^(?:find|FIND)/, /^(?:as|AS)/, /^(?:where|WHERE)/, /^(?:on|ON)/, /^(?:join|JOIN)/, /^(?:full|FULL)/, /^(?:outer|OUTER)/, /^(?:left|LEFT)/, /^(?:one|ONE)/, /^(?:in|IN)/, /^(?:nin|NIN)/, /^(?:true|false)/, /^(?:or|OR)/, /^(?:and|AND)/, /^(?:not|NOT)/, /^(?:nor|NOR)/, /^(?:exists|EXISTS)/, /^(?:limit|LIMIT)/, /^(?:sort|SORT)/, /^(?:by|BY)/, /^(?:into|INTO)/, /^(?:insert|INSERT)/, /^(?:remove|REMOVE)/, /^(?:update|UPDATE)/, /^(?:upsert|UPSERT)/, /^(?:with|WITH)/, /^(?:set|SET)/, /^(?:once|ONCE)/, /^(?:original|ORIGINAL)/, /^(?:new|NEW)/, /^(?:((([-]?([-]?([0]|(([1-9])([0-9]+)*)))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([-]?([0]|(([1-9])([0-9]+)*)))(([eE])([+-]?[0-9]+))?))|([0][xX]([0-9a-fA-F])+)|([0]([0-7])+)))/, /^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')|(`(([^\`\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*`)))/, /^(?:\*)/, /^(?:>)/, /^(?:<)/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:;)/, /^(?::)/, /^(?:=)/, /^(?:==)/, /^(?:!=)/, /^(?:>=)/, /^(?:<=)/, /^(?:\+)/, /^(?:-)/, /^(?:\*)/, /^(?:\/)/, /^(?:!)/, /^(?:,)/, /^(?:\?)/, /^(?:@)/, /^(?:\{)/, /^(?:\})/, /^(?:([a-zA-Z$0-9_][a-zA-Z$_0-9.-]*))/, /^(?:$)/, /^(?:.)/],
            conditions: { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], "inclusive": true } }
        };
        return lexer;
    }();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;parser.Parser = Parser;
    return new Parser();
}();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = ParserImpl;
    exports.Parser = ParserImpl.Parser;
    exports.parse = function () {
        return ParserImpl.parse.apply(ParserImpl, arguments);
    };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}
//# sourceMappingURL=data:application/json;base64,