"use strict";

/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ParserImpl = function () {
    var o = function o(k, v, _o, l) {
        for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {}return _o;
    },
        $V0 = [1, 19],
        $V1 = [1, 20],
        $V2 = [1, 21],
        $V3 = [12, 19, 20, 22, 25, 49, 74, 78, 87, 93, 103, 126, 141],
        $V4 = [1, 24],
        $V5 = [1, 29],
        $V6 = [1, 30],
        $V7 = [1, 36],
        $V8 = [1, 35],
        $V9 = [1, 42],
        $Va = [1, 43],
        $Vb = [1, 44],
        $Vc = [5, 139],
        $Vd = [1, 49],
        $Ve = [41, 46, 47, 48, 126],
        $Vf = [5, 19, 20, 49, 139],
        $Vg = [1, 59],
        $Vh = [1, 60],
        $Vi = [5, 19, 20, 38, 39, 45, 49, 53, 54, 55, 57, 74, 78, 87, 89, 93, 95, 100, 106, 111, 126, 127, 131, 139],
        $Vj = [1, 79],
        $Vk = [1, 84],
        $Vl = [1, 89],
        $Vm = [5, 14, 19, 20, 38, 39, 45, 47, 49, 53, 54, 55, 57, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74, 78, 87, 89, 93, 95, 100, 106, 111, 125, 126, 127, 130, 131, 137, 138, 139],
        $Vn = [5, 14, 19, 20, 38, 39, 45, 49, 53, 54, 55, 57, 74, 78, 87, 89, 93, 95, 100, 106, 111, 126, 127, 131, 139],
        $Vo = [45, 127],
        $Vp = [45, 131],
        $Vq = [5, 38, 39, 74, 78, 87, 89, 93, 95, 100, 106, 111, 126, 139],
        $Vr = [5, 38, 39, 45, 74, 78, 87, 89, 93, 95, 100, 106, 111, 126, 139],
        $Vs = [1, 99],
        $Vt = [1, 100],
        $Vu = [1, 101],
        $Vv = [1, 102],
        $Vw = [1, 103],
        $Vx = [1, 104],
        $Vy = [5, 74, 78, 87, 89, 95, 100, 106, 111, 126],
        $Vz = [1, 119],
        $VA = [5, 14, 45, 49, 74, 78, 87, 89, 95, 100, 106, 111, 126],
        $VB = [5, 38, 39, 45, 53, 54, 55, 57, 74, 78, 87, 89, 93, 95, 100, 106, 111, 126, 139],
        $VC = [47, 125, 126, 130, 137, 138],
        $VD = [5, 38, 39, 45, 53, 55, 57, 74, 78, 87, 89, 93, 95, 100, 106, 111, 126, 139],
        $VE = [5, 38, 39, 45, 55, 57, 74, 78, 87, 89, 93, 95, 100, 106, 111, 126, 139],
        $VF = [5, 89, 95, 100, 106, 111],
        $VG = [1, 156],
        $VH = [1, 157],
        $VI = [1, 159],
        $VJ = [19, 47, 125, 126, 130, 137, 138],
        $VK = [5, 74, 78, 87, 89, 93, 95, 100, 106, 111, 126],
        $VL = [1, 182],
        $VM = [1, 183],
        $VN = [5, 45, 74, 78, 87, 89, 93, 95, 100, 106, 111, 126],
        $VO = [49, 74, 78, 87, 93, 126],
        $VP = [1, 206],
        $VQ = [74, 78, 87, 93, 126];
    var parser = { trace: function trace() {},
        yy: {},
        symbols_: { "error": 2, "statement": 3, "insert_statement": 4, "EOF": 5, "update_statement": 6, "remove_statement": 7, "find_statement": 8, "find_and_modify_statement": 9, "INTO": 10, "collection": 11, "INSERT": 12, "value_expression": 13, "FROM": 14, "update_clauses": 15, "update_statement_option0": 16, "update_statement_option1": 17, "update_clause": 18, "SET": 19, "PUSH": 20, "field_name": 21, "REMOVE": 22, "remove_statement_option0": 23, "remove_statement_option1": 24, "FIND": 25, "find_statement_option0": 26, "field_selection": 27, "find_statement_option1": 28, "find_statement_repetition0": 29, "find_statement_repetition1": 30, "version": 31, "where_expression": 32, "update_or_upsert": 33, "find_and_modify_statement_option0": 34, "find_and_modify_statement_option1": 35, "NEW": 36, "ORIGINAL": 37, "UPDATE": 38, "UPSERT": 39, "field_references": 40, "*": 41, "context_reference": 42, "object_literal": 43, "field_reference": 44, ",": 45, "!": 46, "STRING_LITERAL": 47, "IDENTIFIER": 48, "WHERE": 49, "filters": 50, "filter": 51, "logical_filter": 52, "AND": 53, "OR": 54, "NOR": 55, "(": 56, ")": 57, "logical_operator": 58, "filter_operator": 59, "IN": 60, "array_literal": 61, "NOT": 62, "EXISTS": 63, ">": 64, ">=": 65, "<": 66, "<=": 67, "==": 68, "!=": 69, "ELEM": 70, "modifiers": 71, "modifiers_group0": 72, "limit_clause": 73, "LIMIT": 74, "BY": 75, "number_literal": 76, "sort_clause": 77, "SORT": 78, "field_sorts": 79, "sort_clause_group0": 80, "field_sort": 81, "-": 82, "field_sort_group0": 83, "+": 84, "field_sort_group1": 85, "skip_clause": 86, "SKIP": 87, "joins": 88, "POPULATE": 89, "joins_option0": 90, "joins_option1": 91, "joins_repetition0": 92, "ON": 93, "join_condition": 94, "INFLATE": 95, "joins_option2": 96, "joins_option3": 97, "joins_repetition1": 98, "join_in_condition": 99, "JOIN": 100, "joins_option4": 101, "joins_repetition2": 102, "AS": 103, "joins_option5": 104, "joins_repetition3": 105, "LEFT": 106, "joins_option6": 107, "joins_repetition4": 108, "joins_option7": 109, "joins_repetition5": 110, "OUTER": 111, "joins_option8": 112, "joins_repetition6": 113, "joins_option9": 114, "joins_repetition7": 115, "join_condition_group0": 116, "join_condition_group1": 117, "join_in_condition_group0": 118, "join_in_condition_group1": 119, "alias": 120, "collection_group0": 121, "identifier": 122, "current_reference": 123, "literal": 124, "@": 125, "{": 126, "}": 127, "string_literal": 128, "boolean_literal": 129, "[": 130, "]": 131, "value_list": 132, "key_value_pairs": 133, "key_value_pair": 134, "key_value_pair_group0": 135, ":": 136, "NUMBER_LITERAL": 137, "BOOLEAN": 138, "ONCE": 139, "ONE": 140, "where_experession": 141, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 5: "EOF", 10: "INTO", 12: "INSERT", 14: "FROM", 19: "SET", 20: "PUSH", 22: "REMOVE", 25: "FIND", 36: "NEW", 37: "ORIGINAL", 38: "UPDATE", 39: "UPSERT", 41: "*", 45: ",", 46: "!", 47: "STRING_LITERAL", 48: "IDENTIFIER", 49: "WHERE", 53: "AND", 54: "OR", 55: "NOR", 56: "(", 57: ")", 60: "IN", 62: "NOT", 63: "EXISTS", 64: ">", 65: ">=", 66: "<", 67: "<=", 68: "==", 69: "!=", 70: "ELEM", 74: "LIMIT", 75: "BY", 78: "SORT", 82: "-", 84: "+", 87: "SKIP", 89: "POPULATE", 93: "ON", 95: "INFLATE", 100: "JOIN", 103: "AS", 106: "LEFT", 111: "OUTER", 125: "@", 126: "{", 127: "}", 130: "[", 131: "]", 136: ":", 137: "NUMBER_LITERAL", 138: "BOOLEAN", 139: "ONCE", 140: "ONE", 141: "where_experession" },
        productions_: [0, [3, 2], [3, 2], [3, 2], [3, 2], [3, 2], [4, 4], [6, 5], [15, 1], [15, 2], [18, 2], [18, 3], [7, 5], [8, 8], [9, 10], [31, 1], [31, 1], [33, 1], [33, 1], [27, 1], [27, 1], [27, 1], [27, 1], [40, 1], [40, 3], [44, 1], [44, 2], [21, 1], [21, 1], [32, 2], [32, 2], [50, 1], [50, 3], [50, 1], [52, 3], [52, 3], [52, 3], [52, 3], [52, 3], [52, 3], [52, 3], [52, 3], [52, 3], [52, 3], [52, 3], [52, 3], [52, 3], [58, 1], [58, 1], [58, 1], [51, 3], [51, 3], [51, 4], [51, 2], [51, 3], [59, 1], [59, 1], [59, 1], [59, 1], [59, 1], [59, 1], [59, 1], [71, 1], [73, 3], [77, 3], [77, 1], [79, 1], [79, 3], [81, 2], [81, 2], [86, 2], [88, 9], [88, 9], [88, 8], [88, 10], [88, 9], [88, 11], [88, 9], [88, 11], [94, 3], [99, 3], [120, 2], [11, 1], [122, 1], [13, 1], [13, 1], [13, 1], [123, 2], [42, 5], [124, 1], [124, 1], [124, 1], [124, 1], [124, 1], [61, 2], [61, 3], [132, 1], [132, 3], [43, 2], [43, 3], [133, 1], [133, 3], [134, 3], [128, 1], [76, 1], [129, 1], [16, 0], [16, 1], [17, 0], [17, 1], [23, 0], [23, 1], [24, 0], [24, 1], [26, 0], [26, 1], [28, 0], [28, 1], [29, 0], [29, 2], [30, 0], [30, 2], [34, 0], [34, 1], [35, 0], [35, 1], [72, 1], [72, 1], [72, 1], [80, 1], [80, 1], [83, 1], [83, 1], [85, 1], [85, 1], [90, 0], [90, 1], [91, 0], [91, 1], [92, 0], [92, 2], [96, 0], [96, 1], [97, 0], [97, 1], [98, 0], [98, 2], [101, 0], [101, 1], [102, 0], [102, 2], [104, 0], [104, 1], [105, 0], [105, 2], [107, 0], [107, 1], [108, 0], [108, 2], [109, 0], [109, 1], [110, 0], [110, 2], [112, 0], [112, 1], [113, 0], [113, 2], [114, 0], [114, 1], [115, 0], [115, 2], [116, 1], [116, 1], [117, 1], [117, 1], [118, 1], [118, 1], [119, 1], [119, 1], [121, 1], [121, 1], [121, 1], [135, 1], [135, 1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:case 2:case 3:case 4:case 5:
                    this.$ = $$[$0 - 1];return this.$;
                    break;
                case 6:
                    this.$ = new yy.ast.InsertStatement($$[$0 - 2], $$[$0], this._$);
                    break;
                case 7:
                    this.$ = new yy.ast.UpdateStatement($$[$0 - 3], $$[$0 - 2], $$[$0 - 1] || [], $$[$0] || false, this._$);
                    break;
                case 8:case 33:case 96:
                    this.$ = [$$[$0]];
                    break;
                case 9:
                    this.$ = $$[$0 - 1].concat($$[$0]);
                    break;
                case 10:
                    this.$ = new yy.ast.SetClause($$[$0], this._$);
                    break;
                case 11:
                    this.$ = new yy.ast.PushClause($$[$0 - 1], $$[$0], _$[$0 - 1]);
                    break;
                case 12:
                    this.$ = new yy.ast.RemoveStatement($$[$0 - 3], $$[$0 - 1] || [], $$[$0] || false, this._$);
                    break;
                case 13:
                    this.$ = new yy.ast.FindStatement($$[$0 - 6], $$[$0 - 3], $$[$0 - 2] || [], $$[$0 - 1] || [], $$[$0] || [], $$[$0 - 4], this._$);
                    break;
                case 14:
                    this.$ = new yy.ast.FindAndModifyStatement($$[$0 - 8], $$[$0 - 6], $$[$0 - 5], $$[$0 - 4], $$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], this._$);

                    break;
                case 15:case 17:
                    this.$ = false;
                    break;
                case 16:
                    this.$ = true;
                    break;
                case 18:
                    this.$ = true;
                    break;
                case 19:
                    this.$ = $$[$0];
                    break;
                case 20:
                    this.$ = [new yy.ast.AllFieldsReference(this._$)];
                    break;
                case 21:case 22:
                    this.$ = [$$[$0]];
                    break;
                case 23:case 31:case 100:
                    this.$ = [$$[$0]];
                    break;
                case 24:case 101:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 25:
                    this.$ = new yy.ast.FieldReference($$[$0], true, this._$);
                    break;
                case 26:
                    this.$ = new yy.ast.FieldReference($$[$0], false, this._$);
                    break;
                case 27:
                    this.$ = $$[$0].substring(1, $$[$0].length - 1);
                    break;
                case 28:case 81:
                    this.$ = $$[$0];
                    break;
                case 29:
                    this.$ = $$[$0];
                    break;
                case 30:
                    this.$ = [$$[$0]];
                    break;
                case 32:
                    this.$ = $$[$0 - 2];
                    this.$.push($$[$0]);

                    break;
                case 34:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:
                    this.$ = new yy.ast.LogicFilter($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 43:case 44:case 45:
                    this.$ = new yy.ast.LogicFilter($$[$0 - 2], $$[$0 - 1], $$[$0]);
                    break;
                case 46:
                    this.$ = $$[$0 - 1];
                    break;
                case 47:
                    this.$ = '$or';
                    break;
                case 48:
                    this.$ = '$and';
                    break;
                case 49:
                    this.$ = '$nor';
                    break;
                case 50:
                    this.$ = new yy.ast.Filter($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 51:
                    this.$ = new yy.ast.Filter($$[$0 - 2], '$in', $$[$0], this._$);
                    break;
                case 52:
                    this.$ = new yy.ast.Filter($$[$0 - 3], '$nin', $$[$0], this._$);
                    break;
                case 53:
                    this.$ = new yy.ast.Filter($$[$0 - 1], '$exists', new yy.ast.BooleanLiteral(true, this._$));
                    break;
                case 54:
                    this.$ = new yy.ast.Filter($$[$0 - 2], '$exists', new yy.ast.BooleanLiteral(false, this._$));
                    break;
                case 55:
                    this.$ = '$gt';
                    break;
                case 56:
                    this.$ = '$gte';
                    break;
                case 57:
                    this.$ = '$lt';
                    break;
                case 58:
                    this.$ = '$lte';
                    break;
                case 59:
                    this.$ = '$eq';
                    break;
                case 60:
                    this.$ = '$ne';
                    break;
                case 61:
                    this.$ = '$elemMatch';
                    break;
                case 63:
                    this.$ = new yy.ast.LimitClause($$[$0 - 1], this._$);
                    break;
                case 64:
                    this.$ = new yy.ast.SortClause(new yy.ast.ObjectLiteral($$[$0], this._$), this._$);
                    break;
                case 65:
                    this.$ = new yy.ast.SortClause($$[$0], this._$);
                    break;
                case 66:
                    this.$ = [$$[$0]];
                    break;
                case 67:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 68:
                    this.$ = { key: $$[$0], value: new yy.ast.NumberLiteral(-1, this._$) };
                    break;
                case 69:
                    this.$ = { key: $$[$0], value: new yy.ast.NumberLiteral(1, this._$) };
                    break;
                case 70:
                    this.$ = new yy.SkipClause($$[$0], this._$);
                    break;
                case 71:
                    this.$ = new yy.ast.PopulateStatement($$[$0 - 7], $$[$0 - 5], $$[$0 - 4], $$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0], this._$);

                    break;
                case 72:
                    this.$ = new yy.ast.InflateStatement($$[$0 - 7], $$[$0 - 5], $$[$0 - 4], $$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0], this._$);

                    break;
                case 73:
                    this.$ = new yy.ast.InnerJoinStatement($$[$0 - 6], $$[$0 - 4], $$[$0 - 4], $$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0], this._$);

                    break;
                case 74:
                    this.$ = new yy.ast.InnerJoinStatement($$[$0 - 8], $$[$0 - 6], $$[$0 - 4], $$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0], this._$);

                    break;
                case 75:
                    this.$ = new yy.ast.LeftJoinStatement($$[$0 - 6], $$[$0 - 4], $$[$0 - 4], $$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0], this._$);

                    break;
                case 76:
                    this.$ = new yy.ast.LeftJoinStatement($$[$0 - 8], $$[$0 - 6], $$[$0 - 4], $$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0], this._$);

                    break;
                case 77:
                    this.$ = new yy.ast.OuterJoinStatement($$[$0 - 6], $$[$0 - 4], $$[$0 - 4], $$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0], this._$);

                    break;
                case 78:
                    this.$ = new yy.ast.OuterJoinStatement($$[$0 - 8], $$[$0 - 6], $$[$0 - 4], $$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0], this._$);

                    break;
                case 79:
                    this.$ = new yy.ast.JoinCondition($$[$0 - 2], $$[$0], this._$);
                    break;
                case 80:
                    this.$ = new yy.ast.JoinInCondition($$[$0 - 2], $$[$0], this._$);
                    break;
                case 83:
                    this.$ = new yy.ast.Identifier($$[$0], this._$);
                    break;
                case 87:
                    this.$ = new yy.ast.ContextReference($$[$0], this._$);
                    break;
                case 88:
                    this.$ = new yy.ast.ContextReference($$[$0 - 2], this._$);
                    break;
                case 94:
                    this.$ = new yy.ast.ArrayLiteral([], this._$);
                    break;
                case 95:
                    this.$ = new yy.ast.ArrayLiteral($$[$0 - 1], this._$);
                    break;
                case 97:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 98:
                    this.$ = new yy.ast.ObjectLiteral([], this._$);
                    break;
                case 99:
                    this.$ = new yy.ast.ObjectLiteral($$[$0 - 1], this._$);
                    break;
                case 102:
                    this.$ = { key: $$[$0 - 2], value: $$[$0] };
                    break;
                case 103:
                    this.$ = new yy.ast.StringLiteral($$[$0], this._$);
                    break;
                case 104:
                    this.$ = new yy.ast.NumberLiteral(yy.help.parseNumber($$[$0]), this._$);
                    break;
                case 105:
                    this.$ = new yy.ast.BooleanLiteral(yy.help.parseBoolean($$[$0]), this._$);
                    break;
                case 118:case 120:case 139:case 145:case 149:case 153:case 157:case 161:case 165:case 169:
                    this.$ = [];
                    break;
                case 119:case 121:case 140:case 146:case 150:case 154:case 158:case 162:case 166:case 170:
                    $$[$0 - 1].push($$[$0]);
                    break;
            }
        },
        table: [{ 3: 1, 4: 2, 6: 3, 7: 4, 8: 5, 9: 6, 10: [1, 7], 14: [1, 8] }, { 1: [3] }, { 5: [1, 9] }, { 5: [1, 10] }, { 5: [1, 11] }, { 5: [1, 12] }, { 5: [1, 13] }, { 11: 14, 42: 18, 47: $V0, 48: $V1, 121: 15, 122: 17, 126: $V2, 128: 16 }, { 11: 22, 42: 18, 47: $V0, 48: $V1, 121: 15, 122: 17, 126: $V2, 128: 16 }, { 1: [2, 1] }, { 1: [2, 2] }, { 1: [2, 3] }, { 1: [2, 4] }, { 1: [2, 5] }, { 12: [1, 23] }, o($V3, [2, 82]), o($V3, [2, 179]), o($V3, [2, 180]), o($V3, [2, 181]), o([5, 12, 19, 20, 22, 25, 38, 39, 45, 49, 53, 54, 55, 57, 60, 68, 74, 78, 87, 89, 93, 95, 100, 103, 106, 111, 126, 127, 131, 136, 139, 141], [2, 103]), o([5, 12, 19, 20, 22, 25, 45, 49, 60, 68, 74, 78, 87, 89, 93, 95, 100, 103, 106, 111, 126, 136, 141], [2, 83]), { 126: $V4 }, { 15: 25, 18: 28, 19: $V5, 20: $V6, 22: [1, 26], 25: [1, 27] }, { 13: 31, 42: 32, 43: 38, 47: $V0, 61: 37, 76: 40, 123: 33, 124: 34, 125: $V7, 126: $V8, 128: 39, 129: 41, 130: $V9, 137: $Va, 138: $Vb }, { 48: [1, 45] }, o($Vc, [2, 106], { 16: 46, 18: 47, 32: 48, 19: $V5, 20: $V6, 49: $Vd }), o($Vc, [2, 110], { 23: 50, 32: 51, 49: $Vd }), o($Ve, [2, 114], { 26: 52, 31: 53, 36: [1, 55], 37: [1, 56], 140: [1, 54] }), o($Vf, [2, 8]), { 13: 57, 42: 32, 43: 38, 47: $V0, 61: 37, 76: 40, 123: 33, 124: 34, 125: $V7, 126: $V8, 128: 39, 129: 41, 130: $V9, 137: $Va, 138: $Vb }, { 21: 58, 47: $Vg, 48: $Vh }, { 5: [2, 6] }, o($Vi, [2, 84]), o($Vi, [2, 85]), o($Vi, [2, 86]), { 47: $V0, 48: $V1, 122: 65, 126: $V4, 127: [1, 61], 128: 66, 133: 62, 134: 63, 135: 64 }, { 21: 67, 47: $Vg, 48: $Vh }, o($Vi, [2, 89]), o($Vi, [2, 90]), o($Vi, [2, 91]), o($Vi, [2, 92]), o($Vi, [2, 93]), { 13: 70, 42: 32, 43: 38, 47: $V0, 61: 37, 76: 40, 123: 33, 124: 34, 125: $V7, 126: $V8, 128: 39, 129: 41, 130: $V9, 131: [1, 68], 132: 69, 137: $Va, 138: $Vb }, o($Vi, [2, 104]), o($Vi, [2, 105]), { 127: [1, 71] }, { 5: [2, 108], 17: 72, 139: [1, 73] }, o($Vf, [2, 9]), o($Vc, [2, 107]), { 21: 78, 42: 75, 47: $Vg, 48: $Vh, 50: 74, 51: 76, 52: 77, 56: $Vj, 126: $V2 }, { 5: [2, 112], 24: 80, 139: [1, 81] }, o($Vc, [2, 111]), { 21: 88, 27: 82, 40: 83, 41: $Vk, 42: 85, 43: 86, 44: 87, 46: $Vl, 47: $Vg, 48: $Vh, 126: $V8 }, { 21: 88, 27: 90, 40: 83, 41: $Vk, 42: 85, 43: 86, 44: 87, 46: $Vl, 47: $Vg, 48: $Vh, 126: $V8 }, o($Ve, [2, 115]), o($Ve, [2, 15]), o($Ve, [2, 16]), o($Vf, [2, 10]), { 13: 91, 42: 32, 43: 38, 47: $V0, 61: 37, 76: 40, 123: 33, 124: 34, 125: $V7, 126: $V8, 128: 39, 129: 41, 130: $V9, 137: $Va, 138: $Vb }, o($Vm, [2, 27]), o($Vm, [2, 28]), o($Vn, [2, 98]), { 45: [1, 93], 127: [1, 92] }, o($Vo, [2, 100]), { 136: [1, 94] }, { 136: [2, 182] }, { 136: [2, 183] }, o($Vi, [2, 87]), o($Vi, [2, 94]), { 45: [1, 96], 131: [1, 95] }, o($Vp, [2, 96]), { 127: [1, 97] }, { 5: [2, 7] }, { 5: [2, 109] }, o($Vq, [2, 29], { 45: [1, 98] }), o($Vq, [2, 30]), o($Vr, [2, 31], { 53: $Vs, 54: $Vt, 55: $Vu }), o($Vr, [2, 33], { 53: $Vv, 54: $Vw, 55: $Vx }), { 59: 105, 60: [1, 106], 62: [1, 107], 63: [1, 108], 64: [1, 109], 65: [1, 110], 66: [1, 111], 67: [1, 112], 68: [1, 113], 69: [1, 114], 70: [1, 115] }, { 21: 78, 47: $Vg, 48: $Vh, 51: 117, 52: 116, 56: $Vj }, { 5: [2, 12] }, { 5: [2, 113] }, o($Vy, [2, 116], { 28: 118, 32: 120, 45: $Vz, 49: $Vd }), o($VA, [2, 19]), o($VA, [2, 20]), o($VA, [2, 21]), o($VA, [2, 22]), o($VA, [2, 23]), o($VA, [2, 25]), { 21: 121, 47: $Vg, 48: $Vh }, { 32: 122, 45: $Vz, 49: $Vd }, o($Vf, [2, 11]), o($Vn, [2, 99]), { 47: $V0, 48: $V1, 122: 65, 128: 66, 134: 123, 135: 64 }, { 13: 124, 42: 32, 43: 38, 47: $V0, 61: 37, 76: 40, 123: 33, 124: 34, 125: $V7, 126: $V8, 128: 39, 129: 41, 130: $V9, 137: $Va, 138: $Vb }, o($Vi, [2, 95]), { 13: 125, 42: 32, 43: 38, 47: $V0, 61: 37, 76: 40, 123: 33, 124: 34, 125: $V7, 126: $V8, 128: 39, 129: 41, 130: $V9, 137: $Va, 138: $Vb }, o([5, 12, 14, 19, 20, 22, 25, 38, 39, 45, 49, 53, 54, 55, 57, 74, 78, 87, 89, 93, 95, 100, 103, 106, 111, 126, 127, 131, 139, 141], [2, 88]), { 21: 78, 47: $Vg, 48: $Vh, 51: 126 }, { 21: 78, 47: $Vg, 48: $Vh, 51: 127, 52: 128, 56: $Vj }, { 21: 78, 47: $Vg, 48: $Vh, 51: 129, 52: 130, 56: $Vj }, { 21: 78, 47: $Vg, 48: $Vh, 51: 131, 52: 132, 56: $Vj }, { 21: 78, 47: $Vg, 48: $Vh, 51: 133, 52: 134, 56: $Vj }, { 21: 78, 47: $Vg, 48: $Vh, 51: 135, 52: 136, 56: $Vj }, { 21: 78, 47: $Vg, 48: $Vh, 51: 137, 52: 138, 56: $Vj }, { 13: 139, 42: 32, 43: 38, 47: $V0, 61: 37, 76: 40, 123: 33, 124: 34, 125: $V7, 126: $V8, 128: 39, 129: 41, 130: $V9, 137: $Va, 138: $Vb }, { 61: 140, 130: $V9 }, { 60: [1, 141], 63: [1, 142] }, o($VB, [2, 53]), o($VC, [2, 55]), o($VC, [2, 56]), o($VC, [2, 57]), o($VC, [2, 58]), o($VC, [2, 59]), o($VC, [2, 60]), o($VC, [2, 61]), { 53: $Vv, 54: $Vw, 55: $Vx, 57: [1, 143] }, { 53: $Vs, 54: $Vt, 55: $Vu }, o($Vy, [2, 118], { 29: 144 }), { 21: 88, 44: 145, 46: $Vl, 47: $Vg, 48: $Vh }, o($Vy, [2, 117]), o($VA, [2, 26]), { 33: 146, 38: [1, 147], 39: [1, 148] }, o($Vo, [2, 101]), o($Vo, [2, 102]), o($Vp, [2, 97]), o($Vr, [2, 32]), o($VD, [2, 34], { 54: $Vt }), o($VD, [2, 37], { 54: $Vw }), o($VB, [2, 35]), o($VB, [2, 38]), o($VE, [2, 36], { 53: $Vs, 54: $Vt }), o($VE, [2, 39], { 53: $Vv, 54: $Vw }), o($VD, [2, 40], { 54: $Vt }), o($VD, [2, 43], { 54: $Vw }), o($VB, [2, 41]), o($VB, [2, 44]), o($VE, [2, 42], { 53: $Vs, 54: $Vt }), o($VE, [2, 45], { 53: $Vv, 54: $Vw }), o($VB, [2, 50]), o($VB, [2, 51]), { 61: 149, 130: $V9 }, o($VB, [2, 54]), o($VB, [2, 46]), o($VF, [2, 120], { 30: 150, 71: 151, 72: 152, 73: 153, 77: 154, 86: 155, 80: 158, 42: 160, 43: 161, 74: $VG, 78: $VH, 87: $VI, 126: $V8 }), o($VA, [2, 24]), o($VC, [2, 122], { 34: 162, 19: [1, 163] }), o($VJ, [2, 17]), o($VJ, [2, 18]), o($VB, [2, 52]), { 5: [2, 13], 88: 164, 89: [1, 165], 95: [1, 166], 100: [1, 167], 106: [1, 168], 111: [1, 169] }, o($Vy, [2, 119]), o($VK, [2, 62]), o($VK, [2, 126]), o($VK, [2, 127]), o($VK, [2, 128]), { 75: [1, 170] }, { 75: [1, 171] }, o($VK, [2, 65]), { 76: 172, 137: $Va }, o($VK, [2, 129]), o($VK, [2, 130]), { 13: 173, 42: 32, 43: 38, 47: $V0, 61: 37, 76: 40, 123: 33, 124: 34, 125: $V7, 126: $V8, 128: 39, 129: 41, 130: $V9, 137: $Va, 138: $Vb }, o($VC, [2, 123]), o($VF, [2, 121]), { 21: 88, 27: 174, 40: 83, 41: $Vk, 42: 85, 43: 86, 44: 87, 46: $Vl, 47: $Vg, 48: $Vh, 126: $V8 }, { 21: 88, 27: 175, 40: 83, 41: $Vk, 42: 85, 43: 86, 44: 87, 46: $Vl, 47: $Vg, 48: $Vh, 126: $V8 }, { 21: 88, 27: 176, 40: 83, 41: $Vk, 42: 85, 43: 86, 44: 87, 46: $Vl, 47: $Vg, 48: $Vh, 126: $V8 }, { 100: [1, 177] }, { 100: [1, 178] }, { 76: 179, 137: $Va }, { 79: 180, 81: 181, 82: $VL, 84: $VM }, o($VK, [2, 70]), { 5: [2, 124], 35: 184, 42: 160, 43: 161, 77: 185, 78: $VH, 80: 158, 126: $V8 }, { 14: [1, 186], 45: $Vz }, { 14: [1, 187], 45: $Vz }, { 14: [1, 188], 45: $Vz }, { 21: 88, 27: 189, 40: 83, 41: $Vk, 42: 85, 43: 86, 44: 87, 46: $Vl, 47: $Vg, 48: $Vh, 126: $V8 }, { 21: 88, 27: 190, 40: 83, 41: $Vk, 42: 85, 43: 86, 44: 87, 46: $Vl, 47: $Vg, 48: $Vh, 126: $V8 }, o($VK, [2, 63]), o($VK, [2, 64], { 45: [1, 191] }), o($VN, [2, 66]), { 47: $V0, 48: $V1, 83: 192, 122: 193, 128: 194 }, { 47: $V0, 48: $V1, 85: 195, 122: 196, 128: 197 }, { 5: [2, 14] }, { 5: [2, 125] }, { 11: 198, 42: 18, 47: $V0, 48: $V1, 121: 15, 122: 17, 126: $V2, 128: 16 }, { 11: 199, 42: 18, 47: $V0, 48: $V1, 121: 15, 122: 17, 126: $V2, 128: 16 }, { 11: 200, 42: 18, 47: $V0, 48: $V1, 121: 15, 122: 17, 126: $V2, 128: 16 }, { 14: [1, 201], 45: $Vz }, { 14: [1, 202], 45: $Vz }, { 81: 203, 82: $VL, 84: $VM }, o($VN, [2, 68]), o($VN, [2, 131]), o($VN, [2, 132]), o($VN, [2, 69]), o($VN, [2, 133]), o($VN, [2, 134]), o($VO, [2, 135], { 90: 204, 120: 205, 103: $VP }), o($VO, [2, 141], { 96: 207, 120: 208, 103: $VP }), o($VQ, [2, 147], { 101: 209, 32: 211, 49: $Vd, 103: [1, 210] }), { 11: 212, 42: 18, 47: $V0, 48: $V1, 121: 15, 122: 17, 126: $V2, 128: 16 }, { 11: 213, 42: 18, 47: $V0, 48: $V1, 121: 15, 122: 17, 126: $V2, 128: 16 }, o($VN, [2, 67]), o($VQ, [2, 137], { 91: 214, 32: 215, 49: $Vd }), o($VO, [2, 136]), { 11: 216, 42: 18, 47: $V0, 48: $V1, 121: 15, 122: 17, 126: $V2, 128: 16 }, o($VQ, [2, 143], { 97: 217, 32: 218, 49: $Vd }), o($VO, [2, 142]), o($VQ, [2, 149], { 102: 219 }), { 11: 220, 42: 18, 47: $V0, 48: $V1, 121: 15, 122: 17, 126: $V2, 128: 16 }, o($VQ, [2, 148]), o($VQ, [2, 155], { 107: 221, 32: 223, 49: $Vd, 103: [1, 222] }), o($VQ, [2, 163], { 112: 224, 103: [1, 225], 141: [1, 226] }), o($VQ, [2, 139], { 92: 227 }), o($VQ, [2, 138]), o($VO, [2, 81]), o($VQ, [2, 145], { 98: 228 }), o($VQ, [2, 144]), { 42: 160, 43: 161, 71: 230, 72: 152, 73: 153, 74: $VG, 77: 154, 78: $VH, 80: 158, 86: 155, 87: $VI, 93: [1, 229], 126: $V8 }, o($VQ, [2, 151], { 104: 231, 32: 232, 49: $Vd }), o($VQ, [2, 157], { 108: 233 }), { 11: 234, 42: 18, 47: $V0, 48: $V1, 121: 15, 122: 17, 126: $V2, 128: 16 }, o($VQ, [2, 156]), o($VQ, [2, 165], { 113: 235 }), { 11: 236, 42: 18, 47: $V0, 48: $V1, 121: 15, 122: 17, 126: $V2, 128: 16 }, o($VQ, [2, 164]), { 42: 160, 43: 161, 71: 238, 72: 152, 73: 153, 74: $VG, 77: 154, 78: $VH, 80: 158, 86: 155, 87: $VI, 93: [1, 237], 126: $V8 }, { 42: 160, 43: 161, 71: 240, 72: 152, 73: 153, 74: $VG, 77: 154, 78: $VH, 80: 158, 86: 155, 87: $VI, 93: [1, 239], 126: $V8 }, { 47: $V0, 48: $V1, 94: 241, 116: 242, 122: 244, 128: 243 }, o($VQ, [2, 150]), o($VQ, [2, 153], { 105: 245 }), o($VQ, [2, 152]), { 42: 160, 43: 161, 71: 247, 72: 152, 73: 153, 74: $VG, 77: 154, 78: $VH, 80: 158, 86: 155, 87: $VI, 93: [1, 246], 126: $V8 }, o($VQ, [2, 159], { 109: 248, 32: 249, 49: $Vd }), { 42: 160, 43: 161, 71: 251, 72: 152, 73: 153, 74: $VG, 77: 154, 78: $VH, 80: 158, 86: 155, 87: $VI, 93: [1, 250], 126: $V8 }, o($VQ, [2, 167], { 114: 252, 141: [1, 253] }), { 47: $V0, 48: $V1, 94: 254, 116: 242, 122: 244, 128: 243 }, o($VQ, [2, 140]), { 47: $V0, 48: $V1, 99: 255, 118: 256, 122: 258, 128: 257 }, o($VQ, [2, 146]), o($VF, [2, 73]), { 68: [1, 259] }, { 68: [2, 171] }, { 68: [2, 172] }, { 42: 160, 43: 161, 71: 261, 72: 152, 73: 153, 74: $VG, 77: 154, 78: $VH, 80: 158, 86: 155, 87: $VI, 93: [1, 260], 126: $V8 }, { 47: $V0, 48: $V1, 94: 262, 116: 242, 122: 244, 128: 243 }, o($VQ, [2, 158]), o($VQ, [2, 161], { 110: 263 }), o($VQ, [2, 160]), { 47: $V0, 48: $V1, 94: 264, 116: 242, 122: 244, 128: 243 }, o($VQ, [2, 166]), o($VQ, [2, 169], { 115: 265 }), o($VQ, [2, 168]), o($VF, [2, 71]), o($VF, [2, 72]), { 60: [1, 266] }, { 60: [2, 175] }, { 60: [2, 176] }, { 47: $V0, 48: $V1, 117: 267, 122: 269, 128: 268 }, { 47: $V0, 48: $V1, 94: 270, 116: 242, 122: 244, 128: 243 }, o($VQ, [2, 154]), o($VF, [2, 75]), { 42: 160, 43: 161, 71: 272, 72: 152, 73: 153, 74: $VG, 77: 154, 78: $VH, 80: 158, 86: 155, 87: $VI, 93: [1, 271], 126: $V8 }, o($VF, [2, 77]), { 42: 160, 43: 161, 71: 274, 72: 152, 73: 153, 74: $VG, 77: 154, 78: $VH, 80: 158, 86: 155, 87: $VI, 93: [1, 273], 126: $V8 }, { 47: $V0, 48: $V1, 119: 275, 122: 277, 128: 276 }, o($VF, [2, 79]), o($VF, [2, 173]), o($VF, [2, 174]), o($VF, [2, 74]), { 47: $V0, 48: $V1, 94: 278, 116: 242, 122: 244, 128: 243 }, o($VQ, [2, 162]), { 47: $V0, 48: $V1, 94: 279, 116: 242, 122: 244, 128: 243 }, o($VQ, [2, 170]), o($VF, [2, 80]), o($VF, [2, 177]), o($VF, [2, 178]), o($VF, [2, 76]), o($VF, [2, 78])],
        defaultActions: { 9: [2, 1], 10: [2, 2], 11: [2, 3], 12: [2, 4], 13: [2, 5], 31: [2, 6], 65: [2, 182], 66: [2, 183], 72: [2, 7], 73: [2, 109], 80: [2, 12], 81: [2, 113], 184: [2, 14], 185: [2, 125], 243: [2, 171], 244: [2, 172], 257: [2, 175], 258: [2, 176] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                var _parseError = function _parseError(msg, hash) {
                    this.message = msg;
                    this.hash = hash;
                };

                _parseError.prototype = Error;

                throw new _parseError(str, hash);
            }
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                tstack = [],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = '',
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack: var lex = function lex() {
                var token;
                token = lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            var symbol,
                preErrorSymbol,
                state,
                action,
                a,
                r,
                yyval = {},
                p,
                len,
                newState,
                expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        } };
    /* generated by jison-lex 0.3.4 */
    var lexer = function () {
        var lexer = {

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function setInput(input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

            // consumes and returns one char from the input
            input: function input() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function unput(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function more() {
                this._more = true;
                return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function reject() {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
                return this;
            },

            // retain first n characters of the match
            less: function less(n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function pastInput() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function upcomingInput() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function showPosition() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function test_match(match, indexed_rule) {
                var token, lines, backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

            // return next match in input
            next: function next() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token, match, tempMatch, index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: { "flex": true },
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        return;
                        break;
                    case 1:
                        return 14;
                        break;
                    case 2:
                        return 25;
                        break;
                    case 3:
                        return 103;
                        break;
                    case 4:
                        return 49;
                        break;
                    case 5:
                        return 93;
                        break;
                    case 6:
                        return 100;
                        break;
                    case 7:
                        return 'FULL';
                        break;
                    case 8:
                        return 111;
                        break;
                    case 9:
                        return 106;
                        break;
                    case 10:
                        return 140;
                        break;
                    case 11:
                        return 60;
                        break;
                    case 12:
                        return 'NIN';
                        break;
                    case 13:
                        return 138;
                        break;
                    case 14:
                        return 54;
                        break;
                    case 15:
                        return 53;
                        break;
                    case 16:
                        return 62;
                        break;
                    case 17:
                        return 55;
                        break;
                    case 18:
                        return 63;
                        break;
                    case 19:
                        return 74;
                        break;
                    case 20:
                        return 78;
                        break;
                    case 21:
                        return 75;
                        break;
                    case 22:
                        return 10;
                        break;
                    case 23:
                        return 87;
                        break;
                    case 24:
                        return 12;
                        break;
                    case 25:
                        return 22;
                        break;
                    case 26:
                        return 38;
                        break;
                    case 27:
                        return 39;
                        break;
                    case 28:
                        return 'WITH';
                        break;
                    case 29:
                        return 19;
                        break;
                    case 30:
                        return 20;
                        break;
                    case 31:
                        return 139;
                        break;
                    case 32:
                        return 37;
                        break;
                    case 33:
                        return 36;
                        break;
                    case 34:
                        return 89;
                        break;
                    case 35:
                        return 95;
                        break;
                    case 36:
                        return 137;
                        break;
                    case 37:
                        return 47;
                        break;
                    case 38:
                        return 70;
                        break;
                    case 39:
                        return 41;
                        break;
                    case 40:
                        return 64;
                        break;
                    case 41:
                        return 66;
                        break;
                    case 42:
                        return 56;
                        break;
                    case 43:
                        return 57;
                        break;
                    case 44:
                        return 130;
                        break;
                    case 45:
                        return 131;
                        break;
                    case 46:
                        return ';';
                        break;
                    case 47:
                        return 136;
                        break;
                    case 48:
                        return '=';
                        break;
                    case 49:
                        return 68;
                        break;
                    case 50:
                        return 69;
                        break;
                    case 51:
                        return 65;
                        break;
                    case 52:
                        return 67;
                        break;
                    case 53:
                        return 84;
                        break;
                    case 54:
                        return 82;
                        break;
                    case 55:
                        return 41;
                        break;
                    case 56:
                        return '/';
                        break;
                    case 57:
                        return 46;
                        break;
                    case 58:
                        return 45;
                        break;
                    case 59:
                        return '?';
                        break;
                    case 60:
                        return 125;
                        break;
                    case 61:
                        return 126;
                        break;
                    case 62:
                        return 127;
                        break;
                    case 63:
                        return 48;
                        break;
                    case 64:
                        return 5;
                        break;
                    case 65:
                        console.log(yy_.yytext);
                        break;
                }
            },
            rules: [/^(?:\s+)/, /^(?:from|FROM)/, /^(?:find|FIND)/, /^(?:as|AS)/, /^(?:where|WHERE)/, /^(?:on|ON)/, /^(?:join|JOIN)/, /^(?:full|FULL)/, /^(?:outer|OUTER)/, /^(?:left|LEFT)/, /^(?:one|ONE)/, /^(?:in|IN)/, /^(?:nin|NIN)/, /^(?:true|false)/, /^(?:or|OR)/, /^(?:and|AND)/, /^(?:not|NOT)/, /^(?:nor|NOR)/, /^(?:exists|EXISTS)/, /^(?:limit|LIMIT)/, /^(?:sort|SORT)/, /^(?:by|BY)/, /^(?:into|INTO)/, /^(?:skip|SKIP)/, /^(?:insert|INSERT)/, /^(?:remove|REMOVE)/, /^(?:update|UPDATE)/, /^(?:upsert|UPSERT)/, /^(?:with|WITH)/, /^(?:set|SET)/, /^(?:push|PUSH)/, /^(?:once|ONCE)/, /^(?:original|ORIGINAL)/, /^(?:new|NEW)/, /^(?:populate|POPULATE)/, /^(?:inflate|INFLATE)/, /^(?:((([-]?([-]?([0]|(([1-9])([0-9]+)*)))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([-]?([0]|(([1-9])([0-9]+)*)))(([eE])([+-]?[0-9]+))?))|([0][xX]([0-9a-fA-F])+)|([0]([0-7])+)))/, /^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')|(`(([^\`\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*`)))/, /^(?:\$elemMatch)/, /^(?:\*)/, /^(?:>)/, /^(?:<)/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:;)/, /^(?::)/, /^(?:=)/, /^(?:==)/, /^(?:!=)/, /^(?:>=)/, /^(?:<=)/, /^(?:\+)/, /^(?:-)/, /^(?:\*)/, /^(?:\/)/, /^(?:!)/, /^(?:,)/, /^(?:\?)/, /^(?:@)/, /^(?:\{)/, /^(?:\})/, /^(?:([a-zA-Z$0-9_][a-zA-Z$_0-9.-]*))/, /^(?:$)/, /^(?:.)/],
            conditions: { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "inclusive": true } }
        };
        return lexer;
    }();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;parser.Parser = Parser;
    return new Parser();
}();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = ParserImpl;
    exports.Parser = ParserImpl.Parser;
    exports.parse = function () {
        return ParserImpl.parse.apply(ParserImpl, arguments);
    };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}
//# sourceMappingURL=data:application/json;base64,